!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t){e.exports=function(e){console.log("---------ajax--------"),console.log(e),$.ajax({url:"api/download",type:"post",contentType:"application/json",data:JSON.stringify({fileName:e.fileName}),success(e){window.pdf=e,window.location=`http://${window.location.hostname}:3000/edit-presentation`,console.log("successfully retrieved slide!"),console.log(e)},error(e){console.log(e)}})}},function(e,t,n){"use strict";n.r(t),function(e){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.3
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,i=["Edge","Trident","Firefox"],r=0,s=0;s<i.length;s+=1)if(n&&navigator.userAgent.indexOf(i[s])>=0){r=1;break}var a=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},r))}};function o(e){return e&&"[object Function]"==={}.toString.call(e)}function l(e,t){if(1!==e.nodeType)return[];var n=getComputedStyle(e,null);return t?n[t]:n}function c(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function d(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=l(e),n=t.overflow,i=t.overflowX,r=t.overflowY;return/(auto|scroll|overlay)/.test(n+r+i)?e:d(c(e))}var u=n&&!(!window.MSInputMethodContext||!document.documentMode),p=n&&/MSIE 10/.test(navigator.userAgent);function f(e){return 11===e?u:10===e?p:u||p}function h(e){if(!e)return document.documentElement;for(var t=f(10)?document.body:null,n=e.offsetParent;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var i=n&&n.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TD","TABLE"].indexOf(n.nodeName)&&"static"===l(n,"position")?h(n):n:e?e.ownerDocument.documentElement:document.documentElement}function m(e){return null!==e.parentNode?m(e.parentNode):e}function g(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?e:t,r=n?t:e,s=document.createRange();s.setStart(i,0),s.setEnd(r,0);var a,o,l=s.commonAncestorContainer;if(e!==l&&t!==l||i.contains(r))return"BODY"===(o=(a=l).nodeName)||"HTML"!==o&&h(a.firstElementChild)!==a?h(l):l;var c=m(e);return c.host?g(c.host,t):g(e,m(t).host)}function v(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var i=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||i)[t]}return e[t]}function y(e,t){var n="x"===t?"Left":"Top",i="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+i+"Width"],10)}function b(e,t,n,i){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],f(10)?n["offset"+e]+i["margin"+("Height"===e?"Top":"Left")]+i["margin"+("Height"===e?"Bottom":"Right")]:0)}function w(){var e=document.body,t=document.documentElement,n=f(10)&&getComputedStyle(t);return{height:b("Height",e,t,n),width:b("Width",e,t,n)}}var E=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},T=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),x=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},C=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e};function S(e){return C({},e,{right:e.left+e.width,bottom:e.top+e.height})}function _(e){var t={};try{if(f(10)){t=e.getBoundingClientRect();var n=v(e,"top"),i=v(e,"left");t.top+=n,t.left+=i,t.bottom+=n,t.right+=i}else t=e.getBoundingClientRect()}catch(e){}var r={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},s="HTML"===e.nodeName?w():{},a=s.width||e.clientWidth||r.right-r.left,o=s.height||e.clientHeight||r.bottom-r.top,c=e.offsetWidth-a,d=e.offsetHeight-o;if(c||d){var u=l(e);c-=y(u,"x"),d-=y(u,"y"),r.width-=c,r.height-=d}return S(r)}function A(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=f(10),r="HTML"===t.nodeName,s=_(e),a=_(t),o=d(e),c=l(t),u=parseFloat(c.borderTopWidth,10),p=parseFloat(c.borderLeftWidth,10);n&&"HTML"===t.nodeName&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var h=S({top:s.top-a.top-u,left:s.left-a.left-p,width:s.width,height:s.height});if(h.marginTop=0,h.marginLeft=0,!i&&r){var m=parseFloat(c.marginTop,10),g=parseFloat(c.marginLeft,10);h.top-=u-m,h.bottom-=u-m,h.left-=p-g,h.right-=p-g,h.marginTop=m,h.marginLeft=g}return(i&&!n?t.contains(o):t===o&&"BODY"!==o.nodeName)&&(h=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=v(t,"top"),r=v(t,"left"),s=n?-1:1;return e.top+=i*s,e.bottom+=i*s,e.left+=r*s,e.right+=r*s,e}(h,t)),h}function D(e){if(!e||!e.parentElement||f())return document.documentElement;for(var t=e.parentElement;t&&"none"===l(t,"transform");)t=t.parentElement;return t||document.documentElement}function O(e,t,n,i){var r=arguments.length>4&&void 0!==arguments[4]&&arguments[4],s={top:0,left:0},a=r?D(e):g(e,t);if("viewport"===i)s=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,i=A(e,n),r=Math.max(n.clientWidth,window.innerWidth||0),s=Math.max(n.clientHeight,window.innerHeight||0),a=t?0:v(n),o=t?0:v(n,"left");return S({top:a-i.top+i.marginTop,left:o-i.left+i.marginLeft,width:r,height:s})}(a,r);else{var o=void 0;"scrollParent"===i?"BODY"===(o=d(c(t))).nodeName&&(o=e.ownerDocument.documentElement):o="window"===i?e.ownerDocument.documentElement:i;var u=A(o,a,r);if("HTML"!==o.nodeName||function e(t){var n=t.nodeName;return"BODY"!==n&&"HTML"!==n&&("fixed"===l(t,"position")||e(c(t)))}(a))s=u;else{var p=w(),f=p.height,h=p.width;s.top+=u.top-u.marginTop,s.bottom=f+u.top,s.left+=u.left-u.marginLeft,s.right=h+u.left}}return s.left+=n,s.top+=n,s.right-=n,s.bottom-=n,s}function k(e,t,n,i,r){var s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=O(n,i,s,r),o={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},l=Object.keys(o).map(function(e){return C({key:e},o[e],{area:(t=o[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),c=l.filter(function(e){var t=e.width,i=e.height;return t>=n.clientWidth&&i>=n.clientHeight}),d=c.length>0?c[0].key:l[0].key,u=e.split("-")[1];return d+(u?"-"+u:"")}function I(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return A(n,i?D(t):g(t,n),i)}function N(e){var t=getComputedStyle(e),n=parseFloat(t.marginTop)+parseFloat(t.marginBottom),i=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+i,height:e.offsetHeight+n}}function M(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function L(e,t,n){n=n.split("-")[0];var i=N(e),r={width:i.width,height:i.height},s=-1!==["right","left"].indexOf(n),a=s?"top":"left",o=s?"left":"top",l=s?"height":"width",c=s?"width":"height";return r[a]=t[a]+t[l]/2-i[l]/2,r[o]=n===o?t[o]-i[c]:t[M(o)],r}function $(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function P(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var i=$(e,function(e){return e[t]===n});return e.indexOf(i)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&o(n)&&(t.offsets.popper=S(t.offsets.popper),t.offsets.reference=S(t.offsets.reference),t=n(t,e))}),t}function H(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function z(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<t.length;i++){var r=t[i],s=r?""+r+n:e;if(void 0!==document.body.style[s])return s}return null}function j(e){var t=e.ownerDocument;return t?t.defaultView:window}function R(e,t,n,i){n.updateBound=i,j(e).addEventListener("resize",n.updateBound,{passive:!0});var r=d(e);return function e(t,n,i,r){var s="BODY"===t.nodeName,a=s?t.ownerDocument.defaultView:t;a.addEventListener(n,i,{passive:!0}),s||e(d(a.parentNode),n,i,r),r.push(a)}(r,"scroll",n.updateBound,n.scrollParents),n.scrollElement=r,n.eventsEnabled=!0,n}function W(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,j(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function B(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function F(e,t){Object.keys(t).forEach(function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&B(t[n])&&(i="px"),e.style[n]=t[n]+i})}function V(e,t,n){var i=$(e,function(e){return e.name===t}),r=!!i&&e.some(function(e){return e.name===n&&e.enabled&&e.order<i.order});if(!r){var s="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+s+" modifier in order to work, be sure to include it before "+s+"!")}return r}var G=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],q=G.slice(3);function X(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=q.indexOf(e),i=q.slice(n+1).concat(q.slice(0,n));return t?i.reverse():i}var Y={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function U(e,t,n,i){var r=[0,0],s=-1!==["right","left"].indexOf(i),a=e.split(/(\+|\-)/).map(function(e){return e.trim()}),o=a.indexOf($(a,function(e){return-1!==e.search(/,|\s/)}));a[o]&&-1===a[o].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,c=-1!==o?[a.slice(0,o).concat([a[o].split(l)[0]]),[a[o].split(l)[1]].concat(a.slice(o+1))]:[a];return(c=c.map(function(e,i){var r=(1===i?!s:s)?"height":"width",a=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,i){var r=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),s=+r[1],a=r[2];if(!s)return e;if(0===a.indexOf("%")){var o=void 0;switch(a){case"%p":o=n;break;case"%":case"%r":default:o=i}return S(o)[t]/100*s}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*s;return s}(e,r,t,n)})})).forEach(function(e,t){e.forEach(function(n,i){B(n)&&(r[t]+=n*("-"===e[i-1]?-1:1))})}),r}var K={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],i=t.split("-")[1];if(i){var r=e.offsets,s=r.reference,a=r.popper,o=-1!==["bottom","top"].indexOf(n),l=o?"left":"top",c=o?"width":"height",d={start:x({},l,s[l]),end:x({},l,s[l]+s[c]-a[c])};e.offsets.popper=C({},a,d[i])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,i=e.placement,r=e.offsets,s=r.popper,a=r.reference,o=i.split("-")[0],l=void 0;return l=B(+n)?[+n,0]:U(n,s,a,o),"left"===o?(s.top+=l[0],s.left-=l[1]):"right"===o?(s.top+=l[0],s.left+=l[1]):"top"===o?(s.left+=l[0],s.top-=l[1]):"bottom"===o&&(s.left+=l[0],s.top+=l[1]),e.popper=s,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||h(e.instance.popper);e.instance.reference===n&&(n=h(n));var i=z("transform"),r=e.instance.popper.style,s=r.top,a=r.left,o=r[i];r.top="",r.left="",r[i]="";var l=O(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);r.top=s,r.left=a,r[i]=o,t.boundaries=l;var c=t.priority,d=e.offsets.popper,u={primary:function(e){var n=d[e];return d[e]<l[e]&&!t.escapeWithReference&&(n=Math.max(d[e],l[e])),x({},e,n)},secondary:function(e){var n="right"===e?"left":"top",i=d[n];return d[e]>l[e]&&!t.escapeWithReference&&(i=Math.min(d[n],l[e]-("right"===e?d.width:d.height))),x({},n,i)}};return c.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";d=C({},d,u[t](e))}),e.offsets.popper=d,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,i=t.reference,r=e.placement.split("-")[0],s=Math.floor,a=-1!==["top","bottom"].indexOf(r),o=a?"right":"bottom",l=a?"left":"top",c=a?"width":"height";return n[o]<s(i[l])&&(e.offsets.popper[l]=s(i[l])-n[c]),n[l]>s(i[o])&&(e.offsets.popper[l]=s(i[o])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!V(e.instance.modifiers,"arrow","keepTogether"))return e;var i=t.element;if("string"==typeof i){if(!(i=e.instance.popper.querySelector(i)))return e}else if(!e.instance.popper.contains(i))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var r=e.placement.split("-")[0],s=e.offsets,a=s.popper,o=s.reference,c=-1!==["left","right"].indexOf(r),d=c?"height":"width",u=c?"Top":"Left",p=u.toLowerCase(),f=c?"left":"top",h=c?"bottom":"right",m=N(i)[d];o[h]-m<a[p]&&(e.offsets.popper[p]-=a[p]-(o[h]-m)),o[p]+m>a[h]&&(e.offsets.popper[p]+=o[p]+m-a[h]),e.offsets.popper=S(e.offsets.popper);var g=o[p]+o[d]/2-m/2,v=l(e.instance.popper),y=parseFloat(v["margin"+u],10),b=parseFloat(v["border"+u+"Width"],10),w=g-e.offsets.popper[p]-y-b;return w=Math.max(Math.min(a[d]-m,w),0),e.arrowElement=i,e.offsets.arrow=(x(n={},p,Math.round(w)),x(n,f,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(H(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=O(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),i=e.placement.split("-")[0],r=M(i),s=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case Y.FLIP:a=[i,r];break;case Y.CLOCKWISE:a=X(i);break;case Y.COUNTERCLOCKWISE:a=X(i,!0);break;default:a=t.behavior}return a.forEach(function(o,l){if(i!==o||a.length===l+1)return e;i=e.placement.split("-")[0],r=M(i);var c=e.offsets.popper,d=e.offsets.reference,u=Math.floor,p="left"===i&&u(c.right)>u(d.left)||"right"===i&&u(c.left)<u(d.right)||"top"===i&&u(c.bottom)>u(d.top)||"bottom"===i&&u(c.top)<u(d.bottom),f=u(c.left)<u(n.left),h=u(c.right)>u(n.right),m=u(c.top)<u(n.top),g=u(c.bottom)>u(n.bottom),v="left"===i&&f||"right"===i&&h||"top"===i&&m||"bottom"===i&&g,y=-1!==["top","bottom"].indexOf(i),b=!!t.flipVariations&&(y&&"start"===s&&f||y&&"end"===s&&h||!y&&"start"===s&&m||!y&&"end"===s&&g);(p||v||b)&&(e.flipped=!0,(p||v)&&(i=a[l+1]),b&&(s=function(e){return"end"===e?"start":"start"===e?"end":e}(s)),e.placement=i+(s?"-"+s:""),e.offsets.popper=C({},e.offsets.popper,L(e.instance.popper,e.offsets.reference,e.placement)),e=P(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],i=e.offsets,r=i.popper,s=i.reference,a=-1!==["left","right"].indexOf(n),o=-1===["top","left"].indexOf(n);return r[a?"left":"top"]=s[n]-(o?r[a?"width":"height"]:0),e.placement=M(t),e.offsets.popper=S(r),e}},hide:{order:800,enabled:!0,fn:function(e){if(!V(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=$(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,i=t.y,r=e.offsets.popper,s=$(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==s&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==s?s:t.gpuAcceleration,o=_(h(e.instance.popper)),l={position:r.position},c={left:Math.floor(r.left),top:Math.round(r.top),bottom:Math.round(r.bottom),right:Math.floor(r.right)},d="bottom"===n?"top":"bottom",u="right"===i?"left":"right",p=z("transform"),f=void 0,m=void 0;if(m="bottom"===d?-o.height+c.bottom:c.top,f="right"===u?-o.width+c.right:c.left,a&&p)l[p]="translate3d("+f+"px, "+m+"px, 0)",l[d]=0,l[u]=0,l.willChange="transform";else{var g="bottom"===d?-1:1,v="right"===u?-1:1;l[d]=m*g,l[u]=f*v,l.willChange=d+", "+u}var y={"x-placement":e.placement};return e.attributes=C({},y,e.attributes),e.styles=C({},l,e.styles),e.arrowStyles=C({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return F(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&F(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,i,r){var s=I(r,t,e,n.positionFixed),a=k(n.placement,s,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),F(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},Q=function(){function e(t,n){var i=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};E(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=a(this.update.bind(this)),this.options=C({},e.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(C({},e.Defaults.modifiers,r.modifiers)).forEach(function(t){i.options.modifiers[t]=C({},e.Defaults.modifiers[t]||{},r.modifiers?r.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return C({name:e},i.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&o(e.onLoad)&&e.onLoad(i.reference,i.popper,i.options,e,i.state)}),this.update();var s=this.options.eventsEnabled;s&&this.enableEventListeners(),this.state.eventsEnabled=s}return T(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=I(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=k(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=L(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=P(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,H(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[z("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=R(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return W.call(this)}}]),e}();Q.Utils=("undefined"!=typeof window?window:e).PopperUtils,Q.placements=G,Q.Defaults=K,t.default=Q}.call(this,n(5))},function(e,t,n){e.exports=n(7)},function(e,t,n){
/*!
  * Bootstrap v4.1.0 (https://getbootstrap.com/)
  * Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
!function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),i.forEach(function(t){s(e,t,n[t])})}return e}t=t&&t.hasOwnProperty("default")?t.default:t,n=n&&n.hasOwnProperty("default")?n.default:n;var o=function(e){var t="transitionend";function n(t){var n=this,r=!1;return e(this).one(i.TRANSITION_END,function(){r=!0}),setTimeout(function(){r||i.triggerTransitionEnd(n)},t),this}var i={TRANSITION_END:"bsTransitionEnd",getUID:function(e){do{e+=~~(1e6*Math.random())}while(document.getElementById(e));return e},getSelectorFromElement:function(t){var n=t.getAttribute("data-target");n&&"#"!==n||(n=t.getAttribute("href")||"");try{var i=e(document).find(n);return i.length>0?n:null}catch(e){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var n=e(t).css("transition-duration"),i=parseFloat(n);return i?(n=n.split(",")[0],1e3*parseFloat(n)):0},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(n){e(n).trigger(t)},supportsTransitionEnd:function(){return Boolean(t)},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,n){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var s=n[r],a=t[r],o=a&&i.isElement(a)?"element":(l=a,{}.toString.call(l).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(s).test(o))throw new Error(e.toUpperCase()+': Option "'+r+'" provided type "'+o+'" but expected type "'+s+'".')}var l}};return e.fn.emulateTransitionEnd=n,e.event.special[i.TRANSITION_END]={bindType:t,delegateType:t,handle:function(t){if(e(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}},i}(t),l=function(e){var t=e.fn.alert,n={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},i={ALERT:"alert",FADE:"fade",SHOW:"show"},s=function(){function t(e){this._element=e}var s=t.prototype;return s.close=function(e){e=e||this._element;var t=this._getRootElement(e),n=this._triggerCloseEvent(t);n.isDefaultPrevented()||this._removeElement(t)},s.dispose=function(){e.removeData(this._element,"bs.alert"),this._element=null},s._getRootElement=function(t){var n=o.getSelectorFromElement(t),r=!1;return n&&(r=e(n)[0]),r||(r=e(t).closest("."+i.ALERT)[0]),r},s._triggerCloseEvent=function(t){var i=e.Event(n.CLOSE);return e(t).trigger(i),i},s._removeElement=function(t){var n=this;if(e(t).removeClass(i.SHOW),e(t).hasClass(i.FADE)){var r=o.getTransitionDurationFromElement(t);e(t).one(o.TRANSITION_END,function(e){return n._destroyElement(t,e)}).emulateTransitionEnd(r)}else this._destroyElement(t)},s._destroyElement=function(t){e(t).detach().trigger(n.CLOSED).remove()},t._jQueryInterface=function(n){return this.each(function(){var i=e(this),r=i.data("bs.alert");r||(r=new t(this),i.data("bs.alert",r)),"close"===n&&r[n](this)})},t._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},r(t,null,[{key:"VERSION",get:function(){return"4.1.0"}}]),t}();return e(document).on(n.CLICK_DATA_API,'[data-dismiss="alert"]',s._handleDismiss(new s)),e.fn.alert=s._jQueryInterface,e.fn.alert.Constructor=s,e.fn.alert.noConflict=function(){return e.fn.alert=t,s._jQueryInterface},s}(t),c=function(e){var t="button",n=e.fn[t],i={ACTIVE:"active",BUTTON:"btn",FOCUS:"focus"},s={DATA_TOGGLE_CARROT:'[data-toggle^="button"]',DATA_TOGGLE:'[data-toggle="buttons"]',INPUT:"input",ACTIVE:".active",BUTTON:".btn"},a={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api"},o=function(){function t(e){this._element=e}var n=t.prototype;return n.toggle=function(){var t=!0,n=!0,r=e(this._element).closest(s.DATA_TOGGLE)[0];if(r){var a=e(this._element).find(s.INPUT)[0];if(a){if("radio"===a.type)if(a.checked&&e(this._element).hasClass(i.ACTIVE))t=!1;else{var o=e(r).find(s.ACTIVE)[0];o&&e(o).removeClass(i.ACTIVE)}if(t){if(a.hasAttribute("disabled")||r.hasAttribute("disabled")||a.classList.contains("disabled")||r.classList.contains("disabled"))return;a.checked=!e(this._element).hasClass(i.ACTIVE),e(a).trigger("change")}a.focus(),n=!1}}n&&this._element.setAttribute("aria-pressed",!e(this._element).hasClass(i.ACTIVE)),t&&e(this._element).toggleClass(i.ACTIVE)},n.dispose=function(){e.removeData(this._element,"bs.button"),this._element=null},t._jQueryInterface=function(n){return this.each(function(){var i=e(this).data("bs.button");i||(i=new t(this),e(this).data("bs.button",i)),"toggle"===n&&i[n]()})},r(t,null,[{key:"VERSION",get:function(){return"4.1.0"}}]),t}();return e(document).on(a.CLICK_DATA_API,s.DATA_TOGGLE_CARROT,function(t){t.preventDefault();var n=t.target;e(n).hasClass(i.BUTTON)||(n=e(n).closest(s.BUTTON)),o._jQueryInterface.call(e(n),"toggle")}).on(a.FOCUS_BLUR_DATA_API,s.DATA_TOGGLE_CARROT,function(t){var n=e(t.target).closest(s.BUTTON)[0];e(n).toggleClass(i.FOCUS,/^focus(in)?$/.test(t.type))}),e.fn[t]=o._jQueryInterface,e.fn[t].Constructor=o,e.fn[t].noConflict=function(){return e.fn[t]=n,o._jQueryInterface},o}(t),d=function(e){var t="carousel",n="bs.carousel",i="."+n,s=e.fn[t],l={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},c={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},d={NEXT:"next",PREV:"prev",LEFT:"left",RIGHT:"right"},u={SLIDE:"slide"+i,SLID:"slid"+i,KEYDOWN:"keydown"+i,MOUSEENTER:"mouseenter"+i,MOUSELEAVE:"mouseleave"+i,TOUCHEND:"touchend"+i,LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},p={CAROUSEL:"carousel",ACTIVE:"active",SLIDE:"slide",RIGHT:"carousel-item-right",LEFT:"carousel-item-left",NEXT:"carousel-item-next",PREV:"carousel-item-prev",ITEM:"carousel-item"},f={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},h=function(){function s(t,n){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(n),this._element=e(t)[0],this._indicatorsElement=e(this._element).find(f.INDICATORS)[0],this._addEventListeners()}var h=s.prototype;return h.next=function(){this._isSliding||this._slide(d.NEXT)},h.nextWhenVisible=function(){!document.hidden&&e(this._element).is(":visible")&&"hidden"!==e(this._element).css("visibility")&&this.next()},h.prev=function(){this._isSliding||this._slide(d.PREV)},h.pause=function(t){t||(this._isPaused=!0),e(this._element).find(f.NEXT_PREV)[0]&&(o.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},h.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},h.to=function(t){var n=this;this._activeElement=e(this._element).find(f.ACTIVE_ITEM)[0];var i=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)e(this._element).one(u.SLID,function(){return n.to(t)});else{if(i===t)return this.pause(),void this.cycle();var r=t>i?d.NEXT:d.PREV;this._slide(r,this._items[t])}},h.dispose=function(){e(this._element).off(i),e.removeData(this._element,n),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},h._getConfig=function(e){return e=a({},l,e),o.typeCheckConfig(t,e,c),e},h._addEventListeners=function(){var t=this;this._config.keyboard&&e(this._element).on(u.KEYDOWN,function(e){return t._keydown(e)}),"hover"===this._config.pause&&(e(this._element).on(u.MOUSEENTER,function(e){return t.pause(e)}).on(u.MOUSELEAVE,function(e){return t.cycle(e)}),"ontouchstart"in document.documentElement&&e(this._element).on(u.TOUCHEND,function(){t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout(function(e){return t.cycle(e)},500+t._config.interval)}))},h._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next()}},h._getItemIndex=function(t){return this._items=e.makeArray(e(t).parent().find(f.ITEM)),this._items.indexOf(t)},h._getItemByDirection=function(e,t){var n=e===d.NEXT,i=e===d.PREV,r=this._getItemIndex(t),s=this._items.length-1,a=i&&0===r||n&&r===s;if(a&&!this._config.wrap)return t;var o=e===d.PREV?-1:1,l=(r+o)%this._items.length;return-1===l?this._items[this._items.length-1]:this._items[l]},h._triggerSlideEvent=function(t,n){var i=this._getItemIndex(t),r=this._getItemIndex(e(this._element).find(f.ACTIVE_ITEM)[0]),s=e.Event(u.SLIDE,{relatedTarget:t,direction:n,from:r,to:i});return e(this._element).trigger(s),s},h._setActiveIndicatorElement=function(t){if(this._indicatorsElement){e(this._indicatorsElement).find(f.ACTIVE).removeClass(p.ACTIVE);var n=this._indicatorsElement.children[this._getItemIndex(t)];n&&e(n).addClass(p.ACTIVE)}},h._slide=function(t,n){var i,r,s,a=this,l=e(this._element).find(f.ACTIVE_ITEM)[0],c=this._getItemIndex(l),h=n||l&&this._getItemByDirection(t,l),m=this._getItemIndex(h),g=Boolean(this._interval);if(t===d.NEXT?(i=p.LEFT,r=p.NEXT,s=d.LEFT):(i=p.RIGHT,r=p.PREV,s=d.RIGHT),h&&e(h).hasClass(p.ACTIVE))this._isSliding=!1;else{var v=this._triggerSlideEvent(h,s);if(!v.isDefaultPrevented()&&l&&h){this._isSliding=!0,g&&this.pause(),this._setActiveIndicatorElement(h);var y=e.Event(u.SLID,{relatedTarget:h,direction:s,from:c,to:m});if(e(this._element).hasClass(p.SLIDE)){e(h).addClass(r),o.reflow(h),e(l).addClass(i),e(h).addClass(i);var b=o.getTransitionDurationFromElement(l);e(l).one(o.TRANSITION_END,function(){e(h).removeClass(i+" "+r).addClass(p.ACTIVE),e(l).removeClass(p.ACTIVE+" "+r+" "+i),a._isSliding=!1,setTimeout(function(){return e(a._element).trigger(y)},0)}).emulateTransitionEnd(b)}else e(l).removeClass(p.ACTIVE),e(h).addClass(p.ACTIVE),this._isSliding=!1,e(this._element).trigger(y);g&&this.cycle()}}},s._jQueryInterface=function(t){return this.each(function(){var i=e(this).data(n),r=a({},l,e(this).data());"object"==typeof t&&(r=a({},r,t));var o="string"==typeof t?t:r.slide;if(i||(i=new s(this,r),e(this).data(n,i)),"number"==typeof t)i.to(t);else if("string"==typeof o){if(void 0===i[o])throw new TypeError('No method named "'+o+'"');i[o]()}else r.interval&&(i.pause(),i.cycle())})},s._dataApiClickHandler=function(t){var i=o.getSelectorFromElement(this);if(i){var r=e(i)[0];if(r&&e(r).hasClass(p.CAROUSEL)){var l=a({},e(r).data(),e(this).data()),c=this.getAttribute("data-slide-to");c&&(l.interval=!1),s._jQueryInterface.call(e(r),l),c&&e(r).data(n).to(c),t.preventDefault()}}},r(s,null,[{key:"VERSION",get:function(){return"4.1.0"}},{key:"Default",get:function(){return l}}]),s}();return e(document).on(u.CLICK_DATA_API,f.DATA_SLIDE,h._dataApiClickHandler),e(window).on(u.LOAD_DATA_API,function(){e(f.DATA_RIDE).each(function(){var t=e(this);h._jQueryInterface.call(t,t.data())})}),e.fn[t]=h._jQueryInterface,e.fn[t].Constructor=h,e.fn[t].noConflict=function(){return e.fn[t]=s,h._jQueryInterface},h}(t),u=function(e){var t="collapse",n="bs.collapse",i=e.fn[t],s={toggle:!0,parent:""},l={toggle:"boolean",parent:"(string|element)"},c={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},d={SHOW:"show",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"},u={WIDTH:"width",HEIGHT:"height"},p={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},f=function(){function i(t,n){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(n),this._triggerArray=e.makeArray(e('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var i=e(p.DATA_TOGGLE),r=0;r<i.length;r++){var s=i[r],a=o.getSelectorFromElement(s);null!==a&&e(a).filter(t).length>0&&(this._selector=a,this._triggerArray.push(s))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var f=i.prototype;return f.toggle=function(){e(this._element).hasClass(d.SHOW)?this.hide():this.show()},f.show=function(){var t,r,s=this;if(!(this._isTransitioning||e(this._element).hasClass(d.SHOW)||(this._parent&&0===(t=e.makeArray(e(this._parent).find(p.ACTIVES).filter('[data-parent="'+this._config.parent+'"]'))).length&&(t=null),t&&(r=e(t).not(this._selector).data(n))&&r._isTransitioning))){var a=e.Event(c.SHOW);if(e(this._element).trigger(a),!a.isDefaultPrevented()){t&&(i._jQueryInterface.call(e(t).not(this._selector),"hide"),r||e(t).data(n,null));var l=this._getDimension();e(this._element).removeClass(d.COLLAPSE).addClass(d.COLLAPSING),this._element.style[l]=0,this._triggerArray.length>0&&e(this._triggerArray).removeClass(d.COLLAPSED).attr("aria-expanded",!0),this.setTransitioning(!0);var u=l[0].toUpperCase()+l.slice(1),f="scroll"+u,h=o.getTransitionDurationFromElement(this._element);e(this._element).one(o.TRANSITION_END,function(){e(s._element).removeClass(d.COLLAPSING).addClass(d.COLLAPSE).addClass(d.SHOW),s._element.style[l]="",s.setTransitioning(!1),e(s._element).trigger(c.SHOWN)}).emulateTransitionEnd(h),this._element.style[l]=this._element[f]+"px"}}},f.hide=function(){var t=this;if(!this._isTransitioning&&e(this._element).hasClass(d.SHOW)){var n=e.Event(c.HIDE);if(e(this._element).trigger(n),!n.isDefaultPrevented()){var i=this._getDimension();if(this._element.style[i]=this._element.getBoundingClientRect()[i]+"px",o.reflow(this._element),e(this._element).addClass(d.COLLAPSING).removeClass(d.COLLAPSE).removeClass(d.SHOW),this._triggerArray.length>0)for(var r=0;r<this._triggerArray.length;r++){var s=this._triggerArray[r],a=o.getSelectorFromElement(s);if(null!==a){var l=e(a);l.hasClass(d.SHOW)||e(s).addClass(d.COLLAPSED).attr("aria-expanded",!1)}}this.setTransitioning(!0),this._element.style[i]="";var u=o.getTransitionDurationFromElement(this._element);e(this._element).one(o.TRANSITION_END,function(){t.setTransitioning(!1),e(t._element).removeClass(d.COLLAPSING).addClass(d.COLLAPSE).trigger(c.HIDDEN)}).emulateTransitionEnd(u)}}},f.setTransitioning=function(e){this._isTransitioning=e},f.dispose=function(){e.removeData(this._element,n),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},f._getConfig=function(e){return(e=a({},s,e)).toggle=Boolean(e.toggle),o.typeCheckConfig(t,e,l),e},f._getDimension=function(){var t=e(this._element).hasClass(u.WIDTH);return t?u.WIDTH:u.HEIGHT},f._getParent=function(){var t=this,n=null;o.isElement(this._config.parent)?(n=this._config.parent,void 0!==this._config.parent.jquery&&(n=this._config.parent[0])):n=e(this._config.parent)[0];var r='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return e(n).find(r).each(function(e,n){t._addAriaAndCollapsedClass(i._getTargetFromElement(n),[n])}),n},f._addAriaAndCollapsedClass=function(t,n){if(t){var i=e(t).hasClass(d.SHOW);n.length>0&&e(n).toggleClass(d.COLLAPSED,!i).attr("aria-expanded",i)}},i._getTargetFromElement=function(t){var n=o.getSelectorFromElement(t);return n?e(n)[0]:null},i._jQueryInterface=function(t){return this.each(function(){var r=e(this),o=r.data(n),l=a({},s,r.data(),"object"==typeof t&&t);if(!o&&l.toggle&&/show|hide/.test(t)&&(l.toggle=!1),o||(o=new i(this,l),r.data(n,o)),"string"==typeof t){if(void 0===o[t])throw new TypeError('No method named "'+t+'"');o[t]()}})},r(i,null,[{key:"VERSION",get:function(){return"4.1.0"}},{key:"Default",get:function(){return s}}]),i}();return e(document).on(c.CLICK_DATA_API,p.DATA_TOGGLE,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var i=e(this),r=o.getSelectorFromElement(this);e(r).each(function(){var t=e(this),r=t.data(n),s=r?"toggle":i.data();f._jQueryInterface.call(t,s)})}),e.fn[t]=f._jQueryInterface,e.fn[t].Constructor=f,e.fn[t].noConflict=function(){return e.fn[t]=i,f._jQueryInterface},f}(t),p=function(e){var t="dropdown",i="bs.dropdown",s="."+i,l=e.fn[t],c=new RegExp("38|40|27"),d={HIDE:"hide"+s,HIDDEN:"hidden"+s,SHOW:"show"+s,SHOWN:"shown"+s,CLICK:"click"+s,CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},u={DISABLED:"disabled",SHOW:"show",DROPUP:"dropup",DROPRIGHT:"dropright",DROPLEFT:"dropleft",MENURIGHT:"dropdown-menu-right",MENULEFT:"dropdown-menu-left",POSITION_STATIC:"position-static"},p={DATA_TOGGLE:'[data-toggle="dropdown"]',FORM_CHILD:".dropdown form",MENU:".dropdown-menu",NAVBAR_NAV:".navbar-nav",VISIBLE_ITEMS:".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)"},f={TOP:"top-start",TOPEND:"top-end",BOTTOM:"bottom-start",BOTTOMEND:"bottom-end",RIGHT:"right-start",RIGHTEND:"right-end",LEFT:"left-start",LEFTEND:"left-end"},h={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},m={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},g=function(){function l(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var g=l.prototype;return g.toggle=function(){if(!this._element.disabled&&!e(this._element).hasClass(u.DISABLED)){var t=l._getParentFromElement(this._element),i=e(this._menu).hasClass(u.SHOW);if(l._clearMenus(),!i){var r={relatedTarget:this._element},s=e.Event(d.SHOW,r);if(e(t).trigger(s),!s.isDefaultPrevented()){if(!this._inNavbar){if(void 0===n)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var a=this._element;"parent"===this._config.reference?a=t:o.isElement(this._config.reference)&&(a=this._config.reference,void 0!==this._config.reference.jquery&&(a=this._config.reference[0])),"scrollParent"!==this._config.boundary&&e(t).addClass(u.POSITION_STATIC),this._popper=new n(a,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===e(t).closest(p.NAVBAR_NAV).length&&e(document.body).children().on("mouseover",null,e.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),e(this._menu).toggleClass(u.SHOW),e(t).toggleClass(u.SHOW).trigger(e.Event(d.SHOWN,r))}}}},g.dispose=function(){e.removeData(this._element,i),e(this._element).off(s),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},g.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},g._addEventListeners=function(){var t=this;e(this._element).on(d.CLICK,function(e){e.preventDefault(),e.stopPropagation(),t.toggle()})},g._getConfig=function(n){return n=a({},this.constructor.Default,e(this._element).data(),n),o.typeCheckConfig(t,n,this.constructor.DefaultType),n},g._getMenuElement=function(){if(!this._menu){var t=l._getParentFromElement(this._element);this._menu=e(t).find(p.MENU)[0]}return this._menu},g._getPlacement=function(){var t=e(this._element).parent(),n=f.BOTTOM;return t.hasClass(u.DROPUP)?(n=f.TOP,e(this._menu).hasClass(u.MENURIGHT)&&(n=f.TOPEND)):t.hasClass(u.DROPRIGHT)?n=f.RIGHT:t.hasClass(u.DROPLEFT)?n=f.LEFT:e(this._menu).hasClass(u.MENURIGHT)&&(n=f.BOTTOMEND),n},g._detectNavbar=function(){return e(this._element).closest(".navbar").length>0},g._getPopperConfig=function(){var e=this,t={};"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=a({},t.offsets,e._config.offset(t.offsets)||{}),t}:t.offset=this._config.offset;var n={placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(n.modifiers.applyStyle={enabled:!1}),n},l._jQueryInterface=function(t){return this.each(function(){var n=e(this).data(i),r="object"==typeof t?t:null;if(n||(n=new l(this,r),e(this).data(i,n)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},l._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var n=e.makeArray(e(p.DATA_TOGGLE)),r=0;r<n.length;r++){var s=l._getParentFromElement(n[r]),a=e(n[r]).data(i),o={relatedTarget:n[r]};if(a){var c=a._menu;if(e(s).hasClass(u.SHOW)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&e.contains(s,t.target))){var f=e.Event(d.HIDE,o);e(s).trigger(f),f.isDefaultPrevented()||("ontouchstart"in document.documentElement&&e(document.body).children().off("mouseover",null,e.noop),n[r].setAttribute("aria-expanded","false"),e(c).removeClass(u.SHOW),e(s).removeClass(u.SHOW).trigger(e.Event(d.HIDDEN,o)))}}}},l._getParentFromElement=function(t){var n,i=o.getSelectorFromElement(t);return i&&(n=e(i)[0]),n||t.parentNode},l._dataApiKeydownHandler=function(t){if((/input|textarea/i.test(t.target.tagName)?!(32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||e(t.target).closest(p.MENU).length)):c.test(t.which))&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!e(this).hasClass(u.DISABLED))){var n=l._getParentFromElement(this),i=e(n).hasClass(u.SHOW);if((i||27===t.which&&32===t.which)&&(!i||27!==t.which&&32!==t.which)){var r=e(n).find(p.VISIBLE_ITEMS).get();if(0!==r.length){var s=r.indexOf(t.target);38===t.which&&s>0&&s--,40===t.which&&s<r.length-1&&s++,s<0&&(s=0),r[s].focus()}}else{if(27===t.which){var a=e(n).find(p.DATA_TOGGLE)[0];e(a).trigger("focus")}e(this).trigger("click")}}},r(l,null,[{key:"VERSION",get:function(){return"4.1.0"}},{key:"Default",get:function(){return h}},{key:"DefaultType",get:function(){return m}}]),l}();return e(document).on(d.KEYDOWN_DATA_API,p.DATA_TOGGLE,g._dataApiKeydownHandler).on(d.KEYDOWN_DATA_API,p.MENU,g._dataApiKeydownHandler).on(d.CLICK_DATA_API+" "+d.KEYUP_DATA_API,g._clearMenus).on(d.CLICK_DATA_API,p.DATA_TOGGLE,function(t){t.preventDefault(),t.stopPropagation(),g._jQueryInterface.call(e(this),"toggle")}).on(d.CLICK_DATA_API,p.FORM_CHILD,function(e){e.stopPropagation()}),e.fn[t]=g._jQueryInterface,e.fn[t].Constructor=g,e.fn[t].noConflict=function(){return e.fn[t]=l,g._jQueryInterface},g}(t),f=function(e){var t="modal",n=".bs.modal",i=e.fn.modal,s={backdrop:!0,keyboard:!0,focus:!0,show:!0},l={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},c={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},d={SCROLLBAR_MEASURER:"modal-scrollbar-measure",BACKDROP:"modal-backdrop",OPEN:"modal-open",FADE:"fade",SHOW:"show"},u={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top",NAVBAR_TOGGLER:".navbar-toggler"},p=function(){function i(t,n){this._config=this._getConfig(n),this._element=t,this._dialog=e(t).find(u.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._scrollbarWidth=0}var p=i.prototype;return p.toggle=function(e){return this._isShown?this.hide():this.show(e)},p.show=function(t){var n=this;if(!this._isTransitioning&&!this._isShown){e(this._element).hasClass(d.FADE)&&(this._isTransitioning=!0);var i=e.Event(c.SHOW,{relatedTarget:t});e(this._element).trigger(i),this._isShown||i.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),e(document.body).addClass(d.OPEN),this._setEscapeEvent(),this._setResizeEvent(),e(this._element).on(c.CLICK_DISMISS,u.DATA_DISMISS,function(e){return n.hide(e)}),e(this._dialog).on(c.MOUSEDOWN_DISMISS,function(){e(n._element).one(c.MOUSEUP_DISMISS,function(t){e(t.target).is(n._element)&&(n._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return n._showElement(t)}))}},p.hide=function(t){var n=this;if(t&&t.preventDefault(),!this._isTransitioning&&this._isShown){var i=e.Event(c.HIDE);if(e(this._element).trigger(i),this._isShown&&!i.isDefaultPrevented()){this._isShown=!1;var r=e(this._element).hasClass(d.FADE);if(r&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),e(document).off(c.FOCUSIN),e(this._element).removeClass(d.SHOW),e(this._element).off(c.CLICK_DISMISS),e(this._dialog).off(c.MOUSEDOWN_DISMISS),r){var s=o.getTransitionDurationFromElement(this._element);e(this._element).one(o.TRANSITION_END,function(e){return n._hideModal(e)}).emulateTransitionEnd(s)}else this._hideModal()}}},p.dispose=function(){e.removeData(this._element,"bs.modal"),e(window,document,this._element,this._backdrop).off(n),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},p.handleUpdate=function(){this._adjustDialog()},p._getConfig=function(e){return e=a({},s,e),o.typeCheckConfig(t,e,l),e},p._showElement=function(t){var n=this,i=e(this._element).hasClass(d.FADE);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,i&&o.reflow(this._element),e(this._element).addClass(d.SHOW),this._config.focus&&this._enforceFocus();var r=e.Event(c.SHOWN,{relatedTarget:t}),s=function(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,e(n._element).trigger(r)};if(i){var a=o.getTransitionDurationFromElement(this._element);e(this._dialog).one(o.TRANSITION_END,s).emulateTransitionEnd(a)}else s()},p._enforceFocus=function(){var t=this;e(document).off(c.FOCUSIN).on(c.FOCUSIN,function(n){document!==n.target&&t._element!==n.target&&0===e(t._element).has(n.target).length&&t._element.focus()})},p._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?e(this._element).on(c.KEYDOWN_DISMISS,function(e){27===e.which&&(e.preventDefault(),t.hide())}):this._isShown||e(this._element).off(c.KEYDOWN_DISMISS)},p._setResizeEvent=function(){var t=this;this._isShown?e(window).on(c.RESIZE,function(e){return t.handleUpdate(e)}):e(window).off(c.RESIZE)},p._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){e(document.body).removeClass(d.OPEN),t._resetAdjustments(),t._resetScrollbar(),e(t._element).trigger(c.HIDDEN)})},p._removeBackdrop=function(){this._backdrop&&(e(this._backdrop).remove(),this._backdrop=null)},p._showBackdrop=function(t){var n=this,i=e(this._element).hasClass(d.FADE)?d.FADE:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=d.BACKDROP,i&&e(this._backdrop).addClass(i),e(this._backdrop).appendTo(document.body),e(this._element).on(c.CLICK_DISMISS,function(e){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:e.target===e.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())}),i&&o.reflow(this._backdrop),e(this._backdrop).addClass(d.SHOW),!t)return;if(!i)return void t();var r=o.getTransitionDurationFromElement(this._backdrop);e(this._backdrop).one(o.TRANSITION_END,t).emulateTransitionEnd(r)}else if(!this._isShown&&this._backdrop){e(this._backdrop).removeClass(d.SHOW);var s=function(){n._removeBackdrop(),t&&t()};if(e(this._element).hasClass(d.FADE)){var a=o.getTransitionDurationFromElement(this._backdrop);e(this._backdrop).one(o.TRANSITION_END,s).emulateTransitionEnd(a)}else s()}else t&&t()},p._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},p._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},p._checkScrollbar=function(){var e=document.body.getBoundingClientRect();this._isBodyOverflowing=e.left+e.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},p._setScrollbar=function(){var t=this;if(this._isBodyOverflowing){e(u.FIXED_CONTENT).each(function(n,i){var r=e(i)[0].style.paddingRight,s=e(i).css("padding-right");e(i).data("padding-right",r).css("padding-right",parseFloat(s)+t._scrollbarWidth+"px")}),e(u.STICKY_CONTENT).each(function(n,i){var r=e(i)[0].style.marginRight,s=e(i).css("margin-right");e(i).data("margin-right",r).css("margin-right",parseFloat(s)-t._scrollbarWidth+"px")}),e(u.NAVBAR_TOGGLER).each(function(n,i){var r=e(i)[0].style.marginRight,s=e(i).css("margin-right");e(i).data("margin-right",r).css("margin-right",parseFloat(s)+t._scrollbarWidth+"px")});var n=document.body.style.paddingRight,i=e(document.body).css("padding-right");e(document.body).data("padding-right",n).css("padding-right",parseFloat(i)+this._scrollbarWidth+"px")}},p._resetScrollbar=function(){e(u.FIXED_CONTENT).each(function(t,n){var i=e(n).data("padding-right");void 0!==i&&e(n).css("padding-right",i).removeData("padding-right")}),e(u.STICKY_CONTENT+", "+u.NAVBAR_TOGGLER).each(function(t,n){var i=e(n).data("margin-right");void 0!==i&&e(n).css("margin-right",i).removeData("margin-right")});var t=e(document.body).data("padding-right");void 0!==t&&e(document.body).css("padding-right",t).removeData("padding-right")},p._getScrollbarWidth=function(){var e=document.createElement("div");e.className=d.SCROLLBAR_MEASURER,document.body.appendChild(e);var t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t},i._jQueryInterface=function(t,n){return this.each(function(){var r=e(this).data("bs.modal"),s=a({},i.Default,e(this).data(),"object"==typeof t&&t);if(r||(r=new i(this,s),e(this).data("bs.modal",r)),"string"==typeof t){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t](n)}else s.show&&r.show(n)})},r(i,null,[{key:"VERSION",get:function(){return"4.1.0"}},{key:"Default",get:function(){return s}}]),i}();return e(document).on(c.CLICK_DATA_API,u.DATA_TOGGLE,function(t){var n,i=this,r=o.getSelectorFromElement(this);r&&(n=e(r)[0]);var s=e(n).data("bs.modal")?"toggle":a({},e(n).data(),e(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var l=e(n).one(c.SHOW,function(t){t.isDefaultPrevented()||l.one(c.HIDDEN,function(){e(i).is(":visible")&&i.focus()})});p._jQueryInterface.call(e(n),s,this)}),e.fn.modal=p._jQueryInterface,e.fn.modal.Constructor=p,e.fn.modal.noConflict=function(){return e.fn.modal=i,p._jQueryInterface},p}(t),h=function(e){var t="tooltip",i=".bs.tooltip",s=e.fn[t],l=new RegExp("(^|\\s)bs-tooltip\\S+","g"),c={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"},d={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},u={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},p={SHOW:"show",OUT:"out"},f={HIDE:"hide"+i,HIDDEN:"hidden"+i,SHOW:"show"+i,SHOWN:"shown"+i,INSERTED:"inserted"+i,CLICK:"click"+i,FOCUSIN:"focusin"+i,FOCUSOUT:"focusout"+i,MOUSEENTER:"mouseenter"+i,MOUSELEAVE:"mouseleave"+i},h={FADE:"fade",SHOW:"show"},m={TOOLTIP:".tooltip",TOOLTIP_INNER:".tooltip-inner",ARROW:".arrow"},g={HOVER:"hover",FOCUS:"focus",CLICK:"click",MANUAL:"manual"},v=function(){function s(e,t){if(void 0===n)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=e,this.config=this._getConfig(t),this.tip=null,this._setListeners()}var v=s.prototype;return v.enable=function(){this._isEnabled=!0},v.disable=function(){this._isEnabled=!1},v.toggleEnabled=function(){this._isEnabled=!this._isEnabled},v.toggle=function(t){if(this._isEnabled)if(t){var n=this.constructor.DATA_KEY,i=e(t.currentTarget).data(n);i||(i=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(n,i)),i._activeTrigger.click=!i._activeTrigger.click,i._isWithActiveTrigger()?i._enter(null,i):i._leave(null,i)}else{if(e(this.getTipElement()).hasClass(h.SHOW))return void this._leave(null,this);this._enter(null,this)}},v.dispose=function(){clearTimeout(this._timeout),e.removeData(this.element,this.constructor.DATA_KEY),e(this.element).off(this.constructor.EVENT_KEY),e(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&e(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},v.show=function(){var t=this;if("none"===e(this.element).css("display"))throw new Error("Please use show on visible elements");var i=e.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){e(this.element).trigger(i);var r=e.contains(this.element.ownerDocument.documentElement,this.element);if(i.isDefaultPrevented()||!r)return;var s=this.getTipElement(),a=o.getUID(this.constructor.NAME);s.setAttribute("id",a),this.element.setAttribute("aria-describedby",a),this.setContent(),this.config.animation&&e(s).addClass(h.FADE);var l="function"==typeof this.config.placement?this.config.placement.call(this,s,this.element):this.config.placement,c=this._getAttachment(l);this.addAttachmentClass(c);var d=!1===this.config.container?document.body:e(this.config.container);e(s).data(this.constructor.DATA_KEY,this),e.contains(this.element.ownerDocument.documentElement,this.tip)||e(s).appendTo(d),e(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new n(this.element,s,{placement:c,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:m.ARROW},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){t._handlePopperPlacementChange(e)}}),e(s).addClass(h.SHOW),"ontouchstart"in document.documentElement&&e(document.body).children().on("mouseover",null,e.noop);var u=function(){t.config.animation&&t._fixTransition();var n=t._hoverState;t._hoverState=null,e(t.element).trigger(t.constructor.Event.SHOWN),n===p.OUT&&t._leave(null,t)};if(e(this.tip).hasClass(h.FADE)){var f=o.getTransitionDurationFromElement(this.tip);e(this.tip).one(o.TRANSITION_END,u).emulateTransitionEnd(f)}else u()}},v.hide=function(t){var n=this,i=this.getTipElement(),r=e.Event(this.constructor.Event.HIDE),s=function(){n._hoverState!==p.SHOW&&i.parentNode&&i.parentNode.removeChild(i),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),e(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),t&&t()};if(e(this.element).trigger(r),!r.isDefaultPrevented()){if(e(i).removeClass(h.SHOW),"ontouchstart"in document.documentElement&&e(document.body).children().off("mouseover",null,e.noop),this._activeTrigger[g.CLICK]=!1,this._activeTrigger[g.FOCUS]=!1,this._activeTrigger[g.HOVER]=!1,e(this.tip).hasClass(h.FADE)){var a=o.getTransitionDurationFromElement(i);e(i).one(o.TRANSITION_END,s).emulateTransitionEnd(a)}else s();this._hoverState=""}},v.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},v.isWithContent=function(){return Boolean(this.getTitle())},v.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-tooltip-"+t)},v.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},v.setContent=function(){var t=e(this.getTipElement());this.setElementContent(t.find(m.TOOLTIP_INNER),this.getTitle()),t.removeClass(h.FADE+" "+h.SHOW)},v.setElementContent=function(t,n){var i=this.config.html;"object"==typeof n&&(n.nodeType||n.jquery)?i?e(n).parent().is(t)||t.empty().append(n):t.text(e(n).text()):t[i?"html":"text"](n)},v.getTitle=function(){var e=this.element.getAttribute("data-original-title");return e||(e="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),e},v._getAttachment=function(e){return d[e.toUpperCase()]},v._setListeners=function(){var t=this,n=this.config.trigger.split(" ");n.forEach(function(n){if("click"===n)e(t.element).on(t.constructor.Event.CLICK,t.config.selector,function(e){return t.toggle(e)});else if(n!==g.MANUAL){var i=n===g.HOVER?t.constructor.Event.MOUSEENTER:t.constructor.Event.FOCUSIN,r=n===g.HOVER?t.constructor.Event.MOUSELEAVE:t.constructor.Event.FOCUSOUT;e(t.element).on(i,t.config.selector,function(e){return t._enter(e)}).on(r,t.config.selector,function(e){return t._leave(e)})}e(t.element).closest(".modal").on("hide.bs.modal",function(){return t.hide()})}),this.config.selector?this.config=a({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},v._fixTitle=function(){var e=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==e)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},v._enter=function(t,n){var i=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(i))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(i,n)),t&&(n._activeTrigger["focusin"===t.type?g.FOCUS:g.HOVER]=!0),e(n.getTipElement()).hasClass(h.SHOW)||n._hoverState===p.SHOW?n._hoverState=p.SHOW:(clearTimeout(n._timeout),n._hoverState=p.SHOW,n.config.delay&&n.config.delay.show?n._timeout=setTimeout(function(){n._hoverState===p.SHOW&&n.show()},n.config.delay.show):n.show())},v._leave=function(t,n){var i=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(i))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(i,n)),t&&(n._activeTrigger["focusout"===t.type?g.FOCUS:g.HOVER]=!1),n._isWithActiveTrigger()||(clearTimeout(n._timeout),n._hoverState=p.OUT,n.config.delay&&n.config.delay.hide?n._timeout=setTimeout(function(){n._hoverState===p.OUT&&n.hide()},n.config.delay.hide):n.hide())},v._isWithActiveTrigger=function(){for(var e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1},v._getConfig=function(n){return"number"==typeof(n=a({},this.constructor.Default,e(this.element).data(),n)).delay&&(n.delay={show:n.delay,hide:n.delay}),"number"==typeof n.title&&(n.title=n.title.toString()),"number"==typeof n.content&&(n.content=n.content.toString()),o.typeCheckConfig(t,n,this.constructor.DefaultType),n},v._getDelegateConfig=function(){var e={};if(this.config)for(var t in this.config)this.constructor.Default[t]!==this.config[t]&&(e[t]=this.config[t]);return e},v._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(l);null!==n&&n.length>0&&t.removeClass(n.join(""))},v._handlePopperPlacementChange=function(e){this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(e.placement))},v._fixTransition=function(){var t=this.getTipElement(),n=this.config.animation;null===t.getAttribute("x-placement")&&(e(t).removeClass(h.FADE),this.config.animation=!1,this.hide(),this.show(),this.config.animation=n)},s._jQueryInterface=function(t){return this.each(function(){var n=e(this).data("bs.tooltip"),i="object"==typeof t&&t;if((n||!/dispose|hide/.test(t))&&(n||(n=new s(this,i),e(this).data("bs.tooltip",n)),"string"==typeof t)){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},r(s,null,[{key:"VERSION",get:function(){return"4.1.0"}},{key:"Default",get:function(){return u}},{key:"NAME",get:function(){return t}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return f}},{key:"EVENT_KEY",get:function(){return i}},{key:"DefaultType",get:function(){return c}}]),s}();return e.fn[t]=v._jQueryInterface,e.fn[t].Constructor=v,e.fn[t].noConflict=function(){return e.fn[t]=s,v._jQueryInterface},v}(t),m=function(e){var t="popover",n=".bs.popover",i=e.fn[t],s=new RegExp("(^|\\s)bs-popover\\S+","g"),o=a({},h.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),l=a({},h.DefaultType,{content:"(string|element|function)"}),c={FADE:"fade",SHOW:"show"},d={TITLE:".popover-header",CONTENT:".popover-body"},u={HIDE:"hide"+n,HIDDEN:"hidden"+n,SHOW:"show"+n,SHOWN:"shown"+n,INSERTED:"inserted"+n,CLICK:"click"+n,FOCUSIN:"focusin"+n,FOCUSOUT:"focusout"+n,MOUSEENTER:"mouseenter"+n,MOUSELEAVE:"mouseleave"+n},p=function(i){var a,p;function f(){return i.apply(this,arguments)||this}p=i,(a=f).prototype=Object.create(p.prototype),a.prototype.constructor=a,a.__proto__=p;var h=f.prototype;return h.isWithContent=function(){return this.getTitle()||this._getContent()},h.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-popover-"+t)},h.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},h.setContent=function(){var t=e(this.getTipElement());this.setElementContent(t.find(d.TITLE),this.getTitle());var n=this._getContent();"function"==typeof n&&(n=n.call(this.element)),this.setElementContent(t.find(d.CONTENT),n),t.removeClass(c.FADE+" "+c.SHOW)},h._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},h._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(s);null!==n&&n.length>0&&t.removeClass(n.join(""))},f._jQueryInterface=function(t){return this.each(function(){var n=e(this).data("bs.popover"),i="object"==typeof t?t:null;if((n||!/destroy|hide/.test(t))&&(n||(n=new f(this,i),e(this).data("bs.popover",n)),"string"==typeof t)){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},r(f,null,[{key:"VERSION",get:function(){return"4.1.0"}},{key:"Default",get:function(){return o}},{key:"NAME",get:function(){return t}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return u}},{key:"EVENT_KEY",get:function(){return n}},{key:"DefaultType",get:function(){return l}}]),f}(h);return e.fn[t]=p._jQueryInterface,e.fn[t].Constructor=p,e.fn[t].noConflict=function(){return e.fn[t]=i,p._jQueryInterface},p}(t),g=function(e){var t="scrollspy",n=e.fn[t],i={offset:10,method:"auto",target:""},s={offset:"number",method:"string",target:"(string|element)"},l={ACTIVATE:"activate.bs.scrollspy",SCROLL:"scroll.bs.scrollspy",LOAD_DATA_API:"load.bs.scrollspy.data-api"},c={DROPDOWN_ITEM:"dropdown-item",DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active"},d={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},u={OFFSET:"offset",POSITION:"position"},p=function(){function n(t,n){var i=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(n),this._selector=this._config.target+" "+d.NAV_LINKS+","+this._config.target+" "+d.LIST_ITEMS+","+this._config.target+" "+d.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,e(this._scrollElement).on(l.SCROLL,function(e){return i._process(e)}),this.refresh(),this._process()}var p=n.prototype;return p.refresh=function(){var t=this,n=this._scrollElement===this._scrollElement.window?u.OFFSET:u.POSITION,i="auto"===this._config.method?n:this._config.method,r=i===u.POSITION?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();var s=e.makeArray(e(this._selector));s.map(function(t){var n,s=o.getSelectorFromElement(t);if(s&&(n=e(s)[0]),n){var a=n.getBoundingClientRect();if(a.width||a.height)return[e(n)[i]().top+r,s]}return null}).filter(function(e){return e}).sort(function(e,t){return e[0]-t[0]}).forEach(function(e){t._offsets.push(e[0]),t._targets.push(e[1])})},p.dispose=function(){e.removeData(this._element,"bs.scrollspy"),e(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},p._getConfig=function(n){if("string"!=typeof(n=a({},i,n)).target){var r=e(n.target).attr("id");r||(r=o.getUID(t),e(n.target).attr("id",r)),n.target="#"+r}return o.typeCheckConfig(t,n,s),n},p._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},p._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},p._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},p._process=function(){var e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),n=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),e>=n){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}else{if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var r=this._offsets.length;r--;){var s=this._activeTarget!==this._targets[r]&&e>=this._offsets[r]&&(void 0===this._offsets[r+1]||e<this._offsets[r+1]);s&&this._activate(this._targets[r])}}},p._activate=function(t){this._activeTarget=t,this._clear();var n=this._selector.split(",");n=n.map(function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'});var i=e(n.join(","));i.hasClass(c.DROPDOWN_ITEM)?(i.closest(d.DROPDOWN).find(d.DROPDOWN_TOGGLE).addClass(c.ACTIVE),i.addClass(c.ACTIVE)):(i.addClass(c.ACTIVE),i.parents(d.NAV_LIST_GROUP).prev(d.NAV_LINKS+", "+d.LIST_ITEMS).addClass(c.ACTIVE),i.parents(d.NAV_LIST_GROUP).prev(d.NAV_ITEMS).children(d.NAV_LINKS).addClass(c.ACTIVE)),e(this._scrollElement).trigger(l.ACTIVATE,{relatedTarget:t})},p._clear=function(){e(this._selector).filter(d.ACTIVE).removeClass(c.ACTIVE)},n._jQueryInterface=function(t){return this.each(function(){var i=e(this).data("bs.scrollspy"),r="object"==typeof t&&t;if(i||(i=new n(this,r),e(this).data("bs.scrollspy",i)),"string"==typeof t){if(void 0===i[t])throw new TypeError('No method named "'+t+'"');i[t]()}})},r(n,null,[{key:"VERSION",get:function(){return"4.1.0"}},{key:"Default",get:function(){return i}}]),n}();return e(window).on(l.LOAD_DATA_API,function(){for(var t=e.makeArray(e(d.DATA_SPY)),n=t.length;n--;){var i=e(t[n]);p._jQueryInterface.call(i,i.data())}}),e.fn[t]=p._jQueryInterface,e.fn[t].Constructor=p,e.fn[t].noConflict=function(){return e.fn[t]=n,p._jQueryInterface},p}(t),v=function(e){var t=e.fn.tab,n={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},i={DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active",DISABLED:"disabled",FADE:"fade",SHOW:"show"},s={DROPDOWN:".dropdown",NAV_LIST_GROUP:".nav, .list-group",ACTIVE:".active",ACTIVE_UL:"> li > .active",DATA_TOGGLE:'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',DROPDOWN_TOGGLE:".dropdown-toggle",DROPDOWN_ACTIVE_CHILD:"> .dropdown-menu .active"},a=function(){function t(e){this._element=e}var a=t.prototype;return a.show=function(){var t=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&e(this._element).hasClass(i.ACTIVE)||e(this._element).hasClass(i.DISABLED))){var r,a,l=e(this._element).closest(s.NAV_LIST_GROUP)[0],c=o.getSelectorFromElement(this._element);if(l){var d="UL"===l.nodeName?s.ACTIVE_UL:s.ACTIVE;a=(a=e.makeArray(e(l).find(d)))[a.length-1]}var u=e.Event(n.HIDE,{relatedTarget:this._element}),p=e.Event(n.SHOW,{relatedTarget:a});if(a&&e(a).trigger(u),e(this._element).trigger(p),!p.isDefaultPrevented()&&!u.isDefaultPrevented()){c&&(r=e(c)[0]),this._activate(this._element,l);var f=function(){var i=e.Event(n.HIDDEN,{relatedTarget:t._element}),r=e.Event(n.SHOWN,{relatedTarget:a});e(a).trigger(i),e(t._element).trigger(r)};r?this._activate(r,r.parentNode,f):f()}}},a.dispose=function(){e.removeData(this._element,"bs.tab"),this._element=null},a._activate=function(t,n,r){var a=this,l=("UL"===n.nodeName?e(n).find(s.ACTIVE_UL):e(n).children(s.ACTIVE))[0],c=r&&l&&e(l).hasClass(i.FADE),d=function(){return a._transitionComplete(t,l,r)};if(l&&c){var u=o.getTransitionDurationFromElement(l);e(l).one(o.TRANSITION_END,d).emulateTransitionEnd(u)}else d()},a._transitionComplete=function(t,n,r){if(n){e(n).removeClass(i.SHOW+" "+i.ACTIVE);var a=e(n.parentNode).find(s.DROPDOWN_ACTIVE_CHILD)[0];a&&e(a).removeClass(i.ACTIVE),"tab"===n.getAttribute("role")&&n.setAttribute("aria-selected",!1)}if(e(t).addClass(i.ACTIVE),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),o.reflow(t),e(t).addClass(i.SHOW),t.parentNode&&e(t.parentNode).hasClass(i.DROPDOWN_MENU)){var l=e(t).closest(s.DROPDOWN)[0];l&&e(l).find(s.DROPDOWN_TOGGLE).addClass(i.ACTIVE),t.setAttribute("aria-expanded",!0)}r&&r()},t._jQueryInterface=function(n){return this.each(function(){var i=e(this),r=i.data("bs.tab");if(r||(r=new t(this),i.data("bs.tab",r)),"string"==typeof n){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n]()}})},r(t,null,[{key:"VERSION",get:function(){return"4.1.0"}}]),t}();return e(document).on(n.CLICK_DATA_API,s.DATA_TOGGLE,function(t){t.preventDefault(),a._jQueryInterface.call(e(this),"show")}),e.fn.tab=a._jQueryInterface,e.fn.tab.Constructor=a,e.fn.tab.noConflict=function(){return e.fn.tab=t,a._jQueryInterface},a}(t);(function(e){if(void 0===e)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=e.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||t[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")})(t),e.Util=o,e.Alert=l,e.Button=c,e.Carousel=d,e.Collapse=u,e.Dropdown=p,e.Modal=f,e.Popover=m,e.Scrollspy=g,e.Tab=v,e.Tooltip=h,Object.defineProperty(e,"__esModule",{value:!0})}(t,n(4),n(1))},function(e,t,n){var i;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(t,n){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,r){"use strict";var s=[],a=n.document,o=Object.getPrototypeOf,l=s.slice,c=s.concat,d=s.push,u=s.indexOf,p={},f=p.toString,h=p.hasOwnProperty,m=h.toString,g=m.call(Object),v={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},b=function(e){return null!=e&&e===e.window},w={type:!0,src:!0,noModule:!0};function E(e,t,n){var i,r=(t=t||a).createElement("script");if(r.text=e,n)for(i in w)n[i]&&(r[i]=n[i]);t.head.appendChild(r).parentNode.removeChild(r)}function T(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?p[f.call(e)]||"object":typeof e}var x=function(e,t){return new x.fn.init(e,t)},C=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function S(e){var t=!!e&&"length"in e&&e.length,n=T(e);return!y(e)&&!b(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}x.fn=x.prototype={jquery:"3.3.1",constructor:x,length:0,toArray:function(){return l.call(this)},get:function(e){return null==e?l.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return x.each(this,e)},map:function(e){return this.pushStack(x.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(l.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:d,sort:s.sort,splice:s.splice},x.extend=x.fn.extend=function(){var e,t,n,i,r,s,a=arguments[0]||{},o=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[o]||{},o++),"object"==typeof a||y(a)||(a={}),o===l&&(a=this,o--);o<l;o++)if(null!=(e=arguments[o]))for(t in e)n=a[t],a!==(i=e[t])&&(c&&i&&(x.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,s=n&&Array.isArray(n)?n:[]):s=n&&x.isPlainObject(n)?n:{},a[t]=x.extend(c,s,i)):void 0!==i&&(a[t]=i));return a},x.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==f.call(e))&&(!(t=o(e))||"function"==typeof(n=h.call(t,"constructor")&&t.constructor)&&m.call(n)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){E(e)},each:function(e,t){var n,i=0;if(S(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(C,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(S(Object(e))?x.merge(n,"string"==typeof e?[e]:e):d.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,s=e.length,a=!n;r<s;r++)!t(e[r],r)!==a&&i.push(e[r]);return i},map:function(e,t,n){var i,r,s=0,a=[];if(S(e))for(i=e.length;s<i;s++)null!=(r=t(e[s],s,n))&&a.push(r);else for(s in e)null!=(r=t(e[s],s,n))&&a.push(r);return c.apply([],a)},guid:1,support:v}),"function"==typeof Symbol&&(x.fn[Symbol.iterator]=s[Symbol.iterator]),x.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){p["[object "+t+"]"]=t.toLowerCase()});var _=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(e){var t,n,i,r,s,a,o,l,c,d,u,p,f,h,m,g,v,y,b,w="sizzle"+1*new Date,E=e.document,T=0,x=0,C=ae(),S=ae(),_=ae(),A=function(e,t){return e===t&&(u=!0),0},D={}.hasOwnProperty,O=[],k=O.pop,I=O.push,N=O.push,M=O.slice,L=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},$="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",P="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",z="\\["+P+"*("+H+")(?:"+P+"*([*^$|!~]?=)"+P+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+P+"*\\]",j=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+z+")*)|.*)\\)|)",R=new RegExp(P+"+","g"),W=new RegExp("^"+P+"+|((?:^|[^\\\\])(?:\\\\.)*)"+P+"+$","g"),B=new RegExp("^"+P+"*,"+P+"*"),F=new RegExp("^"+P+"*([>+~]|"+P+")"+P+"*"),V=new RegExp("="+P+"*([^\\]'\"]*?)"+P+"*\\]","g"),G=new RegExp(j),q=new RegExp("^"+H+"$"),X={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+z),PSEUDO:new RegExp("^"+j),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+P+"*(even|odd|(([+-]|)(\\d*)n|)"+P+"*(?:([+-]|)"+P+"*(\\d+)|))"+P+"*\\)|)","i"),bool:new RegExp("^(?:"+$+")$","i"),needsContext:new RegExp("^"+P+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+P+"*((?:-\\d)?\\d*)"+P+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,U=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+P+"?|("+P+")|.)","ig"),ee=function(e,t,n){var i="0x"+t-65536;return i!=i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){p()},re=ye(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{N.apply(O=M.call(E.childNodes),E.childNodes),O[E.childNodes.length].nodeType}catch(e){N={apply:O.length?function(e,t){I.apply(e,M.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function se(e,t,i,r){var s,o,c,d,u,h,v,y=t&&t.ownerDocument,T=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==T&&9!==T&&11!==T)return i;if(!r&&((t?t.ownerDocument||t:E)!==f&&p(t),t=t||f,m)){if(11!==T&&(u=Q.exec(e)))if(s=u[1]){if(9===T){if(!(c=t.getElementById(s)))return i;if(c.id===s)return i.push(c),i}else if(y&&(c=y.getElementById(s))&&b(t,c)&&c.id===s)return i.push(c),i}else{if(u[2])return N.apply(i,t.getElementsByTagName(e)),i;if((s=u[3])&&n.getElementsByClassName&&t.getElementsByClassName)return N.apply(i,t.getElementsByClassName(s)),i}if(n.qsa&&!_[e+" "]&&(!g||!g.test(e))){if(1!==T)y=t,v=e;else if("object"!==t.nodeName.toLowerCase()){for((d=t.getAttribute("id"))?d=d.replace(te,ne):t.setAttribute("id",d=w),o=(h=a(e)).length;o--;)h[o]="#"+d+" "+ve(h[o]);v=h.join(","),y=J.test(e)&&me(t.parentNode)||t}if(v)try{return N.apply(i,y.querySelectorAll(v)),i}catch(e){}finally{d===w&&t.removeAttribute("id")}}}return l(e.replace(W,"$1"),t,i,r)}function ae(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function oe(e){return e[w]=!0,e}function le(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function de(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function ue(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function fe(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&re(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return oe(function(t){return t=+t,oe(function(n,i){for(var r,s=e([],n.length,t),a=s.length;a--;)n[r=s[a]]&&(n[r]=!(i[r]=n[r]))})})}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},s=se.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},p=se.setDocument=function(e){var t,r,a=e?e.ownerDocument||e:E;return a!==f&&9===a.nodeType&&a.documentElement?(h=(f=a).documentElement,m=!s(f),E!==f&&(r=f.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ie,!1):r.attachEvent&&r.attachEvent("onunload",ie)),n.attributes=le(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=le(function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=K.test(f.getElementsByClassName),n.getById=le(function(e){return h.appendChild(e).id=w,!f.getElementsByName||!f.getElementsByName(w).length}),n.getById?(i.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,i,r,s=t.getElementById(e);if(s){if((n=s.getAttributeNode("id"))&&n.value===e)return[s];for(r=t.getElementsByName(e),i=0;s=r[i++];)if((n=s.getAttributeNode("id"))&&n.value===e)return[s]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,s=t.getElementsByTagName(e);if("*"===e){for(;n=s[r++];)1===n.nodeType&&i.push(n);return i}return s},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(n.qsa=K.test(f.querySelectorAll))&&(le(function(e){h.appendChild(e).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+P+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+P+"*(?:value|"+$+")"),e.querySelectorAll("[id~="+w+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+w+"+*").length||g.push(".#.+[+~]")}),le(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+P+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(n.matchesSelector=K.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&le(function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",j)}),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=K.test(h.compareDocumentPosition),b=t||K.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},A=t?function(e,t){if(e===t)return u=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e===f||e.ownerDocument===E&&b(E,e)?-1:t===f||t.ownerDocument===E&&b(E,t)?1:d?L(d,e)-L(d,t):0:4&i?-1:1)}:function(e,t){if(e===t)return u=!0,0;var n,i=0,r=e.parentNode,s=t.parentNode,a=[e],o=[t];if(!r||!s)return e===f?-1:t===f?1:r?-1:s?1:d?L(d,e)-L(d,t):0;if(r===s)return de(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)o.unshift(n);for(;a[i]===o[i];)i++;return i?de(a[i],o[i]):a[i]===E?-1:o[i]===E?1:0},f):f},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if((e.ownerDocument||e)!==f&&p(e),t=t.replace(V,"='$1']"),n.matchesSelector&&m&&!_[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var i=y.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return se(t,f,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!==f&&p(e),b(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!==f&&p(e);var r=i.attrHandle[t.toLowerCase()],s=r&&D.call(i.attrHandle,t.toLowerCase())?r(e,t,!m):void 0;return void 0!==s?s:n.attributes||!m?e.getAttribute(t):(s=e.getAttributeNode(t))&&s.specified?s.value:null},se.escape=function(e){return(e+"").replace(te,ne)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,i=[],r=0,s=0;if(u=!n.detectDuplicates,d=!n.sortStable&&e.slice(0),e.sort(A),u){for(;t=e[s++];)t===e[s]&&(r=i.push(s));for(;r--;)e.splice(i[r],1)}return d=null,e},r=se.getText=function(e){var t,n="",i=0,s=e.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===s||4===s)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(i=se.selectors={cacheLength:50,createPseudo:oe,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return X.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&G.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=C[e+" "];return t||(t=new RegExp("(^|"+P+")"+e+"("+P+"|$)"))&&C(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(i){var r=se.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(R," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var s="nth"!==e.slice(0,3),a="last"!==e.slice(-4),o="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var c,d,u,p,f,h,m=s!==a?"nextSibling":"previousSibling",g=t.parentNode,v=o&&t.nodeName.toLowerCase(),y=!l&&!o,b=!1;if(g){if(s){for(;m;){for(p=t;p=p[m];)if(o?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?g.firstChild:g.lastChild],a&&y){for(b=(f=(c=(d=(u=(p=g)[w]||(p[w]={}))[p.uniqueID]||(u[p.uniqueID]={}))[e]||[])[0]===T&&c[1])&&c[2],p=f&&g.childNodes[f];p=++f&&p&&p[m]||(b=f=0)||h.pop();)if(1===p.nodeType&&++b&&p===t){d[e]=[T,f,b];break}}else if(y&&(b=f=(c=(d=(u=(p=t)[w]||(p[w]={}))[p.uniqueID]||(u[p.uniqueID]={}))[e]||[])[0]===T&&c[1]),!1===b)for(;(p=++f&&p&&p[m]||(b=f=0)||h.pop())&&((o?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++b||(y&&((d=(u=p[w]||(p[w]={}))[p.uniqueID]||(u[p.uniqueID]={}))[e]=[T,b]),p!==t)););return(b-=r)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return r[w]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?oe(function(e,n){for(var i,s=r(e,t),a=s.length;a--;)e[i=L(e,s[a])]=!(n[i]=s[a])}):function(e){return r(e,0,n)}):r}},pseudos:{not:oe(function(e){var t=[],n=[],i=o(e.replace(W,"$1"));return i[w]?oe(function(e,t,n,r){for(var s,a=i(e,null,r,[]),o=e.length;o--;)(s=a[o])&&(e[o]=!(t[o]=s))}):function(e,r,s){return t[0]=e,i(t,null,s,n),t[0]=null,!n.pop()}}),has:oe(function(e){return function(t){return se(e,t).length>0}}),contains:oe(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||r(t)).indexOf(e)>-1}}),lang:oe(function(e){return q.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:fe(!1),disabled:fe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return U.test(e.nodeName)},input:function(e){return Y.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:he(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=ue(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=pe(t);function ge(){}function ve(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function ye(e,t,n){var i=t.dir,r=t.next,s=r||i,a=n&&"parentNode"===s,o=x++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||a)return e(t,n,r);return!1}:function(t,n,l){var c,d,u,p=[T,o];if(l){for(;t=t[i];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||a)if(d=(u=t[w]||(t[w]={}))[t.uniqueID]||(u[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=d[s])&&c[0]===T&&c[1]===o)return p[2]=c[2];if(d[s]=p,p[2]=e(t,n,l))return!0}return!1}}function be(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function we(e,t,n,i,r){for(var s,a=[],o=0,l=e.length,c=null!=t;o<l;o++)(s=e[o])&&(n&&!n(s,i,r)||(a.push(s),c&&t.push(o)));return a}function Ee(e,t,n,i,r,s){return i&&!i[w]&&(i=Ee(i)),r&&!r[w]&&(r=Ee(r,s)),oe(function(s,a,o,l){var c,d,u,p=[],f=[],h=a.length,m=s||function(e,t,n){for(var i=0,r=t.length;i<r;i++)se(e,t[i],n);return n}(t||"*",o.nodeType?[o]:o,[]),g=!e||!s&&t?m:we(m,p,e,o,l),v=n?r||(s?e:h||i)?[]:a:g;if(n&&n(g,v,o,l),i)for(c=we(v,f),i(c,[],o,l),d=c.length;d--;)(u=c[d])&&(v[f[d]]=!(g[f[d]]=u));if(s){if(r||e){if(r){for(c=[],d=v.length;d--;)(u=v[d])&&c.push(g[d]=u);r(null,v=[],c,l)}for(d=v.length;d--;)(u=v[d])&&(c=r?L(s,u):p[d])>-1&&(s[c]=!(a[c]=u))}}else v=we(v===a?v.splice(h,v.length):v),r?r(null,a,v,l):N.apply(a,v)})}function Te(e){for(var t,n,r,s=e.length,a=i.relative[e[0].type],o=a||i.relative[" "],l=a?1:0,d=ye(function(e){return e===t},o,!0),u=ye(function(e){return L(t,e)>-1},o,!0),p=[function(e,n,i){var r=!a&&(i||n!==c)||((t=n).nodeType?d(e,n,i):u(e,n,i));return t=null,r}];l<s;l++)if(n=i.relative[e[l].type])p=[ye(be(p),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[w]){for(r=++l;r<s&&!i.relative[e[r].type];r++);return Ee(l>1&&be(p),l>1&&ve(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(W,"$1"),n,l<r&&Te(e.slice(l,r)),r<s&&Te(e=e.slice(r)),r<s&&ve(e))}p.push(n)}return be(p)}return ge.prototype=i.filters=i.pseudos,i.setFilters=new ge,a=se.tokenize=function(e,t){var n,r,s,a,o,l,c,d=S[e+" "];if(d)return t?0:d.slice(0);for(o=e,l=[],c=i.preFilter;o;){for(a in n&&!(r=B.exec(o))||(r&&(o=o.slice(r[0].length)||o),l.push(s=[])),n=!1,(r=F.exec(o))&&(n=r.shift(),s.push({value:n,type:r[0].replace(W," ")}),o=o.slice(n.length)),i.filter)!(r=X[a].exec(o))||c[a]&&!(r=c[a](r))||(n=r.shift(),s.push({value:n,type:a,matches:r}),o=o.slice(n.length));if(!n)break}return t?o.length:o?se.error(e):S(e,l).slice(0)},o=se.compile=function(e,t){var n,r=[],s=[],o=_[e+" "];if(!o){for(t||(t=a(e)),n=t.length;n--;)(o=Te(t[n]))[w]?r.push(o):s.push(o);(o=_(e,function(e,t){var n=t.length>0,r=e.length>0,s=function(s,a,o,l,d){var u,h,g,v=0,y="0",b=s&&[],w=[],E=c,x=s||r&&i.find.TAG("*",d),C=T+=null==E?1:Math.random()||.1,S=x.length;for(d&&(c=a===f||a||d);y!==S&&null!=(u=x[y]);y++){if(r&&u){for(h=0,a||u.ownerDocument===f||(p(u),o=!m);g=e[h++];)if(g(u,a||f,o)){l.push(u);break}d&&(T=C)}n&&((u=!g&&u)&&v--,s&&b.push(u))}if(v+=y,n&&y!==v){for(h=0;g=t[h++];)g(b,w,a,o);if(s){if(v>0)for(;y--;)b[y]||w[y]||(w[y]=k.call(l));w=we(w)}N.apply(l,w),d&&!s&&w.length>0&&v+t.length>1&&se.uniqueSort(l)}return d&&(T=C,c=E),b};return n?oe(s):s}(s,r))).selector=e}return o},l=se.select=function(e,t,n,r){var s,l,c,d,u,p="function"==typeof e&&e,f=!r&&a(e=p.selector||e);if(n=n||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===t.nodeType&&m&&i.relative[l[1].type]){if(!(t=(i.find.ID(c.matches[0].replace(Z,ee),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(s=X.needsContext.test(e)?0:l.length;s--&&(c=l[s],!i.relative[d=c.type]);)if((u=i.find[d])&&(r=u(c.matches[0].replace(Z,ee),J.test(l[0].type)&&me(t.parentNode)||t))){if(l.splice(s,1),!(e=r.length&&ve(l)))return N.apply(n,r),n;break}}return(p||o(e,f))(r,t,!m,n,!t||J.test(e)&&me(t.parentNode)||t),n},n.sortStable=w.split("").sort(A).join("")===w,n.detectDuplicates=!!u,p(),n.sortDetached=le(function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))}),le(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ce("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&le(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ce("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),le(function(e){return null==e.getAttribute("disabled")})||ce($,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),se}(n);x.find=_,x.expr=_.selectors,x.expr[":"]=x.expr.pseudos,x.uniqueSort=x.unique=_.uniqueSort,x.text=_.getText,x.isXMLDoc=_.isXML,x.contains=_.contains,x.escapeSelector=_.escape;var A=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&x(e).is(n))break;i.push(e)}return i},D=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},O=x.expr.match.needsContext;function k(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var I=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function N(e,t,n){return y(t)?x.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?x.grep(e,function(e){return e===t!==n}):"string"!=typeof t?x.grep(e,function(e){return u.call(t,e)>-1!==n}):x.filter(t,e,n)}x.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?x.find.matchesSelector(i,e)?[i]:[]:x.find.matches(e,x.grep(t,function(e){return 1===e.nodeType}))},x.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(x(e).filter(function(){for(t=0;t<i;t++)if(x.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)x.find(e,r[t],n);return i>1?x.uniqueSort(n):n},filter:function(e){return this.pushStack(N(this,e||[],!1))},not:function(e){return this.pushStack(N(this,e||[],!0))},is:function(e){return!!N(this,"string"==typeof e&&O.test(e)?x(e):e||[],!1).length}});var M,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(x.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||M,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof x?t[0]:t,x.merge(this,x.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:a,!0)),I.test(i[1])&&x.isPlainObject(t))for(i in t)y(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=a.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(x):x.makeArray(e,this)}).prototype=x.fn,M=x(a);var $=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function H(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}x.fn.extend({has:function(e){var t=x(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(x.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,s=[],a="string"!=typeof e&&x(e);if(!O.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&x.find.matchesSelector(n,e))){s.push(n);break}return this.pushStack(s.length>1?x.uniqueSort(s):s)},index:function(e){return e?"string"==typeof e?u.call(x(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(x.uniqueSort(x.merge(this.get(),x(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),x.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return A(e,"parentNode")},parentsUntil:function(e,t,n){return A(e,"parentNode",n)},next:function(e){return H(e,"nextSibling")},prev:function(e){return H(e,"previousSibling")},nextAll:function(e){return A(e,"nextSibling")},prevAll:function(e){return A(e,"previousSibling")},nextUntil:function(e,t,n){return A(e,"nextSibling",n)},prevUntil:function(e,t,n){return A(e,"previousSibling",n)},siblings:function(e){return D((e.parentNode||{}).firstChild,e)},children:function(e){return D(e.firstChild)},contents:function(e){return k(e,"iframe")?e.contentDocument:(k(e,"template")&&(e=e.content||e),x.merge([],e.childNodes))}},function(e,t){x.fn[e]=function(n,i){var r=x.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=x.filter(i,r)),this.length>1&&(P[e]||x.uniqueSort(r),$.test(e)&&r.reverse()),this.pushStack(r)}});var z=/[^\x20\t\r\n\f]+/g;function j(e){return e}function R(e){throw e}function W(e,t,n,i){var r;try{e&&y(r=e.promise)?r.call(e).done(t).fail(n):e&&y(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}x.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return x.each(e.match(z)||[],function(e,n){t[n]=!0}),t}(e):x.extend({},e);var t,n,i,r,s=[],a=[],o=-1,l=function(){for(r=r||e.once,i=t=!0;a.length;o=-1)for(n=a.shift();++o<s.length;)!1===s[o].apply(n[0],n[1])&&e.stopOnFalse&&(o=s.length,n=!1);e.memory||(n=!1),t=!1,r&&(s=n?[]:"")},c={add:function(){return s&&(n&&!t&&(o=s.length-1,a.push(n)),function t(n){x.each(n,function(n,i){y(i)?e.unique&&c.has(i)||s.push(i):i&&i.length&&"string"!==T(i)&&t(i)})}(arguments),n&&!t&&l()),this},remove:function(){return x.each(arguments,function(e,t){for(var n;(n=x.inArray(t,s,n))>-1;)s.splice(n,1),n<=o&&o--}),this},has:function(e){return e?x.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return r=a=[],s=n="",this},disabled:function(){return!s},lock:function(){return r=a=[],n||t||(s=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},x.extend({Deferred:function(e){var t=[["notify","progress",x.Callbacks("memory"),x.Callbacks("memory"),2],["resolve","done",x.Callbacks("once memory"),x.Callbacks("once memory"),0,"resolved"],["reject","fail",x.Callbacks("once memory"),x.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return x.Deferred(function(n){x.each(t,function(t,i){var r=y(e[i[4]])&&e[i[4]];s[i[1]](function(){var e=r&&r.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[e]:arguments)})}),e=null}).promise()},then:function(e,i,r){var s=0;function a(e,t,i,r){return function(){var o=this,l=arguments,c=function(){var n,c;if(!(e<s)){if((n=i.apply(o,l))===t.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(c)?r?c.call(n,a(s,t,j,r),a(s,t,R,r)):(s++,c.call(n,a(s,t,j,r),a(s,t,R,r),a(s,t,j,t.notifyWith))):(i!==j&&(o=void 0,l=[n]),(r||t.resolveWith)(o,l))}},d=r?c:function(){try{c()}catch(n){x.Deferred.exceptionHook&&x.Deferred.exceptionHook(n,d.stackTrace),e+1>=s&&(i!==R&&(o=void 0,l=[n]),t.rejectWith(o,l))}};e?d():(x.Deferred.getStackHook&&(d.stackTrace=x.Deferred.getStackHook()),n.setTimeout(d))}}return x.Deferred(function(n){t[0][3].add(a(0,n,y(r)?r:j,n.notifyWith)),t[1][3].add(a(0,n,y(e)?e:j)),t[2][3].add(a(0,n,y(i)?i:R))}).promise()},promise:function(e){return null!=e?x.extend(e,r):r}},s={};return x.each(t,function(e,n){var a=n[2],o=n[5];r[n[1]]=a.add,o&&a.add(function(){i=o},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(n[3].fire),s[n[0]]=function(){return s[n[0]+"With"](this===s?void 0:this,arguments),this},s[n[0]+"With"]=a.fireWith}),r.promise(s),e&&e.call(s,s),s},when:function(e){var t=arguments.length,n=t,i=Array(n),r=l.call(arguments),s=x.Deferred(),a=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?l.call(arguments):n,--t||s.resolveWith(i,r)}};if(t<=1&&(W(e,s.done(a(n)).resolve,s.reject,!t),"pending"===s.state()||y(r[n]&&r[n].then)))return s.then();for(;n--;)W(r[n],a(n),s.reject);return s.promise()}});var B=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;x.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&B.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},x.readyException=function(e){n.setTimeout(function(){throw e})};var F=x.Deferred();function V(){a.removeEventListener("DOMContentLoaded",V),n.removeEventListener("load",V),x.ready()}x.fn.ready=function(e){return F.then(e).catch(function(e){x.readyException(e)}),this},x.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--x.readyWait:x.isReady)||(x.isReady=!0,!0!==e&&--x.readyWait>0||F.resolveWith(a,[x]))}}),x.ready.then=F.then,"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?n.setTimeout(x.ready):(a.addEventListener("DOMContentLoaded",V),n.addEventListener("load",V));var G=function(e,t,n,i,r,s,a){var o=0,l=e.length,c=null==n;if("object"===T(n))for(o in r=!0,n)G(e,t,o,n[o],!0,s,a);else if(void 0!==i&&(r=!0,y(i)||(a=!0),c&&(a?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(x(e),n)})),t))for(;o<l;o++)t(e[o],n,a?i:i.call(e[o],o,t(e[o],n)));return r?e:c?t.call(e):l?t(e[0],n):s},q=/^-ms-/,X=/-([a-z])/g;function Y(e,t){return t.toUpperCase()}function U(e){return e.replace(q,"ms-").replace(X,Y)}var K=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=x.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},K(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[U(t)]=n;else for(i in t)r[U(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][U(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(U):(t=U(t))in i?[t]:t.match(z)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||x.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!x.isEmptyObject(t)}};var J=new Q,Z=new Q,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}x.extend({hasData:function(e){return Z.hasData(e)||J.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),x.fn.extend({data:function(e,t){var n,i,r,s=this[0],a=s&&s.attributes;if(void 0===e){if(this.length&&(r=Z.get(s),1===s.nodeType&&!J.get(s,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(i=a[n].name).indexOf("data-")&&(i=U(i.slice(5)),ne(s,i,r[i]));J.set(s,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){Z.set(this,e)}):G(this,function(t){var n;if(s&&void 0===t)return void 0!==(n=Z.get(s,e))?n:void 0!==(n=ne(s,e))?n:void 0;this.each(function(){Z.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Z.remove(this,e)})}}),x.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=J.get(e,t),n&&(!i||Array.isArray(n)?i=J.access(e,t,x.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=x.queue(e,t),i=n.length,r=n.shift(),s=x._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete s.stop,r.call(e,function(){x.dequeue(e,t)},s)),!i&&s&&s.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:x.Callbacks("once memory").add(function(){J.remove(e,[t+"queue",n])})})}}),x.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?x.queue(this[0],e):void 0===t?this:this.each(function(){var n=x.queue(this,e,t);x._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&x.dequeue(this,e)})},dequeue:function(e){return this.each(function(){x.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=x.Deferred(),s=this,a=this.length,o=function(){--i||r.resolveWith(s,[s])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=J.get(s[a],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(o));return o(),r.promise(t)}});var ie=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+ie+")([a-z%]*)$","i"),se=["Top","Right","Bottom","Left"],ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&x.contains(e.ownerDocument,e)&&"none"===x.css(e,"display")},oe=function(e,t,n,i){var r,s,a={};for(s in t)a[s]=e.style[s],e.style[s]=t[s];for(s in r=n.apply(e,i||[]),t)e.style[s]=a[s];return r};function le(e,t,n,i){var r,s,a=20,o=i?function(){return i.cur()}:function(){return x.css(e,t,"")},l=o(),c=n&&n[3]||(x.cssNumber[t]?"":"px"),d=(x.cssNumber[t]||"px"!==c&&+l)&&re.exec(x.css(e,t));if(d&&d[3]!==c){for(l/=2,c=c||d[3],d=+l||1;a--;)x.style(e,t,d+c),(1-s)*(1-(s=o()/l||.5))<=0&&(a=0),d/=s;d*=2,x.style(e,t,d+c),n=n||[]}return n&&(d=+d||+l||0,r=n[1]?d+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=d,i.end=r)),r}var ce={};function de(e){var t,n=e.ownerDocument,i=e.nodeName,r=ce[i];return r||(t=n.body.appendChild(n.createElement(i)),r=x.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),ce[i]=r,r)}function ue(e,t){for(var n,i,r=[],s=0,a=e.length;s<a;s++)(i=e[s]).style&&(n=i.style.display,t?("none"===n&&(r[s]=J.get(i,"display")||null,r[s]||(i.style.display="")),""===i.style.display&&ae(i)&&(r[s]=de(i))):"none"!==n&&(r[s]="none",J.set(i,"display",n)));for(s=0;s<a;s++)null!=r[s]&&(e[s].style.display=r[s]);return e}x.fn.extend({show:function(){return ue(this,!0)},hide:function(){return ue(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?x(this).show():x(this).hide()})}});var pe=/^(?:checkbox|radio)$/i,fe=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,he=/^$|^module$|\/(?:java|ecma)script/i,me={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&k(e,t)?x.merge([e],n):n}function ve(e,t){for(var n=0,i=e.length;n<i;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}me.optgroup=me.option,me.tbody=me.tfoot=me.colgroup=me.caption=me.thead,me.th=me.td;var ye,be,we=/<|&#?\w+;/;function Ee(e,t,n,i,r){for(var s,a,o,l,c,d,u=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((s=e[f])||0===s)if("object"===T(s))x.merge(p,s.nodeType?[s]:s);else if(we.test(s)){for(a=a||u.appendChild(t.createElement("div")),o=(fe.exec(s)||["",""])[1].toLowerCase(),l=me[o]||me._default,a.innerHTML=l[1]+x.htmlPrefilter(s)+l[2],d=l[0];d--;)a=a.lastChild;x.merge(p,a.childNodes),(a=u.firstChild).textContent=""}else p.push(t.createTextNode(s));for(u.textContent="",f=0;s=p[f++];)if(i&&x.inArray(s,i)>-1)r&&r.push(s);else if(c=x.contains(s.ownerDocument,s),a=ge(u.appendChild(s),"script"),c&&ve(a),n)for(d=0;s=a[d++];)he.test(s.type||"")&&n.push(s);return u}ye=a.createDocumentFragment().appendChild(a.createElement("div")),(be=a.createElement("input")).setAttribute("type","radio"),be.setAttribute("checked","checked"),be.setAttribute("name","t"),ye.appendChild(be),v.checkClone=ye.cloneNode(!0).cloneNode(!0).lastChild.checked,ye.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!ye.cloneNode(!0).lastChild.defaultValue;var Te=a.documentElement,xe=/^key/,Ce=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Se=/^([^.]*)(?:\.(.+)|)/;function _e(){return!0}function Ae(){return!1}function De(){try{return a.activeElement}catch(e){}}function Oe(e,t,n,i,r,s){var a,o;if("object"==typeof t){for(o in"string"!=typeof n&&(i=i||n,n=void 0),t)Oe(e,o,n,i,t[o],s);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Ae;else if(!r)return e;return 1===s&&(a=r,(r=function(e){return x().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=x.guid++)),e.each(function(){x.event.add(this,t,r,i,n)})}x.event={global:{},add:function(e,t,n,i,r){var s,a,o,l,c,d,u,p,f,h,m,g=J.get(e);if(g)for(n.handler&&(n=(s=n).handler,r=s.selector),r&&x.find.matchesSelector(Te,r),n.guid||(n.guid=x.guid++),(l=g.events)||(l=g.events={}),(a=g.handle)||(a=g.handle=function(t){return void 0!==x&&x.event.triggered!==t.type?x.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(z)||[""]).length;c--;)f=m=(o=Se.exec(t[c])||[])[1],h=(o[2]||"").split(".").sort(),f&&(u=x.event.special[f]||{},f=(r?u.delegateType:u.bindType)||f,u=x.event.special[f]||{},d=x.extend({type:f,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&x.expr.match.needsContext.test(r),namespace:h.join(".")},s),(p=l[f])||((p=l[f]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(e,i,h,a)||e.addEventListener&&e.addEventListener(f,a)),u.add&&(u.add.call(e,d),d.handler.guid||(d.handler.guid=n.guid)),r?p.splice(p.delegateCount++,0,d):p.push(d),x.event.global[f]=!0)},remove:function(e,t,n,i,r){var s,a,o,l,c,d,u,p,f,h,m,g=J.hasData(e)&&J.get(e);if(g&&(l=g.events)){for(c=(t=(t||"").match(z)||[""]).length;c--;)if(f=m=(o=Se.exec(t[c])||[])[1],h=(o[2]||"").split(".").sort(),f){for(u=x.event.special[f]||{},p=l[f=(i?u.delegateType:u.bindType)||f]||[],o=o[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=s=p.length;s--;)d=p[s],!r&&m!==d.origType||n&&n.guid!==d.guid||o&&!o.test(d.namespace)||i&&i!==d.selector&&("**"!==i||!d.selector)||(p.splice(s,1),d.selector&&p.delegateCount--,u.remove&&u.remove.call(e,d));a&&!p.length&&(u.teardown&&!1!==u.teardown.call(e,h,g.handle)||x.removeEvent(e,f,g.handle),delete l[f])}else for(f in l)x.event.remove(e,f+t[c],n,i,!0);x.isEmptyObject(l)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,s,a,o=x.event.fix(e),l=new Array(arguments.length),c=(J.get(this,"events")||{})[o.type]||[],d=x.event.special[o.type]||{};for(l[0]=o,t=1;t<arguments.length;t++)l[t]=arguments[t];if(o.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,o)){for(a=x.event.handlers.call(this,o,c),t=0;(r=a[t++])&&!o.isPropagationStopped();)for(o.currentTarget=r.elem,n=0;(s=r.handlers[n++])&&!o.isImmediatePropagationStopped();)o.rnamespace&&!o.rnamespace.test(s.namespace)||(o.handleObj=s,o.data=s.data,void 0!==(i=((x.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,l))&&!1===(o.result=i)&&(o.preventDefault(),o.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,o),o.result}},handlers:function(e,t){var n,i,r,s,a,o=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(s=[],a={},n=0;n<l;n++)void 0===a[r=(i=t[n]).selector+" "]&&(a[r]=i.needsContext?x(r,this).index(c)>-1:x.find(r,this,null,[c]).length),a[r]&&s.push(i);s.length&&o.push({elem:c,handlers:s})}return c=this,l<t.length&&o.push({elem:c,handlers:t.slice(l)}),o},addProp:function(e,t){Object.defineProperty(x.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[x.expando]?e:new x.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==De()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===De()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&k(this,"input"))return this.click(),!1},_default:function(e){return k(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},x.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},x.Event=function(e,t){if(!(this instanceof x.Event))return new x.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?_e:Ae,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&x.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[x.expando]=!0},x.Event.prototype={constructor:x.Event,isDefaultPrevented:Ae,isPropagationStopped:Ae,isImmediatePropagationStopped:Ae,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=_e,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=_e,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=_e,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},x.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&xe.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ce.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},x.event.addProp),x.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){x.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,r=e.handleObj;return i&&(i===this||x.contains(this,i))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),x.fn.extend({on:function(e,t,n,i){return Oe(this,e,t,n,i)},one:function(e,t,n,i){return Oe(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,x(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ae),this.each(function(){x.event.remove(this,e,n,t)})}});var ke=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ie=/<script|<style|<link/i,Ne=/checked\s*(?:[^=]|=\s*.checked.)/i,Me=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Le(e,t){return k(e,"table")&&k(11!==t.nodeType?t:t.firstChild,"tr")&&x(e).children("tbody")[0]||e}function $e(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Pe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function He(e,t){var n,i,r,s,a,o,l,c;if(1===t.nodeType){if(J.hasData(e)&&(s=J.access(e),a=J.set(t,s),c=s.events))for(r in delete a.handle,a.events={},c)for(n=0,i=c[r].length;n<i;n++)x.event.add(t,r,c[r][n]);Z.hasData(e)&&(o=Z.access(e),l=x.extend({},o),Z.set(t,l))}}function ze(e,t,n,i){t=c.apply([],t);var r,s,a,o,l,d,u=0,p=e.length,f=p-1,h=t[0],m=y(h);if(m||p>1&&"string"==typeof h&&!v.checkClone&&Ne.test(h))return e.each(function(r){var s=e.eq(r);m&&(t[0]=h.call(this,r,s.html())),ze(s,t,n,i)});if(p&&(s=(r=Ee(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=s),s||i)){for(o=(a=x.map(ge(r,"script"),$e)).length;u<p;u++)l=r,u!==f&&(l=x.clone(l,!0,!0),o&&x.merge(a,ge(l,"script"))),n.call(e[u],l,u);if(o)for(d=a[a.length-1].ownerDocument,x.map(a,Pe),u=0;u<o;u++)l=a[u],he.test(l.type||"")&&!J.access(l,"globalEval")&&x.contains(d,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?x._evalUrl&&x._evalUrl(l.src):E(l.textContent.replace(Me,""),d,l))}return e}function je(e,t,n){for(var i,r=t?x.filter(t,e):e,s=0;null!=(i=r[s]);s++)n||1!==i.nodeType||x.cleanData(ge(i)),i.parentNode&&(n&&x.contains(i.ownerDocument,i)&&ve(ge(i,"script")),i.parentNode.removeChild(i));return e}x.extend({htmlPrefilter:function(e){return e.replace(ke,"<$1></$2>")},clone:function(e,t,n){var i,r,s,a,o,l,c,d=e.cloneNode(!0),u=x.contains(e.ownerDocument,e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||x.isXMLDoc(e)))for(a=ge(d),i=0,r=(s=ge(e)).length;i<r;i++)o=s[i],l=a[i],void 0,"input"===(c=l.nodeName.toLowerCase())&&pe.test(o.type)?l.checked=o.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=o.defaultValue);if(t)if(n)for(s=s||ge(e),a=a||ge(d),i=0,r=s.length;i<r;i++)He(s[i],a[i]);else He(e,d);return(a=ge(d,"script")).length>0&&ve(a,!u&&ge(e,"script")),d},cleanData:function(e){for(var t,n,i,r=x.event.special,s=0;void 0!==(n=e[s]);s++)if(K(n)){if(t=n[J.expando]){if(t.events)for(i in t.events)r[i]?x.event.remove(n,i):x.removeEvent(n,i,t.handle);n[J.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),x.fn.extend({detach:function(e){return je(this,e,!0)},remove:function(e){return je(this,e)},text:function(e){return G(this,function(e){return void 0===e?x.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return ze(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Le(this,e).appendChild(e)})},prepend:function(){return ze(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Le(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return ze(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return ze(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(x.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return x.clone(this,e,t)})},html:function(e){return G(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ie.test(e)&&!me[(fe.exec(e)||["",""])[1].toLowerCase()]){e=x.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(x.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return ze(this,arguments,function(t){var n=this.parentNode;x.inArray(this,e)<0&&(x.cleanData(ge(this)),n&&n.replaceChild(t,this))},e)}}),x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){x.fn[e]=function(e){for(var n,i=[],r=x(e),s=r.length-1,a=0;a<=s;a++)n=a===s?this:this.clone(!0),x(r[a])[t](n),d.apply(i,n.get());return this.pushStack(i)}});var Re=new RegExp("^("+ie+")(?!px)[a-z%]+$","i"),We=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Be=new RegExp(se.join("|"),"i");function Fe(e,t,n){var i,r,s,a,o=e.style;return(n=n||We(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||x.contains(e.ownerDocument,e)||(a=x.style(e,t)),!v.pixelBoxStyles()&&Re.test(a)&&Be.test(t)&&(i=o.width,r=o.minWidth,s=o.maxWidth,o.minWidth=o.maxWidth=o.width=a,a=n.width,o.width=i,o.minWidth=r,o.maxWidth=s)),void 0!==a?a+"":a}function Ve(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(d){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",d.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",Te.appendChild(c).appendChild(d);var e=n.getComputedStyle(d);i="1%"!==e.top,l=12===t(e.marginLeft),d.style.right="60%",o=36===t(e.right),r=36===t(e.width),d.style.position="absolute",s=36===d.offsetWidth||"absolute",Te.removeChild(c),d=null}}function t(e){return Math.round(parseFloat(e))}var i,r,s,o,l,c=a.createElement("div"),d=a.createElement("div");d.style&&(d.style.backgroundClip="content-box",d.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===d.style.backgroundClip,x.extend(v,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),s}}))}();var Ge=/^(none|table(?!-c[ea]).+)/,qe=/^--/,Xe={position:"absolute",visibility:"hidden",display:"block"},Ye={letterSpacing:"0",fontWeight:"400"},Ue=["Webkit","Moz","ms"],Ke=a.createElement("div").style;function Qe(e){var t=x.cssProps[e];return t||(t=x.cssProps[e]=function(e){if(e in Ke)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Ue.length;n--;)if((e=Ue[n]+t)in Ke)return e}(e)||e),t}function Je(e,t,n){var i=re.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function Ze(e,t,n,i,r,s){var a="width"===t?1:0,o=0,l=0;if(n===(i?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=x.css(e,n+se[a],!0,r)),i?("content"===n&&(l-=x.css(e,"padding"+se[a],!0,r)),"margin"!==n&&(l-=x.css(e,"border"+se[a]+"Width",!0,r))):(l+=x.css(e,"padding"+se[a],!0,r),"padding"!==n?l+=x.css(e,"border"+se[a]+"Width",!0,r):o+=x.css(e,"border"+se[a]+"Width",!0,r));return!i&&s>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-s-l-o-.5))),l}function et(e,t,n){var i=We(e),r=Fe(e,t,i),s="border-box"===x.css(e,"boxSizing",!1,i),a=s;if(Re.test(r)){if(!n)return r;r="auto"}return a=a&&(v.boxSizingReliable()||r===e.style[t]),("auto"===r||!parseFloat(r)&&"inline"===x.css(e,"display",!1,i))&&(r=e["offset"+t[0].toUpperCase()+t.slice(1)],a=!0),(r=parseFloat(r)||0)+Ze(e,t,n||(s?"border":"content"),a,i,r)+"px"}function tt(e,t,n,i,r){return new tt.prototype.init(e,t,n,i,r)}x.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Fe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,s,a,o=U(t),l=qe.test(t),c=e.style;if(l||(t=Qe(o)),a=x.cssHooks[t]||x.cssHooks[o],void 0===n)return a&&"get"in a&&void 0!==(r=a.get(e,!1,i))?r:c[t];"string"===(s=typeof n)&&(r=re.exec(n))&&r[1]&&(n=le(e,t,r),s="number"),null!=n&&n==n&&("number"===s&&(n+=r&&r[3]||(x.cssNumber[o]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var r,s,a,o=U(t);return qe.test(t)||(t=Qe(o)),(a=x.cssHooks[t]||x.cssHooks[o])&&"get"in a&&(r=a.get(e,!0,n)),void 0===r&&(r=Fe(e,t,i)),"normal"===r&&t in Ye&&(r=Ye[t]),""===n||n?(s=parseFloat(r),!0===n||isFinite(s)?s||0:r):r}}),x.each(["height","width"],function(e,t){x.cssHooks[t]={get:function(e,n,i){if(n)return!Ge.test(x.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,i):oe(e,Xe,function(){return et(e,t,i)})},set:function(e,n,i){var r,s=We(e),a="border-box"===x.css(e,"boxSizing",!1,s),o=i&&Ze(e,t,i,a,s);return a&&v.scrollboxSize()===s.position&&(o-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(s[t])-Ze(e,t,"border",!1,s)-.5)),o&&(r=re.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=x.css(e,t)),Je(0,n,o)}}}),x.cssHooks.marginLeft=Ve(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Fe(e,"marginLeft"))||e.getBoundingClientRect().left-oe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),x.each({margin:"",padding:"",border:"Width"},function(e,t){x.cssHooks[e+t]={expand:function(n){for(var i=0,r={},s="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+se[i]+t]=s[i]||s[i-2]||s[0];return r}},"margin"!==e&&(x.cssHooks[e+t].set=Je)}),x.fn.extend({css:function(e,t){return G(this,function(e,t,n){var i,r,s={},a=0;if(Array.isArray(t)){for(i=We(e),r=t.length;a<r;a++)s[t[a]]=x.css(e,t[a],!1,i);return s}return void 0!==n?x.style(e,t,n):x.css(e,t)},e,t,arguments.length>1)}}),x.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,n,i,r,s){this.elem=e,this.prop=n,this.easing=r||x.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=s||(x.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=x.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=x.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){x.fx.step[e.prop]?x.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[x.cssProps[e.prop]]&&!x.cssHooks[e.prop]?e.elem[e.prop]=e.now:x.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},x.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},x.fx=tt.prototype.init,x.fx.step={};var nt,it,rt=/^(?:toggle|show|hide)$/,st=/queueHooks$/;function at(){it&&(!1===a.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(at):n.setTimeout(at,x.fx.interval),x.fx.tick())}function ot(){return n.setTimeout(function(){nt=void 0}),nt=Date.now()}function lt(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=se[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function ct(e,t,n){for(var i,r=(dt.tweeners[t]||[]).concat(dt.tweeners["*"]),s=0,a=r.length;s<a;s++)if(i=r[s].call(n,t,e))return i}function dt(e,t,n){var i,r,s=0,a=dt.prefilters.length,o=x.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=nt||ot(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),s=0,a=c.tweens.length;s<a;s++)c.tweens[s].run(i);return o.notifyWith(e,[c,i,n]),i<1&&a?n:(a||o.notifyWith(e,[c,1,0]),o.resolveWith(e,[c]),!1)},c=o.promise({elem:e,props:x.extend({},t),opts:x.extend(!0,{specialEasing:{},easing:x.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||ot(),duration:n.duration,tweens:[],createTween:function(t,n){var i=x.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return t?(o.notifyWith(e,[c,1,0]),o.resolveWith(e,[c,t])):o.rejectWith(e,[c,t]),this}}),d=c.props;for(!function(e,t){var n,i,r,s,a;for(n in e)if(r=t[i=U(n)],s=e[n],Array.isArray(s)&&(r=s[1],s=e[n]=s[0]),n!==i&&(e[i]=s,delete e[n]),(a=x.cssHooks[i])&&"expand"in a)for(n in s=a.expand(s),delete e[i],s)n in e||(e[n]=s[n],t[n]=r);else t[i]=r}(d,c.opts.specialEasing);s<a;s++)if(i=dt.prefilters[s].call(c,e,d,c.opts))return y(i.stop)&&(x._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return x.map(d,ct,c),y(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),x.fx.timer(x.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}x.Animation=x.extend(dt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(z);for(var n,i=0,r=e.length;i<r;i++)n=e[i],dt.tweeners[n]=dt.tweeners[n]||[],dt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,s,a,o,l,c,d,u="width"in t||"height"in t,p=this,f={},h=e.style,m=e.nodeType&&ae(e),g=J.get(e,"fxshow");for(i in n.queue||(null==(a=x._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,o=a.empty.fire,a.empty.fire=function(){a.unqueued||o()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,x.queue(e,"fx").length||a.empty.fire()})})),t)if(r=t[i],rt.test(r)){if(delete t[i],s=s||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!g||void 0===g[i])continue;m=!0}f[i]=g&&g[i]||x.style(e,i)}if((l=!x.isEmptyObject(t))||!x.isEmptyObject(f))for(i in u&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=g&&g.display)&&(c=J.get(e,"display")),"none"===(d=x.css(e,"display"))&&(c?d=c:(ue([e],!0),c=e.style.display||c,d=x.css(e,"display"),ue([e]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===x.css(e,"float")&&(l||(p.done(function(){h.display=c}),null==c&&(d=h.display,c="none"===d?"":d)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1,f)l||(g?"hidden"in g&&(m=g.hidden):g=J.access(e,"fxshow",{display:c}),s&&(g.hidden=!m),m&&ue([e],!0),p.done(function(){for(i in m||ue([e]),J.remove(e,"fxshow"),f)x.style(e,i,f[i])})),l=ct(m?g[i]:0,i,p),i in g||(g[i]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?dt.prefilters.unshift(e):dt.prefilters.push(e)}}),x.speed=function(e,t,n){var i=e&&"object"==typeof e?x.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return x.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in x.fx.speeds?i.duration=x.fx.speeds[i.duration]:i.duration=x.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){y(i.old)&&i.old.call(this),i.queue&&x.dequeue(this,i.queue)},i},x.fn.extend({fadeTo:function(e,t,n,i){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=x.isEmptyObject(e),s=x.speed(t,n,i),a=function(){var t=dt(this,x.extend({},e),s);(r||J.get(this,"finish"))&&t.stop(!0)};return a.finish=a,r||!1===s.queue?this.each(a):this.queue(s.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",s=x.timers,a=J.get(this);if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&st.test(r)&&i(a[r]);for(r=s.length;r--;)s[r].elem!==this||null!=e&&s[r].queue!==e||(s[r].anim.stop(n),t=!1,s.splice(r,1));!t&&n||x.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=J.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],s=x.timers,a=i?i.length:0;for(n.finish=!0,x.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=s.length;t--;)s[t].elem===this&&s[t].queue===e&&(s[t].anim.stop(!0),s.splice(t,1));for(t=0;t<a;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),x.each(["toggle","show","hide"],function(e,t){var n=x.fn[t];x.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(lt(t,!0),e,i,r)}}),x.each({slideDown:lt("show"),slideUp:lt("hide"),slideToggle:lt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){x.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),x.timers=[],x.fx.tick=function(){var e,t=0,n=x.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||x.fx.stop(),nt=void 0},x.fx.timer=function(e){x.timers.push(e),x.fx.start()},x.fx.interval=13,x.fx.start=function(){it||(it=!0,at())},x.fx.stop=function(){it=null},x.fx.speeds={slow:600,fast:200,_default:400},x.fn.delay=function(e,t){return e=x.fx&&x.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,i){var r=n.setTimeout(t,e);i.stop=function(){n.clearTimeout(r)}})},function(){var e=a.createElement("input"),t=a.createElement("select").appendChild(a.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=a.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var ut,pt=x.expr.attrHandle;x.fn.extend({attr:function(e,t){return G(this,x.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){x.removeAttr(this,e)})}}),x.extend({attr:function(e,t,n){var i,r,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===e.getAttribute?x.prop(e,t,n):(1===s&&x.isXMLDoc(e)||(r=x.attrHooks[t.toLowerCase()]||(x.expr.match.bool.test(t)?ut:void 0)),void 0!==n?null===n?void x.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=x.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&k(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(z);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),ut={set:function(e,t,n){return!1===t?x.removeAttr(e,n):e.setAttribute(n,n),n}},x.each(x.expr.match.bool.source.match(/\w+/g),function(e,t){var n=pt[t]||x.find.attr;pt[t]=function(e,t,i){var r,s,a=t.toLowerCase();return i||(s=pt[a],pt[a]=r,r=null!=n(e,t,i)?a:null,pt[a]=s),r}});var ft=/^(?:input|select|textarea|button)$/i,ht=/^(?:a|area)$/i;function mt(e){return(e.match(z)||[]).join(" ")}function gt(e){return e.getAttribute&&e.getAttribute("class")||""}function vt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(z)||[]}x.fn.extend({prop:function(e,t){return G(this,x.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[x.propFix[e]||e]})}}),x.extend({prop:function(e,t,n){var i,r,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&x.isXMLDoc(e)||(t=x.propFix[t]||t,r=x.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=x.find.attr(e,"tabindex");return t?parseInt(t,10):ft.test(e.nodeName)||ht.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(x.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){x.propFix[this.toLowerCase()]=this}),x.fn.extend({addClass:function(e){var t,n,i,r,s,a,o,l=0;if(y(e))return this.each(function(t){x(this).addClass(e.call(this,t,gt(this)))});if((t=vt(e)).length)for(;n=this[l++];)if(r=gt(n),i=1===n.nodeType&&" "+mt(r)+" "){for(a=0;s=t[a++];)i.indexOf(" "+s+" ")<0&&(i+=s+" ");r!==(o=mt(i))&&n.setAttribute("class",o)}return this},removeClass:function(e){var t,n,i,r,s,a,o,l=0;if(y(e))return this.each(function(t){x(this).removeClass(e.call(this,t,gt(this)))});if(!arguments.length)return this.attr("class","");if((t=vt(e)).length)for(;n=this[l++];)if(r=gt(n),i=1===n.nodeType&&" "+mt(r)+" "){for(a=0;s=t[a++];)for(;i.indexOf(" "+s+" ")>-1;)i=i.replace(" "+s+" "," ");r!==(o=mt(i))&&n.setAttribute("class",o)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):y(e)?this.each(function(n){x(this).toggleClass(e.call(this,n,gt(this),t),t)}):this.each(function(){var t,r,s,a;if(i)for(r=0,s=x(this),a=vt(e);t=a[r++];)s.hasClass(t)?s.removeClass(t):s.addClass(t);else void 0!==e&&"boolean"!==n||((t=gt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+mt(gt(n))+" ").indexOf(t)>-1)return!0;return!1}});var yt=/\r/g;x.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=y(e),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,x(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=x.map(r,function(e){return null==e?"":e+""})),(t=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))})):r?(t=x.valHooks[r.type]||x.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(yt,""):null==n?"":n:void 0}}),x.extend({valHooks:{option:{get:function(e){var t=x.find.attr(e,"value");return null!=t?t:mt(x.text(e))}},select:{get:function(e){var t,n,i,r=e.options,s=e.selectedIndex,a="select-one"===e.type,o=a?null:[],l=a?s+1:r.length;for(i=s<0?l:a?s:0;i<l;i++)if(((n=r[i]).selected||i===s)&&!n.disabled&&(!n.parentNode.disabled||!k(n.parentNode,"optgroup"))){if(t=x(n).val(),a)return t;o.push(t)}return o},set:function(e,t){for(var n,i,r=e.options,s=x.makeArray(t),a=r.length;a--;)((i=r[a]).selected=x.inArray(x.valHooks.option.get(i),s)>-1)&&(n=!0);return n||(e.selectedIndex=-1),s}}}}),x.each(["radio","checkbox"],function(){x.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=x.inArray(x(e).val(),t)>-1}},v.checkOn||(x.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in n;var bt=/^(?:focusinfocus|focusoutblur)$/,wt=function(e){e.stopPropagation()};x.extend(x.event,{trigger:function(e,t,i,r){var s,o,l,c,d,u,p,f,m=[i||a],g=h.call(e,"type")?e.type:e,v=h.call(e,"namespace")?e.namespace.split("."):[];if(o=f=l=i=i||a,3!==i.nodeType&&8!==i.nodeType&&!bt.test(g+x.event.triggered)&&(g.indexOf(".")>-1&&(g=(v=g.split(".")).shift(),v.sort()),d=g.indexOf(":")<0&&"on"+g,(e=e[x.expando]?e:new x.Event(g,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:x.makeArray(t,[e]),p=x.event.special[g]||{},r||!p.trigger||!1!==p.trigger.apply(i,t))){if(!r&&!p.noBubble&&!b(i)){for(c=p.delegateType||g,bt.test(c+g)||(o=o.parentNode);o;o=o.parentNode)m.push(o),l=o;l===(i.ownerDocument||a)&&m.push(l.defaultView||l.parentWindow||n)}for(s=0;(o=m[s++])&&!e.isPropagationStopped();)f=o,e.type=s>1?c:p.bindType||g,(u=(J.get(o,"events")||{})[e.type]&&J.get(o,"handle"))&&u.apply(o,t),(u=d&&o[d])&&u.apply&&K(o)&&(e.result=u.apply(o,t),!1===e.result&&e.preventDefault());return e.type=g,r||e.isDefaultPrevented()||p._default&&!1!==p._default.apply(m.pop(),t)||!K(i)||d&&y(i[g])&&!b(i)&&((l=i[d])&&(i[d]=null),x.event.triggered=g,e.isPropagationStopped()&&f.addEventListener(g,wt),i[g](),e.isPropagationStopped()&&f.removeEventListener(g,wt),x.event.triggered=void 0,l&&(i[d]=l)),e.result}},simulate:function(e,t,n){var i=x.extend(new x.Event,n,{type:e,isSimulated:!0});x.event.trigger(i,null,t)}}),x.fn.extend({trigger:function(e,t){return this.each(function(){x.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return x.event.trigger(e,t,n,!0)}}),v.focusin||x.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){x.event.simulate(t,e.target,x.event.fix(e))};x.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=J.access(i,t);r||i.addEventListener(e,n,!0),J.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=J.access(i,t)-1;r?J.access(i,t,r):(i.removeEventListener(e,n,!0),J.remove(i,t))}}});var Et=n.location,Tt=Date.now(),xt=/\?/;x.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||x.error("Invalid XML: "+e),t};var Ct=/\[\]$/,St=/\r?\n/g,_t=/^(?:submit|button|image|reset|file)$/i,At=/^(?:input|select|textarea|keygen)/i;function Dt(e,t,n,i){var r;if(Array.isArray(t))x.each(t,function(t,r){n||Ct.test(e)?i(e,r):Dt(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==T(t))i(e,t);else for(r in t)Dt(e+"["+r+"]",t[r],n,i)}x.param=function(e,t){var n,i=[],r=function(e,t){var n=y(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!x.isPlainObject(e))x.each(e,function(){r(this.name,this.value)});else for(n in e)Dt(n,e[n],t,r);return i.join("&")},x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=x.prop(this,"elements");return e?x.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!x(this).is(":disabled")&&At.test(this.nodeName)&&!_t.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=x(this).val();return null==n?null:Array.isArray(n)?x.map(n,function(e){return{name:t.name,value:e.replace(St,"\r\n")}}):{name:t.name,value:n.replace(St,"\r\n")}}).get()}});var Ot=/%20/g,kt=/#.*$/,It=/([?&])_=[^&]*/,Nt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Mt=/^(?:GET|HEAD)$/,Lt=/^\/\//,$t={},Pt={},Ht="*/".concat("*"),zt=a.createElement("a");function jt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,s=t.toLowerCase().match(z)||[];if(y(n))for(;i=s[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Rt(e,t,n,i){var r={},s=e===Pt;function a(o){var l;return r[o]=!0,x.each(e[o]||[],function(e,o){var c=o(t,n,i);return"string"!=typeof c||s||r[c]?s?!(l=c):void 0:(t.dataTypes.unshift(c),a(c),!1)}),l}return a(t.dataTypes[0])||!r["*"]&&a("*")}function Wt(e,t){var n,i,r=x.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&x.extend(!0,e,i),e}zt.href=Et.href,x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Et.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Et.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ht,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":x.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Wt(Wt(e,x.ajaxSettings),t):Wt(x.ajaxSettings,e)},ajaxPrefilter:jt($t),ajaxTransport:jt(Pt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,r,s,o,l,c,d,u,p,f,h=x.ajaxSetup({},t),m=h.context||h,g=h.context&&(m.nodeType||m.jquery)?x(m):x.event,v=x.Deferred(),y=x.Callbacks("once memory"),b=h.statusCode||{},w={},E={},T="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(d){if(!o)for(o={};t=Nt.exec(s);)o[t[1].toLowerCase()]=t[2];t=o[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return d?s:null},setRequestHeader:function(e,t){return null==d&&(e=E[e.toLowerCase()]=E[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==d&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(d)C.always(e[C.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||T;return i&&i.abort(t),S(0,t),this}};if(v.promise(C),h.url=((e||h.url||Et.href)+"").replace(Lt,Et.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(z)||[""],null==h.crossDomain){c=a.createElement("a");try{c.href=h.url,c.href=c.href,h.crossDomain=zt.protocol+"//"+zt.host!=c.protocol+"//"+c.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=x.param(h.data,h.traditional)),Rt($t,h,t,C),d)return C;for(p in(u=x.event&&h.global)&&0==x.active++&&x.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Mt.test(h.type),r=h.url.replace(kt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Ot,"+")):(f=h.url.slice(r.length),h.data&&(h.processData||"string"==typeof h.data)&&(r+=(xt.test(r)?"&":"?")+h.data,delete h.data),!1===h.cache&&(r=r.replace(It,"$1"),f=(xt.test(r)?"&":"?")+"_="+Tt+++f),h.url=r+f),h.ifModified&&(x.lastModified[r]&&C.setRequestHeader("If-Modified-Since",x.lastModified[r]),x.etag[r]&&C.setRequestHeader("If-None-Match",x.etag[r])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&C.setRequestHeader("Content-Type",h.contentType),C.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Ht+"; q=0.01":""):h.accepts["*"]),h.headers)C.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(!1===h.beforeSend.call(m,C,h)||d))return C.abort();if(T="abort",y.add(h.complete),C.done(h.success),C.fail(h.error),i=Rt(Pt,h,t,C)){if(C.readyState=1,u&&g.trigger("ajaxSend",[C,h]),d)return C;h.async&&h.timeout>0&&(l=n.setTimeout(function(){C.abort("timeout")},h.timeout));try{d=!1,i.send(w,S)}catch(e){if(d)throw e;S(-1,e)}}else S(-1,"No Transport");function S(e,t,a,o){var c,p,f,w,E,T=t;d||(d=!0,l&&n.clearTimeout(l),i=void 0,s=o||"",C.readyState=e>0?4:0,c=e>=200&&e<300||304===e,a&&(w=function(e,t,n){for(var i,r,s,a,o=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in o)if(o[r]&&o[r].test(i)){l.unshift(r);break}if(l[0]in n)s=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){s=r;break}a||(a=r)}s=s||a}if(s)return s!==l[0]&&l.unshift(s),n[s]}(h,C,a)),w=function(e,t,n,i){var r,s,a,o,l,c={},d=e.dataTypes.slice();if(d[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(s=d.shift();s;)if(e.responseFields[s]&&(n[e.responseFields[s]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=s,s=d.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(a=c[l+" "+s]||c["* "+s]))for(r in c)if((o=r.split(" "))[1]===s&&(a=c[l+" "+o[0]]||c["* "+o[0]])){!0===a?a=c[r]:!0!==c[r]&&(s=o[0],d.unshift(o[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+s}}}return{state:"success",data:t}}(h,w,C,c),c?(h.ifModified&&((E=C.getResponseHeader("Last-Modified"))&&(x.lastModified[r]=E),(E=C.getResponseHeader("etag"))&&(x.etag[r]=E)),204===e||"HEAD"===h.type?T="nocontent":304===e?T="notmodified":(T=w.state,p=w.data,c=!(f=w.error))):(f=T,!e&&T||(T="error",e<0&&(e=0))),C.status=e,C.statusText=(t||T)+"",c?v.resolveWith(m,[p,T,C]):v.rejectWith(m,[C,T,f]),C.statusCode(b),b=void 0,u&&g.trigger(c?"ajaxSuccess":"ajaxError",[C,h,c?p:f]),y.fireWith(m,[C,T]),u&&(g.trigger("ajaxComplete",[C,h]),--x.active||x.event.trigger("ajaxStop")))}return C},getJSON:function(e,t,n){return x.get(e,t,n,"json")},getScript:function(e,t){return x.get(e,void 0,t,"script")}}),x.each(["get","post"],function(e,t){x[t]=function(e,n,i,r){return y(n)&&(r=r||i,i=n,n=void 0),x.ajax(x.extend({url:e,type:t,dataType:r,data:n,success:i},x.isPlainObject(e)&&e))}}),x._evalUrl=function(e){return x.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},x.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=x(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return y(e)?this.each(function(t){x(this).wrapInner(e.call(this,t))}):this.each(function(){var t=x(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=y(e);return this.each(function(n){x(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){x(this).replaceWith(this.childNodes)}),this}}),x.expr.pseudos.hidden=function(e){return!x.expr.pseudos.visible(e)},x.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},x.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Bt={0:200,1223:204},Ft=x.ajaxSettings.xhr();v.cors=!!Ft&&"withCredentials"in Ft,v.ajax=Ft=!!Ft,x.ajaxTransport(function(e){var t,i;if(v.cors||Ft&&!e.crossDomain)return{send:function(r,s){var a,o=e.xhr();if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)o[a]=e.xhrFields[a];for(a in e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)o.setRequestHeader(a,r[a]);t=function(e){return function(){t&&(t=i=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?s(0,"error"):s(o.status,o.statusText):s(Bt[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=t(),i=o.onerror=o.ontimeout=t("error"),void 0!==o.onabort?o.onabort=i:o.onreadystatechange=function(){4===o.readyState&&n.setTimeout(function(){t&&i()})},t=t("abort");try{o.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),x.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),x.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return x.globalEval(e),e}}}),x.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),x.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(i,r){t=x("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),a.head.appendChild(t[0])},abort:function(){n&&n()}}});var Vt,Gt=[],qt=/(=)\?(?=&|$)|\?\?/;x.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Gt.pop()||x.expando+"_"+Tt++;return this[e]=!0,e}}),x.ajaxPrefilter("json jsonp",function(e,t,i){var r,s,a,o=!1!==e.jsonp&&(qt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&qt.test(e.data)&&"data");if(o||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,o?e[o]=e[o].replace(qt,"$1"+r):!1!==e.jsonp&&(e.url+=(xt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return a||x.error(r+" was not called"),a[0]},e.dataTypes[0]="json",s=n[r],n[r]=function(){a=arguments},i.always(function(){void 0===s?x(n).removeProp(r):n[r]=s,e[r]&&(e.jsonpCallback=t.jsonpCallback,Gt.push(r)),a&&y(s)&&s(a[0]),a=s=void 0}),"script"}),v.createHTMLDocument=((Vt=a.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Vt.childNodes.length),x.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((i=(t=a.implementation.createHTMLDocument("")).createElement("base")).href=a.location.href,t.head.appendChild(i)):t=a),r=I.exec(e),s=!n&&[],r?[t.createElement(r[1])]:(r=Ee([e],t,s),s&&s.length&&x(s).remove(),x.merge([],r.childNodes)));var i,r,s},x.fn.load=function(e,t,n){var i,r,s,a=this,o=e.indexOf(" ");return o>-1&&(i=mt(e.slice(o)),e=e.slice(0,o)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),a.length>0&&x.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){s=arguments,a.html(i?x("<div>").append(x.parseHTML(e)).find(i):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,s||[e.responseText,t,e])})}),this},x.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){x.fn[t]=function(e){return this.on(t,e)}}),x.expr.pseudos.animated=function(e){return x.grep(x.timers,function(t){return e===t.elem}).length},x.offset={setOffset:function(e,t,n){var i,r,s,a,o,l,c=x.css(e,"position"),d=x(e),u={};"static"===c&&(e.style.position="relative"),o=d.offset(),s=x.css(e,"top"),l=x.css(e,"left"),("absolute"===c||"fixed"===c)&&(s+l).indexOf("auto")>-1?(a=(i=d.position()).top,r=i.left):(a=parseFloat(s)||0,r=parseFloat(l)||0),y(t)&&(t=t.call(e,n,x.extend({},o))),null!=t.top&&(u.top=t.top-o.top+a),null!=t.left&&(u.left=t.left-o.left+r),"using"in t?t.using.call(e,u):d.css(u)}},x.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){x.offset.setOffset(this,e,t)});var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===x.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===x.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=x(e).offset()).top+=x.css(e,"borderTopWidth",!0),r.left+=x.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-x.css(i,"marginTop",!0),left:t.left-r.left-x.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===x.css(e,"position");)e=e.offsetParent;return e||Te})}}),x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;x.fn[e]=function(i){return G(this,function(e,i,r){var s;if(b(e)?s=e:9===e.nodeType&&(s=e.defaultView),void 0===r)return s?s[t]:e[i];s?s.scrollTo(n?s.pageXOffset:r,n?r:s.pageYOffset):e[i]=r},e,i,arguments.length)}}),x.each(["top","left"],function(e,t){x.cssHooks[t]=Ve(v.pixelPosition,function(e,n){if(n)return n=Fe(e,t),Re.test(n)?x(e).position()[t]+"px":n})}),x.each({Height:"height",Width:"width"},function(e,t){x.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){x.fn[i]=function(r,s){var a=arguments.length&&(n||"boolean"!=typeof r),o=n||(!0===r||!0===s?"margin":"border");return G(this,function(t,n,r){var s;return b(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(s=t.documentElement,Math.max(t.body["scroll"+e],s["scroll"+e],t.body["offset"+e],s["offset"+e],s["client"+e])):void 0===r?x.css(t,n,o):x.style(t,n,r,o)},t,a?r:void 0,a)}})}),x.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){x.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),x.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),x.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),x.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return i=l.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(l.call(arguments)))}).guid=e.guid=e.guid||x.guid++,r},x.holdReady=function(e){e?x.readyWait++:x.ready(!0)},x.isArray=Array.isArray,x.parseJSON=JSON.parse,x.nodeName=k,x.isFunction=y,x.isWindow=b,x.camelCase=U,x.type=T,x.now=Date.now,x.isNumeric=function(e){var t=x.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(i=function(){return x}.apply(t,[]))||(e.exports=i);var Xt=n.jQuery,Yt=n.$;return x.noConflict=function(e){return n.$===x&&(n.$=Yt),e&&n.jQuery===x&&(n.jQuery=Xt),x},r||(n.jQuery=n.$=x),x})},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){!function(e){"use strict";var t={tagClass:function(e){return"label label-info"},itemValue:function(e){return e?e.toString():e},itemText:function(e){return this.itemValue(e)},itemTitle:function(e){return null},freeInput:!0,addOnBlur:!0,maxTags:void 0,maxChars:void 0,confirmKeys:[13,44],delimiter:",",delimiterRegex:null,cancelConfirmKeysOnEmpty:!1,onTagExists:function(e,t){t.hide().fadeIn()},trimValue:!1,allowDuplicates:!1};function n(t,n){this.isInit=!0,this.itemsArray=[],this.$element=e(t),this.$element.hide(),this.isSelect="SELECT"===t.tagName,this.multiple=this.isSelect&&t.hasAttribute("multiple"),this.objectItems=n&&n.itemValue,this.placeholderText=t.hasAttribute("placeholder")?this.$element.attr("placeholder"):"",this.inputSize=Math.max(1,this.placeholderText.length),this.$container=e('<div class="bootstrap-tagsinput"></div>'),this.$input=e('<input type="text" placeholder="'+this.placeholderText+'"/>').appendTo(this.$container),this.$element.before(this.$container),this.build(n),this.isInit=!1}function i(e,t){if("function"!=typeof e[t]){var n=e[t];e[t]=function(e){return e[n]}}}function r(e,t){if("function"!=typeof e[t]){var n=e[t];e[t]=function(){return n}}}n.prototype={constructor:n,add:function(t,n,i){var r=this;if(!(r.options.maxTags&&r.itemsArray.length>=r.options.maxTags)&&(!1===t||t)){if("string"==typeof t&&r.options.trimValue&&(t=e.trim(t)),"object"==typeof t&&!r.objectItems)throw"Can't add objects when itemValue option is not set";if(!t.toString().match(/^\s*$/)){if(r.isSelect&&!r.multiple&&r.itemsArray.length>0&&r.remove(r.itemsArray[0]),"string"==typeof t&&"INPUT"===this.$element[0].tagName){var s=r.options.delimiterRegex?r.options.delimiterRegex:r.options.delimiter,o=t.split(s);if(o.length>1){for(var l=0;l<o.length;l++)this.add(o[l],!0);return void(n||r.pushVal())}}var c=r.options.itemValue(t),d=r.options.itemText(t),u=r.options.tagClass(t),p=r.options.itemTitle(t),f=e.grep(r.itemsArray,function(e){return r.options.itemValue(e)===c})[0];if(!f||r.options.allowDuplicates){if(!(r.items().toString().length+t.length+1>r.options.maxInputLength)){var h=e.Event("beforeItemAdd",{item:t,cancel:!1,options:i});if(r.$element.trigger(h),!h.cancel){r.itemsArray.push(t);var m=e('<span class="tag '+a(u)+(null!==p?'" title="'+p:"")+'">'+a(d)+'<span data-role="remove"></span></span>');m.data("item",t),r.findInputWrapper().before(m),m.after(" ");var g=e('option[value="'+encodeURIComponent(c)+'"]',r.$element).length||e('option[value="'+a(c)+'"]',r.$element).length;if(r.isSelect&&!g){var v=e("<option selected>"+a(d)+"</option>");v.data("item",t),v.attr("value",c),r.$element.append(v)}n||r.pushVal(),r.options.maxTags!==r.itemsArray.length&&r.items().toString().length!==r.options.maxInputLength||r.$container.addClass("bootstrap-tagsinput-max"),e(".typeahead, .twitter-typeahead",r.$container).length&&r.$input.typeahead("val",""),this.isInit?r.$element.trigger(e.Event("itemAddedOnInit",{item:t,options:i})):r.$element.trigger(e.Event("itemAdded",{item:t,options:i}))}}}else if(r.options.onTagExists){var y=e(".tag",r.$container).filter(function(){return e(this).data("item")===f});r.options.onTagExists(t,y)}}}},remove:function(t,n,i){var r=this;if(r.objectItems&&(t=(t="object"==typeof t?e.grep(r.itemsArray,function(e){return r.options.itemValue(e)==r.options.itemValue(t)}):e.grep(r.itemsArray,function(e){return r.options.itemValue(e)==t}))[t.length-1]),t){var s=e.Event("beforeItemRemove",{item:t,cancel:!1,options:i});if(r.$element.trigger(s),s.cancel)return;e(".tag",r.$container).filter(function(){return e(this).data("item")===t}).remove(),e("option",r.$element).filter(function(){return e(this).data("item")===t}).remove(),-1!==e.inArray(t,r.itemsArray)&&r.itemsArray.splice(e.inArray(t,r.itemsArray),1)}n||r.pushVal(),r.options.maxTags>r.itemsArray.length&&r.$container.removeClass("bootstrap-tagsinput-max"),r.$element.trigger(e.Event("itemRemoved",{item:t,options:i}))},removeAll:function(){for(e(".tag",this.$container).remove(),e("option",this.$element).remove();this.itemsArray.length>0;)this.itemsArray.pop();this.pushVal()},refresh:function(){var t=this;e(".tag",t.$container).each(function(){var n=e(this),i=n.data("item"),r=t.options.itemValue(i),s=t.options.itemText(i),o=t.options.tagClass(i);(n.attr("class",null),n.addClass("tag "+a(o)),n.contents().filter(function(){return 3==this.nodeType})[0].nodeValue=a(s),t.isSelect)&&e("option",t.$element).filter(function(){return e(this).data("item")===i}).attr("value",r)})},items:function(){return this.itemsArray},pushVal:function(){var t=this,n=e.map(t.items(),function(e){return t.options.itemValue(e).toString()});t.$element.val(n,!0).trigger("change")},build:function(n){var s=this;if(s.options=e.extend({},t,n),s.objectItems&&(s.options.freeInput=!1),i(s.options,"itemValue"),i(s.options,"itemText"),r(s.options,"tagClass"),s.options.typeahead){var a=s.options.typeahead||{};r(a,"source"),s.$input.typeahead(e.extend({},a,{source:function(t,n){function i(e){for(var t=[],i=0;i<e.length;i++){var a=s.options.itemText(e[i]);r[a]=e[i],t.push(a)}n(t)}this.map={};var r=this.map,o=a.source(t);e.isFunction(o.success)?o.success(i):e.isFunction(o.then)?o.then(i):e.when(o).then(i)},updater:function(e){return s.add(this.map[e]),this.map[e]},matcher:function(e){return-1!==e.toLowerCase().indexOf(this.query.trim().toLowerCase())},sorter:function(e){return e.sort()},highlighter:function(e){var t=new RegExp("("+this.query+")","gi");return e.replace(t,"<strong>$1</strong>")}}))}if(s.options.typeaheadjs){var l=null,c={},d=s.options.typeaheadjs;e.isArray(d)?(l=d[0],c=d[1]):c=d,s.$input.typeahead(l,c).on("typeahead:selected",e.proxy(function(e,t){c.valueKey?s.add(t[c.valueKey]):s.add(t),s.$input.typeahead("val","")},s))}s.$container.on("click",e.proxy(function(e){s.$element.attr("disabled")||s.$input.removeAttr("disabled"),s.$input.focus()},s)),s.options.addOnBlur&&s.options.freeInput&&s.$input.on("focusout",e.proxy(function(t){0===e(".typeahead, .twitter-typeahead",s.$container).length&&(s.add(s.$input.val()),s.$input.val(""))},s)),s.$container.on("keydown","input",e.proxy(function(t){var n=e(t.target),i=s.findInputWrapper();if(s.$element.attr("disabled"))s.$input.attr("disabled","disabled");else{switch(t.which){case 8:if(0===o(n[0])){var r=i.prev();r.length&&s.remove(r.data("item"))}break;case 46:if(0===o(n[0])){var a=i.next();a.length&&s.remove(a.data("item"))}break;case 37:var l=i.prev();0===n.val().length&&l[0]&&(l.before(i),n.focus());break;case 39:var c=i.next();0===n.val().length&&c[0]&&(c.after(i),n.focus())}var d=n.val().length;Math.ceil(d/5);n.attr("size",Math.max(this.inputSize,n.val().length))}},s)),s.$container.on("keypress","input",e.proxy(function(t){var n=e(t.target);if(s.$element.attr("disabled"))s.$input.attr("disabled","disabled");else{var i,r,a,o=n.val(),l=s.options.maxChars&&o.length>=s.options.maxChars;s.options.freeInput&&(i=t,r=s.options.confirmKeys,a=!1,e.each(r,function(e,t){if("number"==typeof t&&i.which===t)return a=!0,!1;if(i.which===t.which){var n=!t.hasOwnProperty("altKey")||i.altKey===t.altKey,r=!t.hasOwnProperty("shiftKey")||i.shiftKey===t.shiftKey,s=!t.hasOwnProperty("ctrlKey")||i.ctrlKey===t.ctrlKey;if(n&&r&&s)return a=!0,!1}}),a||l)&&(0!==o.length&&(s.add(l?o.substr(0,s.options.maxChars):o),n.val("")),!1===s.options.cancelConfirmKeysOnEmpty&&t.preventDefault());var c=n.val().length;Math.ceil(c/5);n.attr("size",Math.max(this.inputSize,n.val().length))}},s)),s.$container.on("click","[data-role=remove]",e.proxy(function(t){s.$element.attr("disabled")||s.remove(e(t.target).closest(".tag").data("item"))},s)),s.options.itemValue===t.itemValue&&("INPUT"===s.$element[0].tagName?s.add(s.$element.val()):e("option",s.$element).each(function(){s.add(e(this).attr("value"),!0)}))},destroy:function(){this.$container.off("keypress","input"),this.$container.off("click","[role=remove]"),this.$container.remove(),this.$element.removeData("tagsinput"),this.$element.show()},focus:function(){this.$input.focus()},input:function(){return this.$input},findInputWrapper:function(){for(var t=this.$input[0],n=this.$container[0];t&&t.parentNode!==n;)t=t.parentNode;return e(t)}},e.fn.tagsinput=function(t,i,r){var s=[];return this.each(function(){var a=e(this).data("tagsinput");if(a)if(t||i){if(void 0!==a[t]){if(3===a[t].length&&void 0!==r)var o=a[t](i,null,r);else o=a[t](i);void 0!==o&&s.push(o)}}else s.push(a);else a=new n(this,t),e(this).data("tagsinput",a),s.push(a),"SELECT"===this.tagName&&e("option",e(this)).attr("selected","selected"),e(this).val(e(this).val())}),"string"==typeof t?s.length>1?s:s[0]:s},e.fn.tagsinput.Constructor=n;var s=e("<div />");function a(e){return e?s.text(e).html():""}function o(e){var t=0;if(document.selection){e.focus();var n=document.selection.createRange();n.moveStart("character",-e.value.length),t=n.text.length}else(e.selectionStart||"0"==e.selectionStart)&&(t=e.selectionStart);return t}e(function(){e("input[data-role=tagsinput], select[multiple][data-role=tagsinput]").tagsinput()})}(window.jQuery)},function(e,t,n){"use strict";n.r(t);n(3),n(1),n(6);var i=function(){},r={},s={},a=null,o={mark:i,measure:i};try{"undefined"!=typeof window&&(r=window),"undefined"!=typeof document&&(s=document),"undefined"!=typeof MutationObserver&&(a=MutationObserver),"undefined"!=typeof performance&&(o=performance)}catch(e){}var l=(r.navigator||{}).userAgent,c=void 0===l?"":l,d=r,u=s,p=a,f=o,h=!!d.document,m=!!u.documentElement&&!!u.head&&"function"==typeof u.addEventListener&&"function"==typeof u.createElement,g=~c.indexOf("MSIE")||~c.indexOf("Trident/"),v=16,y="data-fa-i2svg",b="data-fa-pseudo-element",w="fontawesome-i2svg",E=function(){try{return!0}catch(e){return!1}}(),T=[1,2,3,4,5,6,7,8,9,10],x=T.concat([11,12,13,14,15,16,17,18,19,20]),C=["class","data-prefix","data-icon","data-fa-transform","data-fa-mask"],S=["xs","sm","lg","fw","ul","li","border","pull-left","pull-right","spin","pulse","rotate-90","rotate-180","rotate-270","flip-horizontal","flip-vertical","stack","stack-1x","stack-2x","inverse","layers","layers-text","layers-counter"].concat(T.map(function(e){return e+"x"})).concat(x.map(function(e){return"w-"+e})),_=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},A=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),D=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},O=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},k=d.FontAwesomeConfig||{},I=Object.keys(k),N=D({familyPrefix:"fa",replacementClass:"svg-inline--fa",autoReplaceSvg:!0,autoAddCss:!0,autoA11y:!0,searchPseudoElements:!1,observeMutations:!0,keepOriginalSource:!0,measurePerformance:!1,showMissingIcons:!0},k);N.autoReplaceSvg||(N.observeMutations=!1);var M=D({},N);function L(e){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).asNewDefault,n=void 0!==t&&t,i=Object.keys(M),r=n?function(e){return~i.indexOf(e)&&!~I.indexOf(e)}:function(e){return~i.indexOf(e)};Object.keys(e).forEach(function(t){r(t)&&(M[t]=e[t])})}d.FontAwesomeConfig=M;var P=d||{};P.___FONT_AWESOME___||(P.___FONT_AWESOME___={}),P.___FONT_AWESOME___.styles||(P.___FONT_AWESOME___.styles={}),P.___FONT_AWESOME___.hooks||(P.___FONT_AWESOME___.hooks={}),P.___FONT_AWESOME___.shims||(P.___FONT_AWESOME___.shims=[]);var H=P.___FONT_AWESOME___,z=[],j=!1;m&&((j=(u.documentElement.doScroll?/^loaded|^c/:/^loaded|^i|^c/).test(u.readyState))||u.addEventListener("DOMContentLoaded",function e(){u.removeEventListener("DOMContentLoaded",e),j=1,z.map(function(e){return e()})}));var R=function(e){m&&(j?setTimeout(e,0):z.push(e))},W=v,B={size:16,x:0,y:0,rotate:0,flipX:!1,flipY:!1};function F(e){if(e&&m){var t=u.createElement("style");t.setAttribute("type","text/css"),t.innerHTML=e;for(var n=u.head.childNodes,i=null,r=n.length-1;r>-1;r--){var s=n[r],a=(s.tagName||"").toUpperCase();["STYLE","LINK"].indexOf(a)>-1&&(i=s)}return u.head.insertBefore(t,i),e}}var V=0;function G(){return++V}function q(e){for(var t=[],n=(e||[]).length>>>0;n--;)t[n]=e[n];return t}function X(e){return e.classList?q(e.classList):(e.getAttribute("class")||"").split(" ").filter(function(e){return e})}function Y(e,t){var n,i=t.split("-"),r=i[0],s=i.slice(1).join("-");return r!==e||""===s||(n=s,~S.indexOf(n))?null:s}function U(e){return(""+e).replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function K(e){return Object.keys(e||{}).reduce(function(t,n){return t+(n+": ")+e[n]+";"},"")}function Q(e){return e.size!==B.size||e.x!==B.x||e.y!==B.y||e.rotate!==B.rotate||e.flipX||e.flipY}function J(e){var t=e.transform,n=e.containerWidth,i=e.iconWidth;return{outer:{transform:"translate("+n/2+" 256)"},inner:{transform:"translate("+32*t.x+", "+32*t.y+") "+" "+("scale("+t.size/16*(t.flipX?-1:1)+", "+t.size/16*(t.flipY?-1:1)+") ")+" "+("rotate("+t.rotate+" 0 0)")},path:{transform:"translate("+i/2*-1+" -256)"}}}var Z={x:0,y:0,width:"100%",height:"100%"},ee=function(e){var t=e.children,n=e.attributes,i=e.main,r=e.mask,s=e.transform,a=i.width,o=i.icon,l=r.width,c=r.icon,d=J({transform:s,containerWidth:l,iconWidth:a}),u={tag:"rect",attributes:D({},Z,{fill:"white"})},p={tag:"g",attributes:D({},d.inner),children:[{tag:"path",attributes:D({},o.attributes,d.path,{fill:"black"})}]},f={tag:"g",attributes:D({},d.outer),children:[p]},h="mask-"+G(),m="clip-"+G(),g={tag:"defs",children:[{tag:"clipPath",attributes:{id:m},children:[c]},{tag:"mask",attributes:D({},Z,{id:h,maskUnits:"userSpaceOnUse",maskContentUnits:"userSpaceOnUse"}),children:[u,f]}]};return t.push(g,{tag:"rect",attributes:D({fill:"currentColor","clip-path":"url(#"+m+")",mask:"url(#"+h+")"},Z)}),{children:t,attributes:n}},te=function(e){var t=e.children,n=e.attributes,i=e.main,r=e.transform,s=K(e.styles);if(s.length>0&&(n.style=s),Q(r)){var a=J({transform:r,containerWidth:i.width,iconWidth:i.width});t.push({tag:"g",attributes:D({},a.outer),children:[{tag:"g",attributes:D({},a.inner),children:[{tag:i.icon.tag,children:i.icon.children,attributes:D({},i.icon.attributes,a.path)}]}]})}else t.push(i.icon);return{children:t,attributes:n}},ne=function(e){var t=e.children,n=e.main,i=e.mask,r=e.attributes,s=e.styles,a=e.transform;if(Q(a)&&n.found&&!i.found){var o={x:n.width/n.height/2,y:.5};r.style=K(D({},s,{"transform-origin":o.x+a.x/16+"em "+(o.y+a.y/16)+"em"}))}return[{tag:"svg",attributes:r,children:t}]},ie=function(e){var t=e.prefix,n=e.iconName,i=e.children,r=e.attributes,s=e.symbol,a=!0===s?t+"-"+M.familyPrefix+"-"+n:s;return[{tag:"svg",attributes:{style:"display: none;"},children:[{tag:"symbol",attributes:D({},r,{id:a}),children:i}]}]};function re(e){var t=e.icons,n=t.main,i=t.mask,r=e.prefix,s=e.iconName,a=e.transform,o=e.symbol,l=e.title,c=e.extra,d=e.watchable,u=void 0!==d&&d,p=i.found?i:n,f=p.width,h=p.height,m="fa-w-"+Math.ceil(f/h*16),g=[M.replacementClass,s?M.familyPrefix+"-"+s:"",m].concat(c.classes).join(" "),v={children:[],attributes:D({},c.attributes,{"data-prefix":r,"data-icon":s,class:g,role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 "+f+" "+h})};u&&(v.attributes[y]=""),l&&v.children.push({tag:"title",attributes:{id:v.attributes["aria-labelledby"]||"title-"+G()},children:[l]});var b=D({},v,{prefix:r,iconName:s,main:n,mask:i,transform:a,symbol:o,styles:c.styles}),w=i.found&&n.found?ee(b):te(b),E=w.children,T=w.attributes;return b.children=E,b.attributes=T,o?ie(b):ne(b)}function se(e){var t=e.content,n=e.width,i=e.height,r=e.transform,s=e.title,a=e.extra,o=e.watchable,l=void 0!==o&&o,c=D({},a.attributes,s?{title:s}:{},{class:a.classes.join(" ")});l&&(c[y]="");var d=D({},a.styles);Q(r)&&(d.transform=function(e){var t=e.transform,n=e.width,i=void 0===n?v:n,r=e.height,s=void 0===r?v:r,a=e.startCentered,o=void 0!==a&&a,l="";return l+=o&&g?"translate("+(t.x/W-i/2)+"em, "+(t.y/W-s/2)+"em) ":o?"translate(calc(-50% + "+t.x/W+"em), calc(-50% + "+t.y/W+"em)) ":"translate("+t.x/W+"em, "+t.y/W+"em) ",l+="scale("+t.size/W*(t.flipX?-1:1)+", "+t.size/W*(t.flipY?-1:1)+") ",l+="rotate("+t.rotate+"deg) "}({transform:r,startCentered:!0,width:n,height:i}),d["-webkit-transform"]=d.transform);var u=K(d);u.length>0&&(c.style=u);var p=[];return p.push({tag:"span",attributes:c,children:[t]}),s&&p.push({tag:"span",attributes:{class:"sr-only"},children:[s]}),p}var ae=function(){},oe=M.measurePerformance&&f&&f.mark&&f.measure?f:{mark:ae,measure:ae},le=function(e){oe.mark('FA "5.0.9" '+e+" ends"),oe.measure('FA "5.0.9" '+e,'FA "5.0.9" '+e+" begins",'FA "5.0.9" '+e+" ends")},ce={begin:function(e){return oe.mark('FA "5.0.9" '+e+" begins"),function(){return le(e)}},end:le},de=function(e,t,n,i){var r,s,a,o=Object.keys(e),l=o.length,c=void 0!==i?function(e,t){return function(n,i,r,s){return e.call(t,n,i,r,s)}}(t,i):t;for(void 0===n?(r=1,a=e[o[0]]):(r=0,a=n);r<l;r++)a=c(a,e[s=o[r]],s,e);return a},ue=H.styles,pe=H.shims,fe={},he={},me={},ge=function(){var e=function(e){return de(ue,function(t,n,i){return t[i]=de(n,e,{}),t},{})};fe=e(function(e,t,n){return e[t[3]]=n,e}),he=e(function(e,t,n){var i=t[2];return e[n]=n,i.forEach(function(t){e[t]=n}),e});var t="far"in ue;me=de(pe,function(e,n){var i=n[0],r=n[1],s=n[2];return"far"!==r||t||(r="fas"),e[i]={prefix:r,iconName:s},e},{})};ge();var ve=H.styles,ye=function(){return{prefix:null,iconName:null,rest:[]}};function be(e){return e.reduce(function(e,t){var n=Y(M.familyPrefix,t);if(ve[t])e.prefix=t;else if(n){var i="fa"===e.prefix?me[n]||{prefix:null,iconName:null}:{};e.iconName=i.iconName||n,e.prefix=i.prefix||e.prefix}else t!==M.replacementClass&&0!==t.indexOf("fa-w-")&&e.rest.push(t);return e},ye())}function we(e,t,n){if(e&&e[t]&&e[t][n])return{prefix:t,iconName:n,icon:e[t][n]}}function Ee(e){var t=e.tag,n=e.attributes,i=void 0===n?{}:n,r=e.children,s=void 0===r?[]:r;return"string"==typeof e?U(e):"<"+t+" "+function(e){return Object.keys(e||{}).reduce(function(t,n){return t+(n+'="')+U(e[n])+'" '},"").trim()}(i)+">"+s.map(Ee).join("")+"</"+t+">"}var Te=function(){};function xe(e){return"string"==typeof(e.getAttribute?e.getAttribute(y):null)}var Ce={replace:function(e){var t=e[0],n=e[1].map(function(e){return Ee(e)}).join("\n");if(t.parentNode&&t.outerHTML)t.outerHTML=n+(M.keepOriginalSource&&"svg"!==t.tagName.toLowerCase()?"\x3c!-- "+t.outerHTML+" --\x3e":"");else if(t.parentNode){var i=document.createElement("span");t.parentNode.replaceChild(i,t),i.outerHTML=n}},nest:function(e){var t=e[0],n=e[1];if(~X(t).indexOf(M.replacementClass))return Ce.replace(e);var i=new RegExp(M.familyPrefix+"-.*");delete n[0].attributes.style;var r=n[0].attributes.class.split(" ").reduce(function(e,t){return t===M.replacementClass||t.match(i)?e.toSvg.push(t):e.toNode.push(t),e},{toNode:[],toSvg:[]});n[0].attributes.class=r.toSvg.join(" ");var s=n.map(function(e){return Ee(e)}).join("\n");t.setAttribute("class",r.toNode.join(" ")),t.setAttribute(y,""),t.innerHTML=s}};function Se(e,t){var n="function"==typeof t?t:Te;0===e.length?n():(d.requestAnimationFrame||function(e){return e()})(function(){var t=!0===M.autoReplaceSvg?Ce.replace:Ce[M.autoReplaceSvg]||Ce.replace,i=ce.begin("mutate");e.map(t),i(),n()})}var _e=!1;var Ae=null;var De=function(e){var t=e.getAttribute("style"),n=[];return t&&(n=t.split(";").reduce(function(e,t){var n=t.split(":"),i=n[0],r=n.slice(1);return i&&r.length>0&&(e[i]=r.join(":").trim()),e},{})),n};var Oe=function(e){var t,n,i=e.getAttribute("data-prefix"),r=e.getAttribute("data-icon"),s=void 0!==e.innerText?e.innerText.trim():"",a=be(X(e));return i&&r&&(a.prefix=i,a.iconName=r),a.prefix&&s.length>1?a.iconName=(t=a.prefix,n=e.innerText,he[t][n]):a.prefix&&1===s.length&&(a.iconName=function(e,t){return fe[e][t]}(a.prefix,function(e){for(var t="",n=0;n<e.length;n++)t+=("000"+e.charCodeAt(n).toString(16)).slice(-4);return t}(e.innerText))),a},ke=function(e){var t={size:16,x:0,y:0,flipX:!1,flipY:!1,rotate:0};return e?e.toLowerCase().split(" ").reduce(function(e,t){var n=t.toLowerCase().split("-"),i=n[0],r=n.slice(1).join("-");if(i&&"h"===r)return e.flipX=!0,e;if(i&&"v"===r)return e.flipY=!0,e;if(r=parseFloat(r),isNaN(r))return e;switch(i){case"grow":e.size=e.size+r;break;case"shrink":e.size=e.size-r;break;case"left":e.x=e.x-r;break;case"right":e.x=e.x+r;break;case"up":e.y=e.y-r;break;case"down":e.y=e.y+r;break;case"rotate":e.rotate=e.rotate+r}return e},t):t},Ie=function(e){return ke(e.getAttribute("data-fa-transform"))},Ne=function(e){var t=e.getAttribute("data-fa-symbol");return null!==t&&(""===t||t)},Me=function(e){var t=q(e.attributes).reduce(function(e,t){return"class"!==e.name&&"style"!==e.name&&(e[t.name]=t.value),e},{}),n=e.getAttribute("title");return M.autoA11y&&(n?t["aria-labelledby"]=M.replacementClass+"-title-"+G():t["aria-hidden"]="true"),t},Le=function(e){var t=e.getAttribute("data-fa-mask");return t?be(t.split(" ").map(function(e){return e.trim()})):ye()};function $e(e){this.name="MissingIcon",this.message=e||"Icon unavailable",this.stack=(new Error).stack}$e.prototype=Object.create(Error.prototype),$e.prototype.constructor=$e;var Pe={fill:"currentColor"},He={attributeType:"XML",repeatCount:"indefinite",dur:"2s"},ze={tag:"path",attributes:D({},Pe,{d:"M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z"})},je=D({},He,{attributeName:"opacity"}),Re={tag:"g",children:[ze,{tag:"circle",attributes:D({},Pe,{cx:"256",cy:"364",r:"28"}),children:[{tag:"animate",attributes:D({},He,{attributeName:"r",values:"28;14;28;28;14;28;"})},{tag:"animate",attributes:D({},je,{values:"1;0;1;1;0;1;"})}]},{tag:"path",attributes:D({},Pe,{opacity:"1",d:"M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z"}),children:[{tag:"animate",attributes:D({},je,{values:"1;0;0;0;0;1;"})}]},{tag:"path",attributes:D({},Pe,{opacity:"0",d:"M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z"}),children:[{tag:"animate",attributes:D({},je,{values:"0;0;1;1;0;0;"})}]}]},We=H.styles,Be="fa-layers-text",Fe=/Font Awesome 5 (Solid|Regular|Light|Brands)/,Ve={Solid:"fas",Regular:"far",Light:"fal",Brands:"fab"};function Ge(e,t){var n={found:!1,width:512,height:512,icon:Re};if(e&&t&&We[t]&&We[t][e]){var i=We[t][e];n={found:!0,width:i[0],height:i[1],icon:{tag:"path",attributes:{fill:"currentColor",d:i.slice(4)[0]}}}}else if(e&&t&&!M.showMissingIcons)throw new $e("Icon is missing for prefix "+t+" with icon name "+e);return n}function qe(e){var t=function(e){var t=Oe(e),n=t.iconName,i=t.prefix,r=t.rest,s=De(e),a=Ie(e),o=Ne(e),l=Me(e),c=Le(e);return{iconName:n,title:e.getAttribute("title"),prefix:i,transform:a,symbol:o,mask:c,extra:{classes:r,styles:s,attributes:l}}}(e);return~t.extra.classes.indexOf(Be)?function(e,t){var n=t.title,i=t.transform,r=t.extra,s=null,a=null;if(g){var o=parseInt(getComputedStyle(e).fontSize,10),l=e.getBoundingClientRect();s=l.width/o,a=l.height/o}return M.autoA11y&&!n&&(r.attributes["aria-hidden"]="true"),[e,se({content:e.innerHTML,width:s,height:a,transform:i,title:n,extra:r,watchable:!0})]}(e,t):function(e,t){var n=t.iconName,i=t.title,r=t.prefix,s=t.transform,a=t.symbol,o=t.mask,l=t.extra;return[e,re({icons:{main:Ge(n,r),mask:Ge(o.iconName,o.prefix)},prefix:r,iconName:n,transform:s,symbol:a,mask:o,title:i,extra:l,watchable:!0})]}(e,t)}function Xe(e){"function"==typeof e.remove?e.remove():e&&e.parentNode&&e.parentNode.removeChild(e)}function Ye(e){if(m){var t=ce.begin("searchPseudoElements");_e=!0,function(){q(e.querySelectorAll("*")).forEach(function(e){[":before",":after"].forEach(function(t){var n=d.getComputedStyle(e,t),i=n.getPropertyValue("font-family").match(Fe),r=q(e.children).filter(function(e){return e.getAttribute(b)===t})[0];if(r&&(r.nextSibling&&r.nextSibling.textContent.indexOf(b)>-1&&Xe(r.nextSibling),Xe(r),r=null),i&&!r){var s=n.getPropertyValue("content"),a=u.createElement("i");a.setAttribute("class",""+Ve[i[1]]),a.setAttribute(b,t),a.innerText=3===s.length?s.substr(1,1):s,":before"===t?e.insertBefore(a,e.firstChild):e.appendChild(a)}})})}(),_e=!1,t()}}function Ue(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(m){var n=u.documentElement.classList,i=function(e){return n.add(w+"-"+e)},r=function(e){return n.remove(w+"-"+e)},s=Object.keys(We),a=["."+Be+":not(["+y+"])"].concat(s.map(function(e){return"."+e+":not(["+y+"])"})).join(", ");if(0!==a.length){var o=q(e.querySelectorAll(a));if(o.length>0){i("pending"),r("complete");var l=ce.begin("onTree"),c=o.reduce(function(e,t){try{var n=qe(t);n&&e.push(n)}catch(e){E||e instanceof $e&&console.error(e)}return e},[]);l(),Se(c,function(){i("active"),i("complete"),r("pending"),"function"==typeof t&&t()})}}}}function Ke(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=qe(e);n&&Se([n],t)}var Qe=function(){var e="svg-inline--fa",t=M.familyPrefix,n=M.replacementClass,i='svg:not(:root).svg-inline--fa {\n  overflow: visible; }\n\n.svg-inline--fa {\n  display: inline-block;\n  font-size: inherit;\n  height: 1em;\n  overflow: visible;\n  vertical-align: -.125em; }\n  .svg-inline--fa.fa-lg {\n    vertical-align: -.225em; }\n  .svg-inline--fa.fa-w-1 {\n    width: 0.0625em; }\n  .svg-inline--fa.fa-w-2 {\n    width: 0.125em; }\n  .svg-inline--fa.fa-w-3 {\n    width: 0.1875em; }\n  .svg-inline--fa.fa-w-4 {\n    width: 0.25em; }\n  .svg-inline--fa.fa-w-5 {\n    width: 0.3125em; }\n  .svg-inline--fa.fa-w-6 {\n    width: 0.375em; }\n  .svg-inline--fa.fa-w-7 {\n    width: 0.4375em; }\n  .svg-inline--fa.fa-w-8 {\n    width: 0.5em; }\n  .svg-inline--fa.fa-w-9 {\n    width: 0.5625em; }\n  .svg-inline--fa.fa-w-10 {\n    width: 0.625em; }\n  .svg-inline--fa.fa-w-11 {\n    width: 0.6875em; }\n  .svg-inline--fa.fa-w-12 {\n    width: 0.75em; }\n  .svg-inline--fa.fa-w-13 {\n    width: 0.8125em; }\n  .svg-inline--fa.fa-w-14 {\n    width: 0.875em; }\n  .svg-inline--fa.fa-w-15 {\n    width: 0.9375em; }\n  .svg-inline--fa.fa-w-16 {\n    width: 1em; }\n  .svg-inline--fa.fa-w-17 {\n    width: 1.0625em; }\n  .svg-inline--fa.fa-w-18 {\n    width: 1.125em; }\n  .svg-inline--fa.fa-w-19 {\n    width: 1.1875em; }\n  .svg-inline--fa.fa-w-20 {\n    width: 1.25em; }\n  .svg-inline--fa.fa-pull-left {\n    margin-right: .3em;\n    width: auto; }\n  .svg-inline--fa.fa-pull-right {\n    margin-left: .3em;\n    width: auto; }\n  .svg-inline--fa.fa-border {\n    height: 1.5em; }\n  .svg-inline--fa.fa-li {\n    width: 2em; }\n  .svg-inline--fa.fa-fw {\n    width: 1.25em; }\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0; }\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -.125em;\n  width: 1em; }\n  .fa-layers svg.svg-inline--fa {\n    -webkit-transform-origin: center center;\n            transform-origin: center center; }\n\n.fa-layers-text, .fa-layers-counter {\n  display: inline-block;\n  position: absolute;\n  text-align: center; }\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  -webkit-transform-origin: center center;\n          transform-origin: center center; }\n\n.fa-layers-counter {\n  background-color: #ff253a;\n  border-radius: 1em;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: #fff;\n  height: 1.5em;\n  line-height: 1;\n  max-width: 5em;\n  min-width: 1.5em;\n  overflow: hidden;\n  padding: .25em;\n  right: 0;\n  text-overflow: ellipsis;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right; }\n\n.fa-layers-bottom-right {\n  bottom: 0;\n  right: 0;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom right;\n          transform-origin: bottom right; }\n\n.fa-layers-bottom-left {\n  bottom: 0;\n  left: 0;\n  right: auto;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom left;\n          transform-origin: bottom left; }\n\n.fa-layers-top-right {\n  right: 0;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right; }\n\n.fa-layers-top-left {\n  left: 0;\n  right: auto;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top left;\n          transform-origin: top left; }\n\n.fa-lg {\n  font-size: 1.33333em;\n  line-height: 0.75em;\n  vertical-align: -.0667em; }\n\n.fa-xs {\n  font-size: .75em; }\n\n.fa-sm {\n  font-size: .875em; }\n\n.fa-1x {\n  font-size: 1em; }\n\n.fa-2x {\n  font-size: 2em; }\n\n.fa-3x {\n  font-size: 3em; }\n\n.fa-4x {\n  font-size: 4em; }\n\n.fa-5x {\n  font-size: 5em; }\n\n.fa-6x {\n  font-size: 6em; }\n\n.fa-7x {\n  font-size: 7em; }\n\n.fa-8x {\n  font-size: 8em; }\n\n.fa-9x {\n  font-size: 9em; }\n\n.fa-10x {\n  font-size: 10em; }\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em; }\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: 2.5em;\n  padding-left: 0; }\n  .fa-ul > li {\n    position: relative; }\n\n.fa-li {\n  left: -2em;\n  position: absolute;\n  text-align: center;\n  width: 2em;\n  line-height: inherit; }\n\n.fa-border {\n  border: solid 0.08em #eee;\n  border-radius: .1em;\n  padding: .2em .25em .15em; }\n\n.fa-pull-left {\n  float: left; }\n\n.fa-pull-right {\n  float: right; }\n\n.fa.fa-pull-left,\n.fas.fa-pull-left,\n.far.fa-pull-left,\n.fal.fa-pull-left,\n.fab.fa-pull-left {\n  margin-right: .3em; }\n\n.fa.fa-pull-right,\n.fas.fa-pull-right,\n.far.fa-pull-right,\n.fal.fa-pull-right,\n.fab.fa-pull-right {\n  margin-left: .3em; }\n\n.fa-spin {\n  -webkit-animation: fa-spin 2s infinite linear;\n          animation: fa-spin 2s infinite linear; }\n\n.fa-pulse {\n  -webkit-animation: fa-spin 1s infinite steps(8);\n          animation: fa-spin 1s infinite steps(8); }\n\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n.fa-rotate-90 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=1)";\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg); }\n\n.fa-rotate-180 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg); }\n\n.fa-rotate-270 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=3)";\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg); }\n\n.fa-flip-horizontal {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)";\n  -webkit-transform: scale(-1, 1);\n          transform: scale(-1, 1); }\n\n.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(1, -1);\n          transform: scale(1, -1); }\n\n.fa-flip-horizontal.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1); }\n\n:root .fa-rotate-90,\n:root .fa-rotate-180,\n:root .fa-rotate-270,\n:root .fa-flip-horizontal,\n:root .fa-flip-vertical {\n  -webkit-filter: none;\n          filter: none; }\n\n.fa-stack {\n  display: inline-block;\n  height: 2em;\n  position: relative;\n  width: 2em; }\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0; }\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1em; }\n\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2em; }\n\n.fa-inverse {\n  color: #fff; }\n\n.sr-only {\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px; }\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  clip: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  position: static;\n  width: auto; }\n';if("fa"!==t||n!==e){var r=new RegExp("\\.fa\\-","g"),s=new RegExp("\\."+e,"g");i=i.replace(r,"."+t+"-").replace(s,"."+n)}return i};function Je(e){return{found:!0,width:e[0],height:e[1],icon:{tag:"path",attributes:{fill:"currentColor",d:e.slice(4)[0]}}}}var Ze=!1;function et(){M.autoAddCss&&(Ze||F(Qe()),Ze=!0)}function tt(e,t){return Object.defineProperty(e,"abstract",{get:t}),Object.defineProperty(e,"html",{get:function(){return e.abstract.map(function(e){return Ee(e)})}}),Object.defineProperty(e,"node",{get:function(){if(m){var t=u.createElement("div");return t.innerHTML=e.html,t.children}}}),e}function nt(e){var t=e.prefix,n=void 0===t?"fa":t,i=e.iconName;if(i)return we(it.definitions,n,i)||we(H.styles,n,i)}var it=new(function(){function e(){_(this,e),this.definitions={}}return A(e,[{key:"add",value:function(){for(var e=this,t=arguments.length,n=Array(t),i=0;i<t;i++)n[i]=arguments[i];var r=n.reduce(this._pullDefinitions,{});Object.keys(r).forEach(function(t){e.definitions[t]=D({},e.definitions[t]||{},r[t]),function e(t,n){var i=Object.keys(n).reduce(function(e,t){var i=n[t];return i.icon?e[i.iconName]=i.icon:e[t]=i,e},{});"function"==typeof H.hooks.addPack?H.hooks.addPack(t,i):H.styles[t]=D({},H.styles[t]||{},i),"fas"===t&&e("fa",n)}(t,r[t])})}},{key:"reset",value:function(){this.definitions={}}},{key:"_pullDefinitions",value:function(e,t){var n=t.prefix&&t.iconName&&t.icon?{0:t}:t;return Object.keys(n).map(function(t){var i=n[t],r=i.prefix,s=i.iconName,a=i.icon;e[r]||(e[r]={}),e[r][s]=a}),e}}]),e}()),rt={i2svg:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(m){et();var t=e.node,n=void 0===t?u:t,i=e.callback,r=void 0===i?function(){}:i;M.searchPseudoElements&&Ye(n),Ue(n,r)}},css:Qe,insertCss:function(){F(Qe())}},st={transform:function(e){return ke(e)}},at=function(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=(t||{}).icon?t:nt(t||{}),r=n.mask;return r&&(r=(r||{}).icon?r:nt(r||{})),e(i,D({},n,{mask:r}))}}(function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.transform,i=void 0===n?B:n,r=t.symbol,s=void 0!==r&&r,a=t.mask,o=void 0===a?null:a,l=t.title,c=void 0===l?null:l,d=t.classes,u=void 0===d?[]:d,p=t.attributes,f=void 0===p?{}:p,h=t.styles,m=void 0===h?{}:h;if(e){var g=e.prefix,v=e.iconName,y=e.icon;return tt(D({type:"icon"},e),function(){return et(),M.autoA11y&&(c?f["aria-labelledby"]=M.replacementClass+"-title-"+G():f["aria-hidden"]="true"),re({icons:{main:Je(y),mask:o?Je(o.icon):{found:!1,width:null,height:null,icon:{}}},prefix:g,iconName:v,transform:D({},B,i),symbol:s,title:c,extra:{attributes:f,styles:m,classes:u}})})}}),ot={noAuto:function(){var e;L({autoReplaceSvg:e=!1,observeMutations:e}),Ae&&Ae.disconnect()},dom:rt,library:it,parse:st,findIconDefinition:nt,icon:at,text:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.transform,i=void 0===n?B:n,r=t.title,s=void 0===r?null:r,a=t.classes,o=void 0===a?[]:a,l=t.attributes,c=void 0===l?{}:l,d=t.styles,u=void 0===d?{}:d;return tt({type:"text",content:e},function(){return et(),se({content:e,transform:D({},B,i),title:s,extra:{attributes:c,styles:u,classes:[M.familyPrefix+"-layers-text"].concat(O(o))}})})},layer:function(e){return tt({type:"layer"},function(){et();var t=[];return e(function(e){Array.isArray(e)?e.map(function(e){t=t.concat(e.abstract)}):t=t.concat(e.abstract)}),[{tag:"span",attributes:{class:M.familyPrefix+"-layers"},children:t}]})}},lt=function(){m&&M.autoReplaceSvg&&ot.dom.i2svg({node:u})};Object.defineProperty(ot,"config",{get:function(){return M},set:function(e){L(e)}}),m&&function(e){try{e()}catch(e){if(!E)throw e}}(function(){h&&(d.FontAwesome||(d.FontAwesome=ot),R(function(){Object.keys(H.styles).length>0&&lt(),M.observeMutations&&"function"==typeof MutationObserver&&function(e){if(p){var t=e.treeCallback,n=e.nodeCallback,i=e.pseudoElementsCallback;Ae=new p(function(e){_e||q(e).forEach(function(e){if("childList"===e.type&&e.addedNodes.length>0&&!xe(e.addedNodes[0])&&(M.searchPseudoElements&&i(e.target),t(e.target)),"attributes"===e.type&&e.target.parentNode&&M.searchPseudoElements&&i(e.target.parentNode),"attributes"===e.type&&xe(e.target)&&~C.indexOf(e.attributeName))if("class"===e.attributeName){var r=be(X(e.target)),s=r.prefix,a=r.iconName;s&&e.target.setAttribute("data-prefix",s),a&&e.target.setAttribute("data-icon",a)}else n(e.target)})}),m&&Ae.observe(u.getElementsByTagName("body")[0],{childList:!0,attributes:!0,characterData:!0,subtree:!0})}}({treeCallback:Ue,nodeCallback:Ke,pseudoElementsCallback:Ye})})),H.hooks=D({},H.hooks,{addPack:function(e,t){H.styles[e]=D({},H.styles[e]||{},t),ge(),lt()},addShims:function(e){var t;(t=H.shims).push.apply(t,O(e)),ge(),lt()}})});ot.config;var ct="undefined"==typeof document?{body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},location:{hash:""}}:document,dt="undefined"==typeof window?{document:ct,navigator:{userAgent:""},location:{},history:{},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){}}:window;class ut{constructor(e){const t=this;for(let n=0;n<e.length;n+=1)t[n]=e[n];return t.length=e.length,this}}function pt(e,t){const n=[];let i=0;if(e&&!t&&e instanceof ut)return e;if(e)if("string"==typeof e){let r,s;const a=e.trim();if(a.indexOf("<")>=0&&a.indexOf(">")>=0){let e="div";for(0===a.indexOf("<li")&&(e="ul"),0===a.indexOf("<tr")&&(e="tbody"),0!==a.indexOf("<td")&&0!==a.indexOf("<th")||(e="tr"),0===a.indexOf("<tbody")&&(e="table"),0===a.indexOf("<option")&&(e="select"),(s=ct.createElement(e)).innerHTML=a,i=0;i<s.childNodes.length;i+=1)n.push(s.childNodes[i])}else for(r=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||ct).querySelectorAll(e.trim()):[ct.getElementById(e.trim().split("#")[1])],i=0;i<r.length;i+=1)r[i]&&n.push(r[i])}else if(e.nodeType||e===dt||e===ct)n.push(e);else if(e.length>0&&e[0].nodeType)for(i=0;i<e.length;i+=1)n.push(e[i]);return new ut(n)}function ft(e){const t=[];for(let n=0;n<e.length;n+=1)-1===t.indexOf(e[n])&&t.push(e[n]);return t}pt.fn=ut.prototype,pt.Class=ut,pt.Dom7=ut;"resize scroll".split(" ");const ht={addClass:function(e){if(void 0===e)return this;const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let n=0;n<this.length;n+=1)void 0!==this[n].classList&&this[n].classList.add(t[e]);return this},removeClass:function(e){const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let n=0;n<this.length;n+=1)void 0!==this[n].classList&&this[n].classList.remove(t[e]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let n=0;n<this.length;n+=1)void 0!==this[n].classList&&this[n].classList.toggle(t[e]);return this},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(let n=0;n<this.length;n+=1)if(2===arguments.length)this[n].setAttribute(e,t);else for(const t in e)this[n][t]=e[t],this[n].setAttribute(t,e[t]);return this},removeAttr:function(e){for(let t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},data:function(e,t){let n;if(void 0!==t){for(let i=0;i<this.length;i+=1)(n=this[i]).dom7ElementDataStorage||(n.dom7ElementDataStorage={}),n.dom7ElementDataStorage[e]=t;return this}if(n=this[0]){if(n.dom7ElementDataStorage&&e in n.dom7ElementDataStorage)return n.dom7ElementDataStorage[e];const t=n.getAttribute(`data-${e}`);return t||void 0}},transform:function(e){for(let t=0;t<this.length;t+=1){const n=this[t].style;n.webkitTransform=e,n.transform=e}return this},transition:function(e){"string"!=typeof e&&(e=`${e}ms`);for(let t=0;t<this.length;t+=1){const n=this[t].style;n.webkitTransitionDuration=e,n.transitionDuration=e}return this},on:function(...e){let[t,n,i,r]=e;function s(e){const t=e.target;if(!t)return;const r=e.target.dom7EventData||[];if(r.indexOf(e)<0&&r.unshift(e),pt(t).is(n))i.apply(t,r);else{const e=pt(t).parents();for(let t=0;t<e.length;t+=1)pt(e[t]).is(n)&&i.apply(e[t],r)}}function a(e){const t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),i.apply(this,t)}"function"==typeof e[1]&&([t,i,r]=e,n=void 0),r||(r=!1);const o=t.split(" ");let l;for(let e=0;e<this.length;e+=1){const t=this[e];if(n)for(l=0;l<o.length;l+=1){const e=o[l];t.dom7LiveListeners||(t.dom7LiveListeners={}),t.dom7LiveListeners[e]||(t.dom7LiveListeners[e]=[]),t.dom7LiveListeners[e].push({listener:i,proxyListener:s}),t.addEventListener(e,s,r)}else for(l=0;l<o.length;l+=1){const e=o[l];t.dom7Listeners||(t.dom7Listeners={}),t.dom7Listeners[e]||(t.dom7Listeners[e]=[]),t.dom7Listeners[e].push({listener:i,proxyListener:a}),t.addEventListener(e,a,r)}}return this},off:function(...e){let[t,n,i,r]=e;"function"==typeof e[1]&&([t,i,r]=e,n=void 0),r||(r=!1);const s=t.split(" ");for(let e=0;e<s.length;e+=1){const t=s[e];for(let e=0;e<this.length;e+=1){const s=this[e];let a;!n&&s.dom7Listeners?a=s.dom7Listeners[t]:n&&s.dom7LiveListeners&&(a=s.dom7LiveListeners[t]);for(let e=a.length-1;e>=0;e-=1){const n=a[e];i&&n.listener===i?(s.removeEventListener(t,n.proxyListener,r),a.splice(e,1)):i||(s.removeEventListener(t,n.proxyListener,r),a.splice(e,1))}}}return this},trigger:function(...e){const t=e[0].split(" "),n=e[1];for(let i=0;i<t.length;i+=1){const r=t[i];for(let t=0;t<this.length;t+=1){const i=this[t];let s;try{s=new dt.CustomEvent(r,{detail:n,bubbles:!0,cancelable:!0})}catch(e){(s=ct.createEvent("Event")).initEvent(r,!0,!0),s.detail=n}i.dom7EventData=e.filter((e,t)=>t>0),i.dispatchEvent(s),i.dom7EventData=[],delete i.dom7EventData}}return this},transitionEnd:function(e){const t=["webkitTransitionEnd","transitionend"],n=this;let i;function r(s){if(s.target===this)for(e.call(this,s),i=0;i<t.length;i+=1)n.off(t[i],r)}if(e)for(i=0;i<t.length;i+=1)n.on(t[i],r);return this},outerWidth:function(e){if(this.length>0){if(e){const e=this.styles();return this[0].offsetWidth+parseFloat(e.getPropertyValue("margin-right"))+parseFloat(e.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){const e=this.styles();return this[0].offsetHeight+parseFloat(e.getPropertyValue("margin-top"))+parseFloat(e.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},offset:function(){if(this.length>0){const e=this[0],t=e.getBoundingClientRect(),n=ct.body,i=e.clientTop||n.clientTop||0,r=e.clientLeft||n.clientLeft||0,s=e===dt?dt.scrollY:e.scrollTop,a=e===dt?dt.scrollX:e.scrollLeft;return{top:t.top+s-i,left:t.left+a-r}}return null},css:function(e,t){let n;if(1===arguments.length){if("string"!=typeof e){for(n=0;n<this.length;n+=1)for(let t in e)this[n].style[t]=e[t];return this}if(this[0])return dt.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(n=0;n<this.length;n+=1)this[n].style[e]=t;return this}return this},each:function(e){if(!e)return this;for(let t=0;t<this.length;t+=1)if(!1===e.call(this[t],t,this[t]))return this;return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(let t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(let t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){const t=this[0];let n,i;if(!t||void 0===e)return!1;if("string"==typeof e){if(t.matches)return t.matches(e);if(t.webkitMatchesSelector)return t.webkitMatchesSelector(e);if(t.msMatchesSelector)return t.msMatchesSelector(e);for(n=pt(e),i=0;i<n.length;i+=1)if(n[i]===t)return!0;return!1}if(e===ct)return t===ct;if(e===dt)return t===dt;if(e.nodeType||e instanceof ut){for(n=e.nodeType?[e]:e,i=0;i<n.length;i+=1)if(n[i]===t)return!0;return!1}return!1},index:function(){let e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;const t=this.length;let n;return new ut(e>t-1?[]:e<0?(n=t+e)<0?[]:[this[n]]:[this[e]])},append:function(...e){let t;for(let n=0;n<e.length;n+=1){t=e[n];for(let e=0;e<this.length;e+=1)if("string"==typeof t){const n=ct.createElement("div");for(n.innerHTML=t;n.firstChild;)this[e].appendChild(n.firstChild)}else if(t instanceof ut)for(let n=0;n<t.length;n+=1)this[e].appendChild(t[n]);else this[e].appendChild(t)}return this},prepend:function(e){let t,n;for(t=0;t<this.length;t+=1)if("string"==typeof e){const i=ct.createElement("div");for(i.innerHTML=e,n=i.childNodes.length-1;n>=0;n-=1)this[t].insertBefore(i.childNodes[n],this[t].childNodes[0])}else if(e instanceof ut)for(n=0;n<e.length;n+=1)this[t].insertBefore(e[n],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&pt(this[0].nextElementSibling).is(e)?new ut([this[0].nextElementSibling]):new ut([]):this[0].nextElementSibling?new ut([this[0].nextElementSibling]):new ut([]):new ut([])},nextAll:function(e){const t=[];let n=this[0];if(!n)return new ut([]);for(;n.nextElementSibling;){const i=n.nextElementSibling;e?pt(i).is(e)&&t.push(i):t.push(i),n=i}return new ut(t)},prev:function(e){if(this.length>0){const t=this[0];return e?t.previousElementSibling&&pt(t.previousElementSibling).is(e)?new ut([t.previousElementSibling]):new ut([]):t.previousElementSibling?new ut([t.previousElementSibling]):new ut([])}return new ut([])},prevAll:function(e){const t=[];let n=this[0];if(!n)return new ut([]);for(;n.previousElementSibling;){const i=n.previousElementSibling;e?pt(i).is(e)&&t.push(i):t.push(i),n=i}return new ut(t)},parent:function(e){const t=[];for(let n=0;n<this.length;n+=1)null!==this[n].parentNode&&(e?pt(this[n].parentNode).is(e)&&t.push(this[n].parentNode):t.push(this[n].parentNode));return pt(ft(t))},parents:function(e){const t=[];for(let n=0;n<this.length;n+=1){let i=this[n].parentNode;for(;i;)e?pt(i).is(e)&&t.push(i):t.push(i),i=i.parentNode}return pt(ft(t))},closest:function(e){let t=this;return void 0===e?new ut([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){const t=[];for(let n=0;n<this.length;n+=1){const i=this[n].querySelectorAll(e);for(let e=0;e<i.length;e+=1)t.push(i[e])}return new ut(t)},children:function(e){const t=[];for(let n=0;n<this.length;n+=1){const i=this[n].childNodes;for(let n=0;n<i.length;n+=1)e?1===i[n].nodeType&&pt(i[n]).is(e)&&t.push(i[n]):1===i[n].nodeType&&t.push(i[n])}return new ut(ft(t))},remove:function(){for(let e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(...e){const t=this;let n,i;for(n=0;n<e.length;n+=1){const r=pt(e[n]);for(i=0;i<r.length;i+=1)t[t.length]=r[i],t.length+=1}return t},styles:function(){return this[0]?dt.getComputedStyle(this[0],null):{}}};Object.keys(ht).forEach(e=>{pt.fn[e]=ht[e]});const mt={deleteProps(e){const t=e;Object.keys(t).forEach(e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})},nextTick:(e,t=0)=>setTimeout(e,t),now:()=>Date.now(),getTranslate(e,t="x"){let n,i,r;const s=dt.getComputedStyle(e,null);return dt.WebKitCSSMatrix?((i=s.transform||s.webkitTransform).split(",").length>6&&(i=i.split(", ").map(e=>e.replace(",",".")).join(", ")),r=new dt.WebKitCSSMatrix("none"===i?"":i)):n=(r=s.MozTransform||s.OTransform||s.MsTransform||s.msTransform||s.transform||s.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(i=dt.WebKitCSSMatrix?r.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===t&&(i=dt.WebKitCSSMatrix?r.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),i||0},parseUrlQuery(e){const t={};let n,i,r,s,a=e||dt.location.href;if("string"==typeof a&&a.length)for(s=(i=(a=a.indexOf("?")>-1?a.replace(/\S*\?/,""):"").split("&").filter(e=>""!==e)).length,n=0;n<s;n+=1)r=i[n].replace(/#\S+/g,"").split("="),t[decodeURIComponent(r[0])]=void 0===r[1]?void 0:decodeURIComponent(r[1])||"";return t},isObject:e=>"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object,extend(...e){const t=Object(e[0]);for(let n=1;n<e.length;n+=1){const i=e[n];if(void 0!==i&&null!==i){const e=Object.keys(Object(i));for(let n=0,r=e.length;n<r;n+=1){const r=e[n],s=Object.getOwnPropertyDescriptor(i,r);void 0!==s&&s.enumerable&&(mt.isObject(t[r])&&mt.isObject(i[r])?mt.extend(t[r],i[r]):!mt.isObject(t[r])&&mt.isObject(i[r])?(t[r]={},mt.extend(t[r],i[r])):t[r]=i[r])}}}return t}},gt=function(){const e=ct.createElement("div");return{touch:dt.Modernizr&&!0===dt.Modernizr.touch||!!("ontouchstart"in dt||dt.DocumentTouch&&ct instanceof dt.DocumentTouch),pointerEvents:!(!dt.navigator.pointerEnabled&&!dt.PointerEvent),prefixedPointerEvents:!!dt.navigator.msPointerEnabled,transition:function(){const t=e.style;return"transition"in t||"webkitTransition"in t||"MozTransition"in t}(),transforms3d:dt.Modernizr&&!0===dt.Modernizr.csstransforms3d||function(){const t=e.style;return"webkitPerspective"in t||"MozPerspective"in t||"OPerspective"in t||"MsPerspective"in t||"perspective"in t}(),flexbox:function(){const t=e.style,n="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" ");for(let e=0;e<n.length;e+=1)if(n[e]in t)return!0;return!1}(),observer:"MutationObserver"in dt||"WebkitMutationObserver"in dt,passiveListener:function(){let e=!1;try{const t=Object.defineProperty({},"passive",{get(){e=!0}});dt.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in dt}}();class vt{constructor(e={}){const t=this;t.params=e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(e=>{t.on(e,t.params.on[e])})}on(e,t,n){const i=this;if("function"!=typeof t)return i;const r=n?"unshift":"push";return e.split(" ").forEach(e=>{i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][r](t)}),i}once(e,t,n){const i=this;if("function"!=typeof t)return i;return i.on(e,function n(...r){t.apply(i,r),i.off(e,n)},n)}off(e,t){const n=this;return n.eventsListeners?(e.split(" ").forEach(e=>{void 0===t?n.eventsListeners[e]=[]:n.eventsListeners[e].forEach((i,r)=>{i===t&&n.eventsListeners[e].splice(r,1)})}),n):n}emit(...e){const t=this;if(!t.eventsListeners)return t;let n,i,r;return"string"==typeof e[0]||Array.isArray(e[0])?(n=e[0],i=e.slice(1,e.length),r=t):(n=e[0].events,i=e[0].data,r=e[0].context||t),(Array.isArray(n)?n:n.split(" ")).forEach(e=>{if(t.eventsListeners&&t.eventsListeners[e]){const n=[];t.eventsListeners[e].forEach(e=>{n.push(e)}),n.forEach(e=>{e.apply(r,i)})}}),t}useModulesParams(e){const t=this;t.modules&&Object.keys(t.modules).forEach(n=>{const i=t.modules[n];i.params&&mt.extend(e,i.params)})}useModules(e={}){const t=this;t.modules&&Object.keys(t.modules).forEach(n=>{const i=t.modules[n],r=e[n]||{};i.instance&&Object.keys(i.instance).forEach(e=>{const n=i.instance[e];t[e]="function"==typeof n?n.bind(t):n}),i.on&&t.on&&Object.keys(i.on).forEach(e=>{t.on(e,i.on[e])}),i.create&&i.create.bind(t)(r)})}static set components(e){this.use&&this.use(e)}static installModule(e,...t){const n=this;n.prototype.modules||(n.prototype.modules={});const i=e.name||`${Object.keys(n.prototype.modules).length}_${mt.now()}`;return n.prototype.modules[i]=e,e.proto&&Object.keys(e.proto).forEach(t=>{n.prototype[t]=e.proto[t]}),e.static&&Object.keys(e.static).forEach(t=>{n[t]=e.static[t]}),e.install&&e.install.apply(n,t),n}static use(e,...t){const n=this;return Array.isArray(e)?(e.forEach(e=>n.installModule(e)),n):n.installModule(e,...t)}}var yt={updateSize:function(){const e=this;let t,n;const i=e.$el;t=void 0!==e.params.width?e.params.width:i[0].clientWidth,n=void 0!==e.params.height?e.params.height:i[0].clientHeight,0===t&&e.isHorizontal()||0===n&&e.isVertical()||(t=t-parseInt(i.css("padding-left"),10)-parseInt(i.css("padding-right"),10),n=n-parseInt(i.css("padding-top"),10)-parseInt(i.css("padding-bottom"),10),mt.extend(e,{width:t,height:n,size:e.isHorizontal()?t:n}))},updateSlides:function(){const e=this,t=e.params,{$wrapperEl:n,size:i,rtlTranslate:r,wrongRTL:s}=e,a=n.children(`.${e.params.slideClass}`),o=e.virtual&&t.virtual.enabled?e.virtual.slides.length:a.length;let l=[];const c=[],d=[];let u=t.slidesOffsetBefore;"function"==typeof u&&(u=t.slidesOffsetBefore.call(e));let p=t.slidesOffsetAfter;"function"==typeof p&&(p=t.slidesOffsetAfter.call(e));const f=o,h=e.snapGrid.length,m=e.snapGrid.length;let g,v,y=t.spaceBetween,b=-u,w=0,E=0;if(void 0===i)return;"string"==typeof y&&y.indexOf("%")>=0&&(y=parseFloat(y.replace("%",""))/100*i),e.virtualSize=-y,r?a.css({marginLeft:"",marginTop:""}):a.css({marginRight:"",marginBottom:""}),t.slidesPerColumn>1&&(g=Math.floor(o/t.slidesPerColumn)===o/e.params.slidesPerColumn?o:Math.ceil(o/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(g=Math.max(g,t.slidesPerView*t.slidesPerColumn)));const T=t.slidesPerColumn,x=g/T,C=x-(t.slidesPerColumn*x-o);for(let n=0;n<o;n+=1){v=0;const r=a.eq(n);if(t.slidesPerColumn>1){let i,s,a;"column"===t.slidesPerColumnFill?(a=n-(s=Math.floor(n/T))*T,(s>C||s===C&&a===T-1)&&(a+=1)>=T&&(a=0,s+=1),i=s+a*g/T,r.css({"-webkit-box-ordinal-group":i,"-moz-box-ordinal-group":i,"-ms-flex-order":i,"-webkit-order":i,order:i})):s=n-(a=Math.floor(n/x))*x,r.css(`margin-${e.isHorizontal()?"top":"left"}`,0!==a&&t.spaceBetween&&`${t.spaceBetween}px`).attr("data-swiper-column",s).attr("data-swiper-row",a)}if("none"!==r.css("display")){if("auto"===t.slidesPerView){const n=dt.getComputedStyle(r[0],null);v=e.isHorizontal()?r[0].getBoundingClientRect().width+parseFloat(n.getPropertyValue("margin-left"))+parseFloat(n.getPropertyValue("margin-right")):r[0].getBoundingClientRect().height+parseFloat(n.getPropertyValue("margin-top"))+parseFloat(n.getPropertyValue("margin-bottom")),t.roundLengths&&(v=Math.floor(v))}else v=(i-(t.slidesPerView-1)*y)/t.slidesPerView,t.roundLengths&&(v=Math.floor(v)),a[n]&&(e.isHorizontal()?a[n].style.width=`${v}px`:a[n].style.height=`${v}px`);a[n]&&(a[n].swiperSlideSize=v),d.push(v),t.centeredSlides?(b=b+v/2+w/2+y,0===w&&0!==n&&(b=b-i/2-y),0===n&&(b=b-i/2-y),Math.abs(b)<.001&&(b=0),E%t.slidesPerGroup==0&&l.push(b),c.push(b)):(E%t.slidesPerGroup==0&&l.push(b),c.push(b),b=b+v+y),e.virtualSize+=v+y,w=v,E+=1}}let S;if(e.virtualSize=Math.max(e.virtualSize,i)+p,r&&s&&("slide"===t.effect||"coverflow"===t.effect)&&n.css({width:`${e.virtualSize+t.spaceBetween}px`}),gt.flexbox&&!t.setWrapperSize||(e.isHorizontal()?n.css({width:`${e.virtualSize+t.spaceBetween}px`}):n.css({height:`${e.virtualSize+t.spaceBetween}px`})),t.slidesPerColumn>1&&(e.virtualSize=(v+t.spaceBetween)*g,e.virtualSize=Math.ceil(e.virtualSize/t.slidesPerColumn)-t.spaceBetween,e.isHorizontal()?n.css({width:`${e.virtualSize+t.spaceBetween}px`}):n.css({height:`${e.virtualSize+t.spaceBetween}px`}),t.centeredSlides)){S=[];for(let t=0;t<l.length;t+=1)l[t]<e.virtualSize+l[0]&&S.push(l[t]);l=S}if(!t.centeredSlides){S=[];for(let t=0;t<l.length;t+=1)l[t]<=e.virtualSize-i&&S.push(l[t]);l=S,Math.floor(e.virtualSize-i)-Math.floor(l[l.length-1])>1&&l.push(e.virtualSize-i)}0===l.length&&(l=[0]),0!==t.spaceBetween&&(e.isHorizontal()?r?a.css({marginLeft:`${y}px`}):a.css({marginRight:`${y}px`}):a.css({marginBottom:`${y}px`})),mt.extend(e,{slides:a,snapGrid:l,slidesGrid:c,slidesSizesGrid:d}),o!==f&&e.emit("slidesLengthChange"),l.length!==h&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),c.length!==m&&e.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&e.updateSlidesOffset()},updateAutoHeight:function(e){const t=this,n=[];let i,r=0;if("number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed),"auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)for(i=0;i<Math.ceil(t.params.slidesPerView);i+=1){const e=t.activeIndex+i;if(e>t.slides.length)break;n.push(t.slides.eq(e)[0])}else n.push(t.slides.eq(t.activeIndex)[0]);for(i=0;i<n.length;i+=1)if(void 0!==n[i]){const e=n[i].offsetHeight;r=e>r?e:r}r&&t.$wrapperEl.css("height",`${r}px`)},updateSlidesOffset:function(){const e=this,t=e.slides;for(let n=0;n<t.length;n+=1)t[n].swiperSlideOffset=e.isHorizontal()?t[n].offsetLeft:t[n].offsetTop},updateSlidesProgress:function(e=this.translate||0){const t=this,n=t.params,{slides:i,rtlTranslate:r}=t;if(0===i.length)return;void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();let s=-e;r&&(s=e),i.removeClass(n.slideVisibleClass);for(let e=0;e<i.length;e+=1){const a=i[e],o=(s+(n.centeredSlides?t.minTranslate():0)-a.swiperSlideOffset)/(a.swiperSlideSize+n.spaceBetween);if(n.watchSlidesVisibility){const r=-(s-a.swiperSlideOffset),o=r+t.slidesSizesGrid[e];(r>=0&&r<t.size||o>0&&o<=t.size||r<=0&&o>=t.size)&&i.eq(e).addClass(n.slideVisibleClass)}a.progress=r?-o:o}},updateProgress:function(e=this.translate||0){const t=this,n=t.params,i=t.maxTranslate()-t.minTranslate();let{progress:r,isBeginning:s,isEnd:a}=t;const o=s,l=a;0===i?(r=0,s=!0,a=!0):(s=(r=(e-t.minTranslate())/i)<=0,a=r>=1),mt.extend(t,{progress:r,isBeginning:s,isEnd:a}),(n.watchSlidesProgress||n.watchSlidesVisibility)&&t.updateSlidesProgress(e),s&&!o&&t.emit("reachBeginning toEdge"),a&&!l&&t.emit("reachEnd toEdge"),(o&&!s||l&&!a)&&t.emit("fromEdge"),t.emit("progress",r)},updateSlidesClasses:function(){const e=this,{slides:t,params:n,$wrapperEl:i,activeIndex:r,realIndex:s}=e,a=e.virtual&&n.virtual.enabled;let o;t.removeClass(`${n.slideActiveClass} ${n.slideNextClass} ${n.slidePrevClass} ${n.slideDuplicateActiveClass} ${n.slideDuplicateNextClass} ${n.slideDuplicatePrevClass}`),(o=a?e.$wrapperEl.find(`.${n.slideClass}[data-swiper-slide-index="${r}"]`):t.eq(r)).addClass(n.slideActiveClass),n.loop&&(o.hasClass(n.slideDuplicateClass)?i.children(`.${n.slideClass}:not(.${n.slideDuplicateClass})[data-swiper-slide-index="${s}"]`).addClass(n.slideDuplicateActiveClass):i.children(`.${n.slideClass}.${n.slideDuplicateClass}[data-swiper-slide-index="${s}"]`).addClass(n.slideDuplicateActiveClass));let l=o.nextAll(`.${n.slideClass}`).eq(0).addClass(n.slideNextClass);n.loop&&0===l.length&&(l=t.eq(0)).addClass(n.slideNextClass);let c=o.prevAll(`.${n.slideClass}`).eq(0).addClass(n.slidePrevClass);n.loop&&0===c.length&&(c=t.eq(-1)).addClass(n.slidePrevClass),n.loop&&(l.hasClass(n.slideDuplicateClass)?i.children(`.${n.slideClass}:not(.${n.slideDuplicateClass})[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`).addClass(n.slideDuplicateNextClass):i.children(`.${n.slideClass}.${n.slideDuplicateClass}[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`).addClass(n.slideDuplicateNextClass),c.hasClass(n.slideDuplicateClass)?i.children(`.${n.slideClass}:not(.${n.slideDuplicateClass})[data-swiper-slide-index="${c.attr("data-swiper-slide-index")}"]`).addClass(n.slideDuplicatePrevClass):i.children(`.${n.slideClass}.${n.slideDuplicateClass}[data-swiper-slide-index="${c.attr("data-swiper-slide-index")}"]`).addClass(n.slideDuplicatePrevClass))},updateActiveIndex:function(e){const t=this,n=t.rtlTranslate?t.translate:-t.translate,{slidesGrid:i,snapGrid:r,params:s,activeIndex:a,realIndex:o,snapIndex:l}=t;let c,d=e;if(void 0===d){for(let e=0;e<i.length;e+=1)void 0!==i[e+1]?n>=i[e]&&n<i[e+1]-(i[e+1]-i[e])/2?d=e:n>=i[e]&&n<i[e+1]&&(d=e+1):n>=i[e]&&(d=e);s.normalizeSlideIndex&&(d<0||void 0===d)&&(d=0)}if((c=r.indexOf(n)>=0?r.indexOf(n):Math.floor(d/s.slidesPerGroup))>=r.length&&(c=r.length-1),d===a)return void(c!==l&&(t.snapIndex=c,t.emit("snapIndexChange")));const u=parseInt(t.slides.eq(d).attr("data-swiper-slide-index")||d,10);mt.extend(t,{snapIndex:c,realIndex:u,previousIndex:a,activeIndex:d}),t.emit("activeIndexChange"),t.emit("snapIndexChange"),o!==u&&t.emit("realIndexChange"),t.emit("slideChange")},updateClickedSlide:function(e){const t=this,n=t.params,i=pt(e.target).closest(`.${n.slideClass}`)[0];let r=!1;if(i)for(let e=0;e<t.slides.length;e+=1)t.slides[e]===i&&(r=!0);if(!i||!r)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=i,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(pt(i).attr("data-swiper-slide-index"),10):t.clickedIndex=pt(i).index(),n.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}};var bt={getTranslate:function(e=(this.isHorizontal()?"x":"y")){const{params:t,rtlTranslate:n,translate:i,$wrapperEl:r}=this;if(t.virtualTranslate)return n?-i:i;let s=mt.getTranslate(r[0],e);return n&&(s=-s),s||0},setTranslate:function(e,t){const n=this,{rtlTranslate:i,params:r,$wrapperEl:s,progress:a}=n;let o,l=0,c=0;n.isHorizontal()?l=i?-e:e:c=e,r.roundLengths&&(l=Math.floor(l),c=Math.floor(c)),r.virtualTranslate||(gt.transforms3d?s.transform(`translate3d(${l}px, ${c}px, 0px)`):s.transform(`translate(${l}px, ${c}px)`)),n.translate=n.isHorizontal()?l:c;const d=n.maxTranslate()-n.minTranslate();(o=0===d?0:(e-n.minTranslate())/d)!==a&&n.updateProgress(e),n.emit("setTranslate",n.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]}};var wt={setTransition:function(e,t){this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(e=!0,t){const n=this,{activeIndex:i,params:r,previousIndex:s}=n;r.autoHeight&&n.updateAutoHeight();let a=t;if(a||(a=i>s?"next":i<s?"prev":"reset"),n.emit("transitionStart"),e&&i!==s){if("reset"===a)return void n.emit("slideResetTransitionStart");n.emit("slideChangeTransitionStart"),"next"===a?n.emit("slideNextTransitionStart"):n.emit("slidePrevTransitionStart")}},transitionEnd:function(e=!0,t){const n=this,{activeIndex:i,previousIndex:r}=n;n.animating=!1,n.setTransition(0);let s=t;if(s||(s=i>r?"next":i<r?"prev":"reset"),n.emit("transitionEnd"),e&&i!==r){if("reset"===s)return void n.emit("slideResetTransitionEnd");n.emit("slideChangeTransitionEnd"),"next"===s?n.emit("slideNextTransitionEnd"):n.emit("slidePrevTransitionEnd")}}};var Et={slideTo:function(e=0,t=this.params.speed,n=!0,i){const r=this;let s=e;s<0&&(s=0);const{params:a,snapGrid:o,slidesGrid:l,previousIndex:c,activeIndex:d,rtlTranslate:u,$wrapperEl:p}=r;if(r.animating&&a.preventIntercationOnTransition)return!1;let f=Math.floor(s/a.slidesPerGroup);f>=o.length&&(f=o.length-1),(d||a.initialSlide||0)===(c||0)&&n&&r.emit("beforeSlideChangeStart");const h=-o[f];if(r.updateProgress(h),a.normalizeSlideIndex)for(let e=0;e<l.length;e+=1)-Math.floor(100*h)>=Math.floor(100*l[e])&&(s=e);if(r.initialized&&s!==d){if(!r.allowSlideNext&&h<r.translate&&h<r.minTranslate())return!1;if(!r.allowSlidePrev&&h>r.translate&&h>r.maxTranslate()&&(d||0)!==s)return!1}let m;return m=s>d?"next":s<d?"prev":"reset",u&&-h===r.translate||!u&&h===r.translate?(r.updateActiveIndex(s),a.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==a.effect&&r.setTranslate(h),"reset"!==m&&(r.transitionStart(n,m),r.transitionEnd(n,m)),!1):(0!==t&&gt.transition?(r.setTransition(t),r.setTranslate(h),r.updateActiveIndex(s),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,i),r.transitionStart(n,m),r.animating||(r.animating=!0,p.transitionEnd(()=>{r&&!r.destroyed&&r.transitionEnd(n,m)}))):(r.setTransition(0),r.setTranslate(h),r.updateActiveIndex(s),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,i),r.transitionStart(n,m),r.transitionEnd(n,m)),!0)},slideToLoop:function(e=0,t=this.params.speed,n=!0,i){const r=this;let s=e;return r.params.loop&&(s+=r.loopedSlides),r.slideTo(s,t,n,i)},slideNext:function(e=this.params.speed,t=!0,n){const i=this,{params:r,animating:s}=i;return r.loop?!s&&(i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft,i.slideTo(i.activeIndex+r.slidesPerGroup,e,t,n)):i.slideTo(i.activeIndex+r.slidesPerGroup,e,t,n)},slidePrev:function(e=this.params.speed,t=!0,n){const i=this,{params:r,animating:s,snapGrid:a,slidesGrid:o,rtlTranslate:l}=i;if(r.loop){if(s)return!1;i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft}const c=l?i.translate:-i.translate,d=(a[a.indexOf(c)],a[a.indexOf(c)-1]);let u;return d&&(u=o.indexOf(d))<0&&(u=i.activeIndex-1),i.slideTo(u,e,t,n)},slideReset:function(e=this.params.speed,t=!0,n){return this.slideTo(this.activeIndex,e,t,n)},slideToClosest:function(e=this.params.speed,t=!0,n){const i=this;let r=i.activeIndex;const s=Math.floor(r/i.params.slidesPerGroup);if(s<i.snapGrid.length-1){const e=i.rtlTranslate?i.translate:-i.translate,t=i.snapGrid[s];e-t>(i.snapGrid[s+1]-t)/2&&(r=i.params.slidesPerGroup)}return i.slideTo(r,e,t,n)},slideToClickedSlide:function(){const e=this,{params:t,$wrapperEl:n}=e,i="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let r,s=e.clickedIndex;if(t.loop){if(e.animating)return;r=parseInt(pt(e.clickedSlide).attr("data-swiper-slide-index"),10),t.centeredSlides?s<e.loopedSlides-i/2||s>e.slides.length-e.loopedSlides+i/2?(e.loopFix(),s=n.children(`.${t.slideClass}[data-swiper-slide-index="${r}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),mt.nextTick(()=>{e.slideTo(s)})):e.slideTo(s):s>e.slides.length-i?(e.loopFix(),s=n.children(`.${t.slideClass}[data-swiper-slide-index="${r}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),mt.nextTick(()=>{e.slideTo(s)})):e.slideTo(s)}else e.slideTo(s)}};var Tt={loopCreate:function(){const e=this,{params:t,$wrapperEl:n}=e;n.children(`.${t.slideClass}.${t.slideDuplicateClass}`).remove();let i=n.children(`.${t.slideClass}`);if(t.loopFillGroupWithBlank){const e=t.slidesPerGroup-i.length%t.slidesPerGroup;if(e!==t.slidesPerGroup){for(let i=0;i<e;i+=1){const e=pt(ct.createElement("div")).addClass(`${t.slideClass} ${t.slideBlankClass}`);n.append(e)}i=n.children(`.${t.slideClass}`)}}"auto"!==t.slidesPerView||t.loopedSlides||(t.loopedSlides=i.length),e.loopedSlides=parseInt(t.loopedSlides||t.slidesPerView,10),e.loopedSlides+=t.loopAdditionalSlides,e.loopedSlides>i.length&&(e.loopedSlides=i.length);const r=[],s=[];i.each((t,n)=>{const a=pt(n);t<e.loopedSlides&&s.push(n),t<i.length&&t>=i.length-e.loopedSlides&&r.push(n),a.attr("data-swiper-slide-index",t)});for(let e=0;e<s.length;e+=1)n.append(pt(s[e].cloneNode(!0)).addClass(t.slideDuplicateClass));for(let e=r.length-1;e>=0;e-=1)n.prepend(pt(r[e].cloneNode(!0)).addClass(t.slideDuplicateClass))},loopFix:function(){const e=this,{params:t,activeIndex:n,slides:i,loopedSlides:r,allowSlidePrev:s,allowSlideNext:a,snapGrid:o,rtlTranslate:l}=e;let c;e.allowSlidePrev=!0,e.allowSlideNext=!0;const d=-o[n]-e.getTranslate();n<r?(c=i.length-3*r+n,c+=r,e.slideTo(c,0,!1,!0)&&0!==d&&e.setTranslate((l?-e.translate:e.translate)-d)):("auto"===t.slidesPerView&&n>=2*r||n>i.length-2*t.slidesPerView)&&(c=-i.length+n+r,c+=r,e.slideTo(c,0,!1,!0)&&0!==d&&e.setTranslate((l?-e.translate:e.translate)-d));e.allowSlidePrev=s,e.allowSlideNext=a},loopDestroy:function(){const{$wrapperEl:e,params:t,slides:n}=this;e.children(`.${t.slideClass}.${t.slideDuplicateClass}`).remove(),n.removeAttr("data-swiper-slide-index")}};var xt={setGrabCursor:function(e){if(gt.touch||!this.params.simulateTouch)return;const t=this.el;t.style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab"},unsetGrabCursor:function(){gt.touch||(this.el.style.cursor="")}};var Ct={appendSlide:function(e){const t=this,{$wrapperEl:n,params:i}=t;if(i.loop&&t.loopDestroy(),"object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&n.append(e[t]);else n.append(e);i.loop&&t.loopCreate(),i.observer&&gt.observer||t.update()},prependSlide:function(e){const t=this,{params:n,$wrapperEl:i,activeIndex:r}=t;n.loop&&t.loopDestroy();let s=r+1;if("object"==typeof e&&"length"in e){for(let t=0;t<e.length;t+=1)e[t]&&i.prepend(e[t]);s=r+e.length}else i.prepend(e);n.loop&&t.loopCreate(),n.observer&&gt.observer||t.update(),t.slideTo(s,0,!1)},removeSlide:function(e){const t=this,{params:n,$wrapperEl:i,activeIndex:r}=t;n.loop&&(t.loopDestroy(),t.slides=i.children(`.${n.slideClass}`));let s,a=r;if("object"==typeof e&&"length"in e){for(let n=0;n<e.length;n+=1)s=e[n],t.slides[s]&&t.slides.eq(s).remove(),s<a&&(a-=1);a=Math.max(a,0)}else s=e,t.slides[s]&&t.slides.eq(s).remove(),s<a&&(a-=1),a=Math.max(a,0);n.loop&&t.loopCreate(),n.observer&&gt.observer||t.update(),n.loop?t.slideTo(a+t.loopedSlides,0,!1):t.slideTo(a,0,!1)},removeAllSlides:function(){const e=this,t=[];for(let n=0;n<e.slides.length;n+=1)t.push(n);e.removeSlide(t)}};const St=function(){const e=dt.navigator.userAgent,t={ios:!1,android:!1,androidChrome:!1,desktop:!1,windows:!1,iphone:!1,ipod:!1,ipad:!1,cordova:dt.cordova||dt.phonegap,phonegap:dt.cordova||dt.phonegap},n=e.match(/(Windows Phone);?[\s\/]+([\d.]+)?/),i=e.match(/(Android);?[\s\/]+([\d.]+)?/),r=e.match(/(iPad).*OS\s([\d_]+)/),s=e.match(/(iPod)(.*OS\s([\d_]+))?/),a=!r&&e.match(/(iPhone\sOS|iOS)\s([\d_]+)/);if(n&&(t.os="windows",t.osVersion=n[2],t.windows=!0),i&&!n&&(t.os="android",t.osVersion=i[2],t.android=!0,t.androidChrome=e.toLowerCase().indexOf("chrome")>=0),(r||a||s)&&(t.os="ios",t.ios=!0),a&&!s&&(t.osVersion=a[2].replace(/_/g,"."),t.iphone=!0),r&&(t.osVersion=r[2].replace(/_/g,"."),t.ipad=!0),s&&(t.osVersion=s[3]?s[3].replace(/_/g,"."):null,t.iphone=!0),t.ios&&t.osVersion&&e.indexOf("Version/")>=0&&"10"===t.osVersion.split(".")[0]&&(t.osVersion=e.toLowerCase().split("version/")[1].split(" ")[0]),t.desktop=!(t.os||t.android||t.webView),t.webView=(a||r||s)&&e.match(/.*AppleWebKit(?!.*Safari)/i),t.os&&"ios"===t.os){const e=t.osVersion.split("."),n=ct.querySelector('meta[name="viewport"]');t.minimalUi=!t.webView&&(s||a)&&(1*e[0]==7?1*e[1]>=1:1*e[0]>7)&&n&&n.getAttribute("content").indexOf("minimal-ui")>=0}return t.pixelRatio=dt.devicePixelRatio||1,t}();function _t(){const e=this,{params:t,el:n}=e;if(n&&0===n.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:i,allowSlidePrev:r,snapGrid:s}=e;if(e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),t.freeMode){const n=Math.min(Math.max(e.translate,e.maxTranslate()),e.minTranslate());e.setTranslate(n),e.updateActiveIndex(),e.updateSlidesClasses(),t.autoHeight&&e.updateAutoHeight()}else e.updateSlidesClasses(),("auto"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0);e.allowSlidePrev=r,e.allowSlideNext=i,e.params.watchOverflow&&s!==e.snapGrid&&e.checkOverflow()}var At={attachEvents:function(){const e=this,{params:t,touchEvents:n,el:i,wrapperEl:r}=e;e.onTouchStart=function(e){const t=this,n=t.touchEventsData,{params:i,touches:r}=t;if(t.animating&&i.preventIntercationOnTransition)return;let s=e;if(s.originalEvent&&(s=s.originalEvent),n.isTouchEvent="touchstart"===s.type,!n.isTouchEvent&&"which"in s&&3===s.which)return;if(n.isTouched&&n.isMoved)return;if(i.noSwiping&&pt(s.target).closest(i.noSwipingSelector?i.noSwipingSelector:`.${i.noSwipingClass}`)[0])return void(t.allowClick=!0);if(i.swipeHandler&&!pt(s).closest(i.swipeHandler)[0])return;r.currentX="touchstart"===s.type?s.targetTouches[0].pageX:s.pageX,r.currentY="touchstart"===s.type?s.targetTouches[0].pageY:s.pageY;const a=r.currentX,o=r.currentY;if(!(St.ios&&!St.cordova&&i.iOSEdgeSwipeDetection&&a<=i.iOSEdgeSwipeThreshold&&a>=dt.screen.width-i.iOSEdgeSwipeThreshold)){if(mt.extend(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),r.startX=a,r.startY=o,n.touchStartTime=mt.now(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,i.threshold>0&&(n.allowThresholdMove=!1),"touchstart"!==s.type){let e=!0;pt(s.target).is(n.formElements)&&(e=!1),ct.activeElement&&pt(ct.activeElement).is(n.formElements)&&ct.activeElement!==s.target&&ct.activeElement.blur(),e&&t.allowTouchMove&&s.preventDefault()}t.emit("touchStart",s)}}.bind(e),e.onTouchMove=function(e){const t=this,n=t.touchEventsData,{params:i,touches:r,rtlTranslate:s}=t;let a=e;if(a.originalEvent&&(a=a.originalEvent),!n.isTouched)return void(n.startMoving&&n.isScrolling&&t.emit("touchMoveOpposite",a));if(n.isTouchEvent&&"mousemove"===a.type)return;const o="touchmove"===a.type?a.targetTouches[0].pageX:a.pageX,l="touchmove"===a.type?a.targetTouches[0].pageY:a.pageY;if(a.preventedByNestedSwiper)return r.startX=o,void(r.startY=l);if(!t.allowTouchMove)return t.allowClick=!1,void(n.isTouched&&(mt.extend(r,{startX:o,startY:l,currentX:o,currentY:l}),n.touchStartTime=mt.now()));if(n.isTouchEvent&&i.touchReleaseOnEdges&&!i.loop)if(t.isVertical()){if(l<r.startY&&t.translate<=t.maxTranslate()||l>r.startY&&t.translate>=t.minTranslate())return n.isTouched=!1,void(n.isMoved=!1)}else if(o<r.startX&&t.translate<=t.maxTranslate()||o>r.startX&&t.translate>=t.minTranslate())return;if(n.isTouchEvent&&ct.activeElement&&a.target===ct.activeElement&&pt(a.target).is(n.formElements))return n.isMoved=!0,void(t.allowClick=!1);if(n.allowTouchCallbacks&&t.emit("touchMove",a),a.targetTouches&&a.targetTouches.length>1)return;r.currentX=o,r.currentY=l;const c=r.currentX-r.startX,d=r.currentY-r.startY;if(void 0===n.isScrolling){let e;t.isHorizontal()&&r.currentY===r.startY||t.isVertical()&&r.currentX===r.startX?n.isScrolling=!1:c*c+d*d>=25&&(e=180*Math.atan2(Math.abs(d),Math.abs(c))/Math.PI,n.isScrolling=t.isHorizontal()?e>i.touchAngle:90-e>i.touchAngle)}if(n.isScrolling&&t.emit("touchMoveOpposite",a),"undefined"==typeof startMoving&&(r.currentX===r.startX&&r.currentY===r.startY||(n.startMoving=!0)),n.isScrolling)return void(n.isTouched=!1);if(!n.startMoving)return;t.allowClick=!1,a.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&a.stopPropagation(),n.isMoved||(i.loop&&t.loopFix(),n.startTranslate=t.getTranslate(),t.setTransition(0),t.animating&&t.$wrapperEl.trigger("webkitTransitionEnd transitionend"),n.allowMomentumBounce=!1,!i.grabCursor||!0!==t.allowSlideNext&&!0!==t.allowSlidePrev||t.setGrabCursor(!0),t.emit("sliderFirstMove",a)),t.emit("sliderMove",a),n.isMoved=!0;let u=t.isHorizontal()?c:d;r.diff=u,u*=i.touchRatio,s&&(u=-u),t.swipeDirection=u>0?"prev":"next",n.currentTranslate=u+n.startTranslate;let p=!0,f=i.resistanceRatio;if(i.touchReleaseOnEdges&&(f=0),u>0&&n.currentTranslate>t.minTranslate()?(p=!1,i.resistance&&(n.currentTranslate=t.minTranslate()-1+(-t.minTranslate()+n.startTranslate+u)**f)):u<0&&n.currentTranslate<t.maxTranslate()&&(p=!1,i.resistance&&(n.currentTranslate=t.maxTranslate()+1-(t.maxTranslate()-n.startTranslate-u)**f)),p&&(a.preventedByNestedSwiper=!0),!t.allowSlideNext&&"next"===t.swipeDirection&&n.currentTranslate<n.startTranslate&&(n.currentTranslate=n.startTranslate),!t.allowSlidePrev&&"prev"===t.swipeDirection&&n.currentTranslate>n.startTranslate&&(n.currentTranslate=n.startTranslate),i.threshold>0){if(!(Math.abs(u)>i.threshold||n.allowThresholdMove))return void(n.currentTranslate=n.startTranslate);if(!n.allowThresholdMove)return n.allowThresholdMove=!0,r.startX=r.currentX,r.startY=r.currentY,n.currentTranslate=n.startTranslate,void(r.diff=t.isHorizontal()?r.currentX-r.startX:r.currentY-r.startY)}i.followFinger&&((i.freeMode||i.watchSlidesProgress||i.watchSlidesVisibility)&&(t.updateActiveIndex(),t.updateSlidesClasses()),i.freeMode&&(0===n.velocities.length&&n.velocities.push({position:r[t.isHorizontal()?"startX":"startY"],time:n.touchStartTime}),n.velocities.push({position:r[t.isHorizontal()?"currentX":"currentY"],time:mt.now()})),t.updateProgress(n.currentTranslate),t.setTranslate(n.currentTranslate))}.bind(e),e.onTouchEnd=function(e){const t=this,n=t.touchEventsData,{params:i,touches:r,rtlTranslate:s,$wrapperEl:a,slidesGrid:o,snapGrid:l}=t;let c=e;if(c.originalEvent&&(c=c.originalEvent),n.allowTouchCallbacks&&t.emit("touchEnd",c),n.allowTouchCallbacks=!1,!n.isTouched)return n.isMoved&&i.grabCursor&&t.setGrabCursor(!1),n.isMoved=!1,void(n.startMoving=!1);i.grabCursor&&n.isMoved&&n.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const d=mt.now(),u=d-n.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(c),t.emit("tap",c),u<300&&d-n.lastClickTime>300&&(n.clickTimeout&&clearTimeout(n.clickTimeout),n.clickTimeout=mt.nextTick(()=>{t&&!t.destroyed&&t.emit("click",c)},300)),u<300&&d-n.lastClickTime<300&&(n.clickTimeout&&clearTimeout(n.clickTimeout),t.emit("doubleTap",c))),n.lastClickTime=mt.now(),mt.nextTick(()=>{t.destroyed||(t.allowClick=!0)}),!n.isTouched||!n.isMoved||!t.swipeDirection||0===r.diff||n.currentTranslate===n.startTranslate)return n.isTouched=!1,n.isMoved=!1,void(n.startMoving=!1);let p;if(n.isTouched=!1,n.isMoved=!1,n.startMoving=!1,p=i.followFinger?s?t.translate:-t.translate:-n.currentTranslate,i.freeMode){if(p<-t.minTranslate())return void t.slideTo(t.activeIndex);if(p>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(i.freeModeMomentum){if(n.velocities.length>1){const e=n.velocities.pop(),r=n.velocities.pop(),s=e.position-r.position,a=e.time-r.time;t.velocity=s/a,t.velocity/=2,Math.abs(t.velocity)<i.freeModeMinimumVelocity&&(t.velocity=0),(a>150||mt.now()-e.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=i.freeModeMomentumVelocityRatio,n.velocities.length=0;let e=1e3*i.freeModeMomentumRatio;const r=t.velocity*e;let o=t.translate+r;s&&(o=-o);let c,d=!1;const u=20*Math.abs(t.velocity)*i.freeModeMomentumBounceRatio;let p;if(o<t.maxTranslate())i.freeModeMomentumBounce?(o+t.maxTranslate()<-u&&(o=t.maxTranslate()-u),c=t.maxTranslate(),d=!0,n.allowMomentumBounce=!0):o=t.maxTranslate(),i.loop&&i.centeredSlides&&(p=!0);else if(o>t.minTranslate())i.freeModeMomentumBounce?(o-t.minTranslate()>u&&(o=t.minTranslate()+u),c=t.minTranslate(),d=!0,n.allowMomentumBounce=!0):o=t.minTranslate(),i.loop&&i.centeredSlides&&(p=!0);else if(i.freeModeSticky){let e;for(let t=0;t<l.length;t+=1)if(l[t]>-o){e=t;break}o=-(o=Math.abs(l[e]-o)<Math.abs(l[e-1]-o)||"next"===t.swipeDirection?l[e]:l[e-1])}if(p&&t.once("transitionEnd",()=>{t.loopFix()}),0!==t.velocity)e=s?Math.abs((-o-t.translate)/t.velocity):Math.abs((o-t.translate)/t.velocity);else if(i.freeModeSticky)return void t.slideToClosest();i.freeModeMomentumBounce&&d?(t.updateProgress(c),t.setTransition(e),t.setTranslate(o),t.transitionStart(!0,t.swipeDirection),t.animating=!0,a.transitionEnd(()=>{t&&!t.destroyed&&n.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(i.speed),t.setTranslate(c),a.transitionEnd(()=>{t&&!t.destroyed&&t.transitionEnd()}))})):t.velocity?(t.updateProgress(o),t.setTransition(e),t.setTranslate(o),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,a.transitionEnd(()=>{t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(o),t.updateActiveIndex(),t.updateSlidesClasses()}else if(i.freeModeSticky)return void t.slideToClosest();return void((!i.freeModeMomentum||u>=i.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses()))}let f=0,h=t.slidesSizesGrid[0];for(let e=0;e<o.length;e+=i.slidesPerGroup)void 0!==o[e+i.slidesPerGroup]?p>=o[e]&&p<o[e+i.slidesPerGroup]&&(f=e,h=o[e+i.slidesPerGroup]-o[e]):p>=o[e]&&(f=e,h=o[o.length-1]-o[o.length-2]);const m=(p-o[f])/h;if(u>i.longSwipesMs){if(!i.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(m>=i.longSwipesRatio?t.slideTo(f+i.slidesPerGroup):t.slideTo(f)),"prev"===t.swipeDirection&&(m>1-i.longSwipesRatio?t.slideTo(f+i.slidesPerGroup):t.slideTo(f))}else{if(!i.shortSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&t.slideTo(f+i.slidesPerGroup),"prev"===t.swipeDirection&&t.slideTo(f)}}.bind(e),e.onClick=function(e){const t=this;t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}.bind(e);const s="container"===t.touchEventsTarget?i:r,a=!!t.nested;if(gt.touch||!gt.pointerEvents&&!gt.prefixedPointerEvents){if(gt.touch){const i=!("touchstart"!==n.start||!gt.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};s.addEventListener(n.start,e.onTouchStart,i),s.addEventListener(n.move,e.onTouchMove,gt.passiveListener?{passive:!1,capture:a}:a),s.addEventListener(n.end,e.onTouchEnd,i)}(t.simulateTouch&&!St.ios&&!St.android||t.simulateTouch&&!gt.touch&&St.ios)&&(s.addEventListener("mousedown",e.onTouchStart,!1),ct.addEventListener("mousemove",e.onTouchMove,a),ct.addEventListener("mouseup",e.onTouchEnd,!1))}else s.addEventListener(n.start,e.onTouchStart,!1),ct.addEventListener(n.move,e.onTouchMove,a),ct.addEventListener(n.end,e.onTouchEnd,!1);(t.preventClicks||t.preventClicksPropagation)&&s.addEventListener("click",e.onClick,!0),e.on("resize observerUpdate",_t,!0)},detachEvents:function(){const e=this,{params:t,touchEvents:n,el:i,wrapperEl:r}=e,s="container"===t.touchEventsTarget?i:r,a=!!t.nested;if(gt.touch||!gt.pointerEvents&&!gt.prefixedPointerEvents){if(gt.touch){const i=!("onTouchStart"!==n.start||!gt.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};s.removeEventListener(n.start,e.onTouchStart,i),s.removeEventListener(n.move,e.onTouchMove,a),s.removeEventListener(n.end,e.onTouchEnd,i)}(t.simulateTouch&&!St.ios&&!St.android||t.simulateTouch&&!gt.touch&&St.ios)&&(s.removeEventListener("mousedown",e.onTouchStart,!1),ct.removeEventListener("mousemove",e.onTouchMove,a),ct.removeEventListener("mouseup",e.onTouchEnd,!1))}else s.removeEventListener(n.start,e.onTouchStart,!1),ct.removeEventListener(n.move,e.onTouchMove,a),ct.removeEventListener(n.end,e.onTouchEnd,!1);(t.preventClicks||t.preventClicksPropagation)&&s.removeEventListener("click",e.onClick,!0),e.off("resize observerUpdate",_t)}};var Dt={setBreakpoint:function(){const e=this,{activeIndex:t,loopedSlides:n=0,params:i}=e,r=i.breakpoints;if(!r||r&&0===Object.keys(r).length)return;const s=e.getBreakpoint(r);if(s&&e.currentBreakpoint!==s){const a=s in r?r[s]:e.originalParams,o=i.loop&&a.slidesPerView!==i.slidesPerView;mt.extend(e.params,a),mt.extend(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=s,o&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-n+e.loopedSlides,0,!1)),e.emit("breakpoint",a)}},getBreakpoint:function(e){if(!e)return;let t=!1;const n=[];Object.keys(e).forEach(e=>{n.push(e)}),n.sort((e,t)=>parseInt(e,10)-parseInt(t,10));for(let e=0;e<n.length;e+=1){const i=n[e];i>=dt.innerWidth&&!t&&(t=i)}return t||"max"}};const Ot=function(){return{isIE:!!dt.navigator.userAgent.match(/Trident/g)||!!dt.navigator.userAgent.match(/MSIE/g),isSafari:function(){const e=dt.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}(),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(dt.navigator.userAgent)}}();var kt={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,preventIntercationOnTransition:!1,iOSEdgeSwipeDetection:!1,iOSEdgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!0,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0};const It={update:yt,translate:bt,transition:wt,slide:Et,loop:Tt,grabCursor:xt,manipulation:Ct,events:At,breakpoints:Dt,checkOverflow:{checkOverflow:function(){const e=this,t=e.isLocked;e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),t&&t!==e.isLocked&&(e.isEnd=!1,e.navigation.update())}},classes:{addClasses:function(){const{classNames:e,params:t,rtl:n,$el:i}=this,r=[];r.push(t.direction),t.freeMode&&r.push("free-mode"),gt.flexbox||r.push("no-flexbox"),t.autoHeight&&r.push("autoheight"),n&&r.push("rtl"),t.slidesPerColumn>1&&r.push("multirow"),St.android&&r.push("android"),St.ios&&r.push("ios"),Ot.isIE&&(gt.pointerEvents||gt.prefixedPointerEvents)&&r.push(`wp8-${t.direction}`),r.forEach(n=>{e.push(t.containerModifierClass+n)}),i.addClass(e.join(" "))},removeClasses:function(){const{$el:e,classNames:t}=this;e.removeClass(t.join(" "))}},images:{loadImage:function(e,t,n,i,r,s){let a;function o(){s&&s()}e.complete&&r?o():t?((a=new dt.Image).onload=o,a.onerror=o,i&&(a.sizes=i),n&&(a.srcset=n),t&&(a.src=t)):o()},preloadImages:function(){const e=this;function t(){void 0!==e&&null!==e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(let n=0;n<e.imagesToLoad.length;n+=1){const i=e.imagesToLoad[n];e.loadImage(i,i.currentSrc||i.getAttribute("src"),i.srcset||i.getAttribute("srcset"),i.sizes||i.getAttribute("sizes"),!0,t)}}}},Nt={};class Mt extends vt{constructor(...e){let t,n;1===e.length&&e[0].constructor&&e[0].constructor===Object?n=e[0]:[t,n]=e,n||(n={}),n=mt.extend({},n),t&&!n.el&&(n.el=t),super(n),Object.keys(It).forEach(e=>{Object.keys(It[e]).forEach(t=>{Mt.prototype[t]||(Mt.prototype[t]=It[e][t])})});const i=this;void 0===i.modules&&(i.modules={}),Object.keys(i.modules).forEach(e=>{const t=i.modules[e];if(t.params){const e=Object.keys(t.params)[0],i=t.params[e];if("object"!=typeof i)return;if(!(e in n&&"enabled"in i))return;!0===n[e]&&(n[e]={enabled:!0}),"object"!=typeof n[e]||"enabled"in n[e]||(n[e].enabled=!0),n[e]||(n[e]={enabled:!1})}});const r=mt.extend({},kt);i.useModulesParams(r),i.params=mt.extend({},r,Nt,n),i.originalParams=mt.extend({},i.params),i.passedParams=mt.extend({},n),i.$=pt;const s=pt(i.params.el);if(!(t=s[0]))return;if(s.length>1){const e=[];return s.each((t,i)=>{const r=mt.extend({},n,{el:i});e.push(new Mt(r))}),e}t.swiper=i,s.data("swiper",i);const a=s.children(`.${i.params.wrapperClass}`);return mt.extend(i,{$el:s,el:t,$wrapperEl:a,wrapperEl:a[0],classNames:[],slides:pt(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===i.params.direction,isVertical:()=>"vertical"===i.params.direction,rtl:"rtl"===t.dir.toLowerCase()||"rtl"===s.css("direction"),rtlTranslate:"horizontal"===i.params.direction&&("rtl"===t.dir.toLowerCase()||"rtl"===s.css("direction")),wrongRTL:"-webkit-box"===a.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,progress:0,velocity:0,animating:!1,allowSlideNext:i.params.allowSlideNext,allowSlidePrev:i.params.allowSlidePrev,touchEvents:function(){const e=["touchstart","touchmove","touchend"];let t=["mousedown","mousemove","mouseup"];return gt.pointerEvents?t=["pointerdown","pointermove","pointerup"]:gt.prefixedPointerEvents&&(t=["MSPointerDown","MSPointerMove","MSPointerUp"]),i.touchEventsTouch={start:e[0],move:e[1],end:e[2]},i.touchEventsDesktop={start:t[0],move:t[1],end:t[2]},gt.touch||!i.params.simulateTouch?i.touchEventsTouch:i.touchEventsDesktop}(),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video",lastClickTime:mt.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:i.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),i.useModules(),i.params.init&&i.init(),i}slidesPerViewDynamic(){const{params:e,slides:t,slidesGrid:n,size:i,activeIndex:r}=this;let s=1;if(e.centeredSlides){let e,n=t[r].swiperSlideSize;for(let a=r+1;a<t.length;a+=1)t[a]&&!e&&(s+=1,(n+=t[a].swiperSlideSize)>i&&(e=!0));for(let a=r-1;a>=0;a-=1)t[a]&&!e&&(s+=1,(n+=t[a].swiperSlideSize)>i&&(e=!0))}else for(let e=r+1;e<t.length;e+=1)n[e]-n[r]<i&&(s+=1);return s}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:n}=e;function i(){const t=e.rtlTranslate?-1*e.translate:e.translate,n=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(n),e.updateActiveIndex(),e.updateSlidesClasses()}let r;n.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode?(i(),e.params.autoHeight&&e.updateAutoHeight()):(r=("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0))||i(),n.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}init(){const e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"))}destroy(e=!0,t=!0){const n=this,{params:i,$el:r,$wrapperEl:s,slides:a}=n;n.emit("beforeDestroy"),n.initialized=!1,n.detachEvents(),i.loop&&n.loopDestroy(),t&&(n.removeClasses(),r.removeAttr("style"),s.removeAttr("style"),a&&a.length&&a.removeClass([i.slideVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index").removeAttr("data-swiper-column").removeAttr("data-swiper-row")),n.emit("destroy"),Object.keys(n.eventsListeners).forEach(e=>{n.off(e)}),!1!==e&&(n.$el[0].swiper=null,n.$el.data("swiper",null),mt.deleteProps(n)),n.destroyed=!0}static extendDefaults(e){mt.extend(Nt,e)}static get extendedDefaults(){return Nt}static get defaults(){return kt}static get Class(){return vt}static get $(){return pt}}var Lt={name:"device",proto:{device:St},static:{device:St}},$t={name:"support",proto:{support:gt},static:{support:gt}},Pt={name:"browser",proto:{browser:Ot},static:{browser:Ot}},Ht={name:"resize",create(){const e=this;mt.extend(e,{resize:{resizeHandler(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init(){dt.addEventListener("resize",this.resize.resizeHandler),dt.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy(){dt.removeEventListener("resize",this.resize.resizeHandler),dt.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}};const zt={func:dt.MutationObserver||dt.WebkitMutationObserver,attach(e,t={}){const n=this,i=new(0,zt.func)(e=>{e.forEach(e=>{n.emit("observerUpdate",e)})});i.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),n.observer.observers.push(i)},init(){const e=this;if(gt.observer&&e.params.observer){if(e.params.observeParents){const t=e.$el.parents();for(let n=0;n<t.length;n+=1)e.observer.attach(t[n])}e.observer.attach(e.$el[0],{childList:!1}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy(){this.observer.observers.forEach(e=>{e.disconnect()}),this.observer.observers=[]}};var jt={name:"observer",params:{observer:!1,observeParents:!1},create(){mt.extend(this,{observer:{init:zt.init.bind(this),attach:zt.attach.bind(this),destroy:zt.destroy.bind(this),observers:[]}})},on:{init(){this.observer.init()},destroy(){this.observer.destroy()}}};const Rt={update(e){const t=this,{slidesPerView:n,slidesPerGroup:i,centeredSlides:r}=t.params,{from:s,to:a,slides:o,slidesGrid:l,renderSlide:c,offset:d}=t.virtual;t.updateActiveIndex();const u=t.activeIndex||0;let p,f,h;p=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",r?(f=Math.floor(n/2)+i,h=Math.floor(n/2)+i):(f=n+(i-1),h=i);const m=Math.max((u||0)-h,0),g=Math.min((u||0)+f,o.length-1),v=(t.slidesGrid[m]||0)-(t.slidesGrid[0]||0);function y(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(mt.extend(t.virtual,{from:m,to:g,offset:v,slidesGrid:t.slidesGrid}),s===m&&a===g&&!e)return t.slidesGrid!==l&&v!==d&&t.slides.css(p,`${v}px`),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:v,from:m,to:g,slides:function(){const e=[];for(let t=m;t<=g;t+=1)e.push(o[t]);return e}()}),void y();const b=[],w=[];if(e)t.$wrapperEl.find(`.${t.params.slideClass}`).remove();else for(let e=s;e<=a;e+=1)(e<m||e>g)&&t.$wrapperEl.find(`.${t.params.slideClass}[data-swiper-slide-index="${e}"]`).remove();for(let t=0;t<o.length;t+=1)t>=m&&t<=g&&(void 0===a||e?w.push(t):(t>a&&w.push(t),t<s&&b.push(t)));w.forEach(e=>{t.$wrapperEl.append(c(o[e],e))}),b.sort((e,t)=>e<t).forEach(e=>{t.$wrapperEl.prepend(c(o[e],e))}),t.$wrapperEl.children(".swiper-slide").css(p,`${v}px`),y()},renderSlide(e,t){const n=this,i=n.params.virtual;if(i.cache&&n.virtual.cache[t])return n.virtual.cache[t];const r=i.renderSlide?pt(i.renderSlide.call(n,e,t)):pt(`<div class="${n.params.slideClass}" data-swiper-slide-index="${t}">${e}</div>`);return r.attr("data-swiper-slide-index")||r.attr("data-swiper-slide-index",t),i.cache&&(n.virtual.cache[t]=r),r},appendSlide(e){this.virtual.slides.push(e),this.virtual.update(!0)},prependSlide(e){const t=this;if(t.virtual.slides.unshift(e),t.params.virtual.cache){const e=t.virtual.cache,n={};Object.keys(e).forEach(t=>{n[t+1]=e[t]}),t.virtual.cache=n}t.virtual.update(!0),t.slideNext(0)}};var Wt={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null}},create(){mt.extend(this,{virtual:{update:Rt.update.bind(this),appendSlide:Rt.appendSlide.bind(this),prependSlide:Rt.prependSlide.bind(this),renderSlide:Rt.renderSlide.bind(this),slides:this.params.virtual.slides,cache:{}}})},on:{beforeInit(){if(!this.params.virtual.enabled)return;this.classNames.push(`${this.params.containerModifierClass}virtual`);const e={watchSlidesProgress:!0};mt.extend(this.params,e),mt.extend(this.originalParams,e),this.virtual.update()},setTranslate(){this.params.virtual.enabled&&this.virtual.update()}}};const Bt={handle(e){const t=this,{rtlTranslate:n}=t;let i=e;i.originalEvent&&(i=i.originalEvent);const r=i.keyCode||i.charCode;if(!t.allowSlideNext&&(t.isHorizontal()&&39===r||t.isVertical()&&40===r))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&37===r||t.isVertical()&&38===r))return!1;if(!(i.shiftKey||i.altKey||i.ctrlKey||i.metaKey||ct.activeElement&&ct.activeElement.nodeName&&("input"===ct.activeElement.nodeName.toLowerCase()||"textarea"===ct.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(37===r||39===r||38===r||40===r)){let e=!1;if(t.$el.parents(`.${t.params.slideClass}`).length>0&&0===t.$el.parents(`.${t.params.slideActiveClass}`).length)return;const i=dt.innerWidth,r=dt.innerHeight,s=t.$el.offset();n&&(s.left-=t.$el[0].scrollLeft);const a=[[s.left,s.top],[s.left+t.width,s.top],[s.left,s.top+t.height],[s.left+t.width,s.top+t.height]];for(let t=0;t<a.length;t+=1){const n=a[t];n[0]>=0&&n[0]<=i&&n[1]>=0&&n[1]<=r&&(e=!0)}if(!e)return}t.isHorizontal()?(37!==r&&39!==r||(i.preventDefault?i.preventDefault():i.returnValue=!1),(39===r&&!n||37===r&&n)&&t.slideNext(),(37===r&&!n||39===r&&n)&&t.slidePrev()):(38!==r&&40!==r||(i.preventDefault?i.preventDefault():i.returnValue=!1),40===r&&t.slideNext(),38===r&&t.slidePrev()),t.emit("keyPress",r)}},enable(){this.keyboard.enabled||(pt(ct).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable(){this.keyboard.enabled&&(pt(ct).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}};var Ft={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0}},create(){mt.extend(this,{keyboard:{enabled:!1,enable:Bt.enable.bind(this),disable:Bt.disable.bind(this),handle:Bt.handle.bind(this)}})},on:{init(){const e=this;e.params.keyboard.enabled&&e.keyboard.enable()},destroy(){const e=this;e.keyboard.enabled&&e.keyboard.disable()}}};const Vt={lastScrollTime:mt.now(),event:dt.navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){let e="onwheel"in ct;if(!e){const t=ct.createElement("div");t.setAttribute("onwheel","return;"),e="function"==typeof t.onwheel}return!e&&ct.implementation&&ct.implementation.hasFeature&&!0!==ct.implementation.hasFeature("","")&&(e=ct.implementation.hasFeature("Events.wheel","3.0")),e}()?"wheel":"mousewheel",normalize(e){let t=0,n=0,i=0,r=0;return"detail"in e&&(n=e.detail),"wheelDelta"in e&&(n=-e.wheelDelta/120),"wheelDeltaY"in e&&(n=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=n,n=0),i=10*t,r=10*n,"deltaY"in e&&(r=e.deltaY),"deltaX"in e&&(i=e.deltaX),(i||r)&&e.deltaMode&&(1===e.deltaMode?(i*=40,r*=40):(i*=800,r*=800)),i&&!t&&(t=i<1?-1:1),r&&!n&&(n=r<1?-1:1),{spinX:t,spinY:n,pixelX:i,pixelY:r}},handleMouseEnter(){this.mouseEntered=!0},handleMouseLeave(){this.mouseEntered=!1},handle(e){let t=e;const n=this,i=n.params.mousewheel;if(!n.mouseEntered&&!i.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);let r=0;const s=n.rtlTranslate?-1:1,a=Vt.normalize(t);if(i.forceToAxis)if(n.isHorizontal()){if(!(Math.abs(a.pixelX)>Math.abs(a.pixelY)))return!0;r=a.pixelX*s}else{if(!(Math.abs(a.pixelY)>Math.abs(a.pixelX)))return!0;r=a.pixelY}else r=Math.abs(a.pixelX)>Math.abs(a.pixelY)?-a.pixelX*s:-a.pixelY;if(0===r)return!0;if(i.invert&&(r=-r),n.params.freeMode){n.params.loop&&n.loopFix();let e=n.getTranslate()+r*i.sensitivity;const s=n.isBeginning,a=n.isEnd;if(e>=n.minTranslate()&&(e=n.minTranslate()),e<=n.maxTranslate()&&(e=n.maxTranslate()),n.setTransition(0),n.setTranslate(e),n.updateProgress(),n.updateActiveIndex(),n.updateSlidesClasses(),(!s&&n.isBeginning||!a&&n.isEnd)&&n.updateSlidesClasses(),n.params.freeModeSticky&&(clearTimeout(n.mousewheel.timeout),n.mousewheel.timeout=mt.nextTick(()=>{n.slideToClosest()},300)),n.emit("scroll",t),n.params.autoplay&&n.params.autoplayDisableOnInteraction&&n.stopAutoplay(),e===n.minTranslate()||e===n.maxTranslate())return!0}else{if(mt.now()-n.mousewheel.lastScrollTime>60)if(r<0)if(n.isEnd&&!n.params.loop||n.animating){if(i.releaseOnEdges)return!0}else n.slideNext(),n.emit("scroll",t);else if(n.isBeginning&&!n.params.loop||n.animating){if(i.releaseOnEdges)return!0}else n.slidePrev(),n.emit("scroll",t);n.mousewheel.lastScrollTime=(new dt.Date).getTime()}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},enable(){const e=this;if(!Vt.event)return!1;if(e.mousewheel.enabled)return!1;let t=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(t=pt(e.params.mousewheel.eventsTarged)),t.on("mouseenter",e.mousewheel.handleMouseEnter),t.on("mouseleave",e.mousewheel.handleMouseLeave),t.on(Vt.event,e.mousewheel.handle),e.mousewheel.enabled=!0,!0},disable(){const e=this;if(!Vt.event)return!1;if(!e.mousewheel.enabled)return!1;let t=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(t=pt(e.params.mousewheel.eventsTarged)),t.off(Vt.event,e.mousewheel.handle),e.mousewheel.enabled=!1,!0}};const Gt={update(){const e=this,t=e.params.navigation;if(e.params.loop)return;const{$nextEl:n,$prevEl:i}=e.navigation;i&&i.length>0&&(e.isBeginning?i.addClass(t.disabledClass):i.removeClass(t.disabledClass),i[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass)),n&&n.length>0&&(e.isEnd?n.addClass(t.disabledClass):n.removeClass(t.disabledClass),n[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass))},init(){const e=this,t=e.params.navigation;if(!t.nextEl&&!t.prevEl)return;let n,i;t.nextEl&&(n=pt(t.nextEl),e.params.uniqueNavElements&&"string"==typeof t.nextEl&&n.length>1&&1===e.$el.find(t.nextEl).length&&(n=e.$el.find(t.nextEl))),t.prevEl&&(i=pt(t.prevEl),e.params.uniqueNavElements&&"string"==typeof t.prevEl&&i.length>1&&1===e.$el.find(t.prevEl).length&&(i=e.$el.find(t.prevEl))),n&&n.length>0&&n.on("click",t=>{t.preventDefault(),e.isEnd&&!e.params.loop||e.slideNext()}),i&&i.length>0&&i.on("click",t=>{t.preventDefault(),e.isBeginning&&!e.params.loop||e.slidePrev()}),mt.extend(e.navigation,{$nextEl:n,nextEl:n&&n[0],$prevEl:i,prevEl:i&&i[0]})},destroy(){const e=this,{$nextEl:t,$prevEl:n}=e.navigation;t&&t.length&&(t.off("click"),t.removeClass(e.params.navigation.disabledClass)),n&&n.length&&(n.off("click"),n.removeClass(e.params.navigation.disabledClass))}};const qt={update(){const e=this,t=e.rtl,n=e.params.pagination;if(!n.el||!e.pagination.el||!e.pagination.$el||0===e.pagination.$el.length)return;const i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,r=e.pagination.$el;let s;const a=e.params.loop?Math.ceil((i-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?((s=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup))>i-1-2*e.loopedSlides&&(s-=i-2*e.loopedSlides),s>a-1&&(s-=a),s<0&&"bullets"!==e.params.paginationType&&(s=a+s)):s=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===n.type&&e.pagination.bullets&&e.pagination.bullets.length>0){const i=e.pagination.bullets;let a,o,l;if(n.dynamicBullets&&(e.pagination.bulletSize=i.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),r.css(e.isHorizontal()?"width":"height",`${e.pagination.bulletSize*(n.dynamicMainBullets+4)}px`),n.dynamicMainBullets>1&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=s-e.previousIndex,e.pagination.dynamicBulletIndex>n.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=n.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),a=s-e.pagination.dynamicBulletIndex,l=((o=a+(Math.min(i.length,n.dynamicMainBullets)-1))+a)/2),i.removeClass(`${n.bulletActiveClass} ${n.bulletActiveClass}-next ${n.bulletActiveClass}-next-next ${n.bulletActiveClass}-prev ${n.bulletActiveClass}-prev-prev ${n.bulletActiveClass}-main`),r.length>1)i.each((e,t)=>{const i=pt(t),r=i.index();r===s&&i.addClass(n.bulletActiveClass),n.dynamicBullets&&(r>=a&&r<=o&&i.addClass(`${n.bulletActiveClass}-main`),r===a&&i.prev().addClass(`${n.bulletActiveClass}-prev`).prev().addClass(`${n.bulletActiveClass}-prev-prev`),r===o&&i.next().addClass(`${n.bulletActiveClass}-next`).next().addClass(`${n.bulletActiveClass}-next-next`))});else{if(i.eq(s).addClass(n.bulletActiveClass),n.dynamicBullets){const e=i.eq(a),t=i.eq(o);for(let e=a;e<=o;e+=1)i.eq(e).addClass(`${n.bulletActiveClass}-main`);e.prev().addClass(`${n.bulletActiveClass}-prev`).prev().addClass(`${n.bulletActiveClass}-prev-prev`),t.next().addClass(`${n.bulletActiveClass}-next`).next().addClass(`${n.bulletActiveClass}-next-next`)}}if(n.dynamicBullets){const r=Math.min(i.length,n.dynamicMainBullets+4),s=(e.pagination.bulletSize*r-e.pagination.bulletSize)/2-l*e.pagination.bulletSize,a=t?"right":"left";i.css(e.isHorizontal()?a:"top",`${s}px`)}}if("fraction"===n.type&&(r.find(`.${n.currentClass}`).text(s+1),r.find(`.${n.totalClass}`).text(a)),"progressbar"===n.type){let t;t=n.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";const i=(s+1)/a;let o=1,l=1;"horizontal"===t?o=i:l=i,r.find(`.${n.progressbarFillClass}`).transform(`translate3d(0,0,0) scaleX(${o}) scaleY(${l})`).transition(e.params.speed)}"custom"===n.type&&n.renderCustom?(r.html(n.renderCustom(e,s+1,a)),e.emit("paginationRender",e,r[0])):e.emit("paginationUpdate",e,r[0]),r[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](n.lockClass)},render(){const e=this,t=e.params.pagination;if(!t.el||!e.pagination.el||!e.pagination.$el||0===e.pagination.$el.length)return;const n=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,i=e.pagination.$el;let r="";if("bullets"===t.type){const s=e.params.loop?Math.ceil((n-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;for(let n=0;n<s;n+=1)t.renderBullet?r+=t.renderBullet.call(e,n,t.bulletClass):r+=`<${t.bulletElement} class="${t.bulletClass}"></${t.bulletElement}>`;i.html(r),e.pagination.bullets=i.find(`.${t.bulletClass}`)}"fraction"===t.type&&(r=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):`<span class="${t.currentClass}"></span>`+" / "+`<span class="${t.totalClass}"></span>`,i.html(r)),"progressbar"===t.type&&(r=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):`<span class="${t.progressbarFillClass}"></span>`,i.html(r)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])},init(){const e=this,t=e.params.pagination;if(!t.el)return;let n=pt(t.el);0!==n.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&n.length>1&&1===e.$el.find(t.el).length&&(n=e.$el.find(t.el)),"bullets"===t.type&&t.clickable&&n.addClass(t.clickableClass),n.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(n.addClass(`${t.modifierClass}${t.type}-dynamic`),e.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&n.addClass(t.progressbarOppositeClass),t.clickable&&n.on("click",`.${t.bulletClass}`,function(t){t.preventDefault();let n=pt(this).index()*e.params.slidesPerGroup;e.params.loop&&(n+=e.loopedSlides),e.slideTo(n)}),mt.extend(e.pagination,{$el:n,el:n[0]}))},destroy(){const e=this.params.pagination;if(!e.el||!this.pagination.el||!this.pagination.$el||0===this.pagination.$el.length)return;const t=this.pagination.$el;t.removeClass(e.hiddenClass),t.removeClass(e.modifierClass+e.type),this.pagination.bullets&&this.pagination.bullets.removeClass(e.bulletActiveClass),e.clickable&&t.off("click",`.${e.bulletClass}`)}};const Xt={setTranslate(){const e=this;if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:t,rtlTranslate:n,progress:i}=e,{dragSize:r,trackSize:s,$dragEl:a,$el:o}=t,l=e.params.scrollbar;let c=r,d=(s-r)*i;n?(d=-d)>0?(c=r-d,d=0):-d+r>s&&(c=s+d):d<0?(c=r+d,d=0):d+r>s&&(c=s-d),e.isHorizontal()?(gt.transforms3d?a.transform(`translate3d(${d}px, 0, 0)`):a.transform(`translateX(${d}px)`),a[0].style.width=`${c}px`):(gt.transforms3d?a.transform(`translate3d(0px, ${d}px, 0)`):a.transform(`translateY(${d}px)`),a[0].style.height=`${c}px`),l.hide&&(clearTimeout(e.scrollbar.timeout),o[0].style.opacity=1,e.scrollbar.timeout=setTimeout(()=>{o[0].style.opacity=0,o.transition(400)},1e3))},setTransition(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize(){const e=this;if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:t}=e,{$dragEl:n,$el:i}=t;n[0].style.width="",n[0].style.height="";const r=e.isHorizontal()?i[0].offsetWidth:i[0].offsetHeight,s=e.size/e.virtualSize,a=s*(r/e.size);let o;o="auto"===e.params.scrollbar.dragSize?r*s:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?n[0].style.width=`${o}px`:n[0].style.height=`${o}px`,i[0].style.display=s>=1?"none":"",e.params.scrollbarHide&&(i[0].style.opacity=0),mt.extend(t,{trackSize:r,divider:s,moveDivider:a,dragSize:o}),t.$el[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](e.params.scrollbar.lockClass)},setDragPosition(e){const{scrollbar:t,rtlTranslate:n}=this,{$el:i,dragSize:r,trackSize:s}=t;let a,o;o=((a=this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY)-i.offset()[this.isHorizontal()?"left":"top"]-r/2)/(s-r),o=Math.max(Math.min(o,1),0),n&&(o=1-o);const l=this.minTranslate()+(this.maxTranslate()-this.minTranslate())*o;this.updateProgress(l),this.setTranslate(l),this.updateActiveIndex(),this.updateSlidesClasses()},onDragStart(e){const t=this.params.scrollbar,{scrollbar:n,$wrapperEl:i}=this,{$el:r,$dragEl:s}=n;this.scrollbar.isTouched=!0,e.preventDefault(),e.stopPropagation(),i.transition(100),s.transition(100),n.setDragPosition(e),clearTimeout(this.scrollbar.dragTimeout),r.transition(0),t.hide&&r.css("opacity",1),this.emit("scrollbarDragStart",e)},onDragMove(e){const{scrollbar:t,$wrapperEl:n}=this,{$el:i,$dragEl:r}=t;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),n.transition(0),i.transition(0),r.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd(e){const t=this,n=t.params.scrollbar,{scrollbar:i}=t,{$el:r}=i;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,n.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=mt.nextTick(()=>{r.css("opacity",0),r.transition(400)},1e3)),t.emit("scrollbarDragEnd",e),n.snapOnRelease&&t.slideToClosest())},enableDraggable(){const e=this;if(!e.params.scrollbar.el)return;const{scrollbar:t,touchEvents:n,touchEventsDesktop:i,params:r}=e,s=t.$el[0],a=!(!gt.passiveListener||!r.passiveListener)&&{passive:!1,capture:!1},o=!(!gt.passiveListener||!r.passiveListener)&&{passive:!0,capture:!1};gt.touch||!gt.pointerEvents&&!gt.prefixedPointerEvents?(gt.touch&&(s.addEventListener(n.start,e.scrollbar.onDragStart,a),s.addEventListener(n.move,e.scrollbar.onDragMove,a),s.addEventListener(n.end,e.scrollbar.onDragEnd,o)),(r.simulateTouch&&!St.ios&&!St.android||r.simulateTouch&&!gt.touch&&St.ios)&&(s.addEventListener("mousedown",e.scrollbar.onDragStart,a),ct.addEventListener("mousemove",e.scrollbar.onDragMove,a),ct.addEventListener("mouseup",e.scrollbar.onDragEnd,o))):(s.addEventListener(i.start,e.scrollbar.onDragStart,a),ct.addEventListener(i.move,e.scrollbar.onDragMove,a),ct.addEventListener(i.end,e.scrollbar.onDragEnd,o))},disableDraggable(){const e=this;if(!e.params.scrollbar.el)return;const{scrollbar:t,touchEvents:n,touchEventsDesktop:i,params:r}=e,s=t.$el[0],a=!(!gt.passiveListener||!r.passiveListener)&&{passive:!1,capture:!1},o=!(!gt.passiveListener||!r.passiveListener)&&{passive:!0,capture:!1};gt.touch||!gt.pointerEvents&&!gt.prefixedPointerEvents?(gt.touch&&(s.removeEventListener(n.start,e.scrollbar.onDragStart,a),s.removeEventListener(n.move,e.scrollbar.onDragMove,a),s.removeEventListener(n.end,e.scrollbar.onDragEnd,o)),(r.simulateTouch&&!St.ios&&!St.android||r.simulateTouch&&!gt.touch&&St.ios)&&(s.removeEventListener("mousedown",e.scrollbar.onDragStart,a),ct.removeEventListener("mousemove",e.scrollbar.onDragMove,a),ct.removeEventListener("mouseup",e.scrollbar.onDragEnd,o))):(s.removeEventListener(i.start,e.scrollbar.onDragStart,a),ct.removeEventListener(i.move,e.scrollbar.onDragMove,a),ct.removeEventListener(i.end,e.scrollbar.onDragEnd,o))},init(){const e=this;if(!e.params.scrollbar.el)return;const{scrollbar:t,$el:n}=e,i=e.params.scrollbar;let r=pt(i.el);e.params.uniqueNavElements&&"string"==typeof i.el&&r.length>1&&1===n.find(i.el).length&&(r=n.find(i.el));let s=r.find(`.${e.params.scrollbar.dragClass}`);0===s.length&&(s=pt(`<div class="${e.params.scrollbar.dragClass}"></div>`),r.append(s)),mt.extend(t,{$el:r,el:r[0],$dragEl:s,dragEl:s[0]}),i.draggable&&t.enableDraggable()},destroy(){this.scrollbar.disableDraggable()}};const Yt={setTransform(e,t){const{rtl:n}=this,i=pt(e),r=n?-1:1,s=i.attr("data-swiper-parallax")||"0";let a=i.attr("data-swiper-parallax-x"),o=i.attr("data-swiper-parallax-y");const l=i.attr("data-swiper-parallax-scale"),c=i.attr("data-swiper-parallax-opacity");if(a||o?(a=a||"0",o=o||"0"):this.isHorizontal()?(a=s,o="0"):(o=s,a="0"),a=a.indexOf("%")>=0?`${parseInt(a,10)*t*r}%`:`${a*t*r}px`,o=o.indexOf("%")>=0?`${parseInt(o,10)*t}%`:`${o*t}px`,void 0!==c&&null!==c){const e=c-(c-1)*(1-Math.abs(t));i[0].style.opacity=e}if(void 0===l||null===l)i.transform(`translate3d(${a}, ${o}, 0px)`);else{const e=l-(l-1)*(1-Math.abs(t));i.transform(`translate3d(${a}, ${o}, 0px) scale(${e})`)}},setTranslate(){const e=this,{$el:t,slides:n,progress:i,snapGrid:r}=e;t.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each((t,n)=>{e.parallax.setTransform(n,i)}),n.each((t,n)=>{let s=n.progress;e.params.slidesPerGroup>1&&"auto"!==e.params.slidesPerView&&(s+=Math.ceil(t/2)-i*(r.length-1)),s=Math.min(Math.max(s,-1),1),pt(n).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each((t,n)=>{e.parallax.setTransform(n,s)})})},setTransition(e=this.params.speed){const{$el:t}=this;t.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each((t,n)=>{const i=pt(n);let r=parseInt(i.attr("data-swiper-parallax-duration"),10)||e;0===e&&(r=0),i.transition(r)})}};const Ut={getDistanceBetweenTouches(e){if(e.targetTouches.length<2)return 1;const t=e.targetTouches[0].pageX,n=e.targetTouches[0].pageY,i=e.targetTouches[1].pageX,r=e.targetTouches[1].pageY;return Math.sqrt((i-t)**2+(r-n)**2)},onGestureStart(e){const t=this,n=t.params.zoom,i=t.zoom,{gesture:r}=i;if(i.fakeGestureTouched=!1,i.fakeGestureMoved=!1,!gt.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;i.fakeGestureTouched=!0,r.scaleStart=Ut.getDistanceBetweenTouches(e)}r.$slideEl&&r.$slideEl.length||(r.$slideEl=pt(e.target).closest(".swiper-slide"),0===r.$slideEl.length&&(r.$slideEl=t.slides.eq(t.activeIndex)),r.$imageEl=r.$slideEl.find("img, svg, canvas"),r.$imageWrapEl=r.$imageEl.parent(`.${n.containerClass}`),r.maxRatio=r.$imageWrapEl.attr("data-swiper-zoom")||n.maxRatio,0!==r.$imageWrapEl.length)?(r.$imageEl.transition(0),t.zoom.isScaling=!0):r.$imageEl=void 0},onGestureChange(e){const t=this,n=t.params.zoom,i=t.zoom,{gesture:r}=i;if(!gt.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;i.fakeGestureMoved=!0,r.scaleMove=Ut.getDistanceBetweenTouches(e)}r.$imageEl&&0!==r.$imageEl.length&&(gt.gestures?t.zoom.scale=e.scale*i.currentScale:i.scale=r.scaleMove/r.scaleStart*i.currentScale,i.scale>r.maxRatio&&(i.scale=r.maxRatio-1+(i.scale-r.maxRatio+1)**.5),i.scale<n.minRatio&&(i.scale=n.minRatio+1-(n.minRatio-i.scale+1)**.5),r.$imageEl.transform(`translate3d(0,0,0) scale(${i.scale})`))},onGestureEnd(e){const t=this.params.zoom,n=this.zoom,{gesture:i}=n;if(!gt.gestures){if(!n.fakeGestureTouched||!n.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!St.android)return;n.fakeGestureTouched=!1,n.fakeGestureMoved=!1}i.$imageEl&&0!==i.$imageEl.length&&(n.scale=Math.max(Math.min(n.scale,i.maxRatio),t.minRatio),i.$imageEl.transition(this.params.speed).transform(`translate3d(0,0,0) scale(${n.scale})`),n.currentScale=n.scale,n.isScaling=!1,1===n.scale&&(i.$slideEl=void 0))},onTouchStart(e){const t=this.zoom,{gesture:n,image:i}=t;n.$imageEl&&0!==n.$imageEl.length&&(i.isTouched||(St.android&&e.preventDefault(),i.isTouched=!0,i.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,i.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove(e){const t=this,n=t.zoom,{gesture:i,image:r,velocity:s}=n;if(!i.$imageEl||0===i.$imageEl.length)return;if(t.allowClick=!1,!r.isTouched||!i.$slideEl)return;r.isMoved||(r.width=i.$imageEl[0].offsetWidth,r.height=i.$imageEl[0].offsetHeight,r.startX=mt.getTranslate(i.$imageWrapEl[0],"x")||0,r.startY=mt.getTranslate(i.$imageWrapEl[0],"y")||0,i.slideWidth=i.$slideEl[0].offsetWidth,i.slideHeight=i.$slideEl[0].offsetHeight,i.$imageWrapEl.transition(0),t.rtl&&(r.startX=-r.startX,r.startY=-r.startY));const a=r.width*n.scale,o=r.height*n.scale;if(!(a<i.slideWidth&&o<i.slideHeight)){if(r.minX=Math.min(i.slideWidth/2-a/2,0),r.maxX=-r.minX,r.minY=Math.min(i.slideHeight/2-o/2,0),r.maxY=-r.minY,r.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,r.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!r.isMoved&&!n.isScaling){if(t.isHorizontal()&&(Math.floor(r.minX)===Math.floor(r.startX)&&r.touchesCurrent.x<r.touchesStart.x||Math.floor(r.maxX)===Math.floor(r.startX)&&r.touchesCurrent.x>r.touchesStart.x))return void(r.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(r.minY)===Math.floor(r.startY)&&r.touchesCurrent.y<r.touchesStart.y||Math.floor(r.maxY)===Math.floor(r.startY)&&r.touchesCurrent.y>r.touchesStart.y))return void(r.isTouched=!1)}e.preventDefault(),e.stopPropagation(),r.isMoved=!0,r.currentX=r.touchesCurrent.x-r.touchesStart.x+r.startX,r.currentY=r.touchesCurrent.y-r.touchesStart.y+r.startY,r.currentX<r.minX&&(r.currentX=r.minX+1-(r.minX-r.currentX+1)**.8),r.currentX>r.maxX&&(r.currentX=r.maxX-1+(r.currentX-r.maxX+1)**.8),r.currentY<r.minY&&(r.currentY=r.minY+1-(r.minY-r.currentY+1)**.8),r.currentY>r.maxY&&(r.currentY=r.maxY-1+(r.currentY-r.maxY+1)**.8),s.prevPositionX||(s.prevPositionX=r.touchesCurrent.x),s.prevPositionY||(s.prevPositionY=r.touchesCurrent.y),s.prevTime||(s.prevTime=Date.now()),s.x=(r.touchesCurrent.x-s.prevPositionX)/(Date.now()-s.prevTime)/2,s.y=(r.touchesCurrent.y-s.prevPositionY)/(Date.now()-s.prevTime)/2,Math.abs(r.touchesCurrent.x-s.prevPositionX)<2&&(s.x=0),Math.abs(r.touchesCurrent.y-s.prevPositionY)<2&&(s.y=0),s.prevPositionX=r.touchesCurrent.x,s.prevPositionY=r.touchesCurrent.y,s.prevTime=Date.now(),i.$imageWrapEl.transform(`translate3d(${r.currentX}px, ${r.currentY}px,0)`)}},onTouchEnd(){const e=this.zoom,{gesture:t,image:n,velocity:i}=e;if(!t.$imageEl||0===t.$imageEl.length)return;if(!n.isTouched||!n.isMoved)return n.isTouched=!1,void(n.isMoved=!1);n.isTouched=!1,n.isMoved=!1;let r=300,s=300;const a=i.x*r,o=n.currentX+a,l=i.y*s,c=n.currentY+l;0!==i.x&&(r=Math.abs((o-n.currentX)/i.x)),0!==i.y&&(s=Math.abs((c-n.currentY)/i.y));const d=Math.max(r,s);n.currentX=o,n.currentY=c;const u=n.width*e.scale,p=n.height*e.scale;n.minX=Math.min(t.slideWidth/2-u/2,0),n.maxX=-n.minX,n.minY=Math.min(t.slideHeight/2-p/2,0),n.maxY=-n.minY,n.currentX=Math.max(Math.min(n.currentX,n.maxX),n.minX),n.currentY=Math.max(Math.min(n.currentY,n.maxY),n.minY),t.$imageWrapEl.transition(d).transform(`translate3d(${n.currentX}px, ${n.currentY}px,0)`)},onTransitionEnd(){const e=this.zoom,{gesture:t}=e;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl.transform("translate3d(0,0,0)"),t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0,e.scale=1,e.currentScale=1)},toggle(e){const t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in(e){const t=this,n=t.zoom,i=t.params.zoom,{gesture:r,image:s}=n;if(r.$slideEl||(r.$slideEl=t.clickedSlide?pt(t.clickedSlide):t.slides.eq(t.activeIndex),r.$imageEl=r.$slideEl.find("img, svg, canvas"),r.$imageWrapEl=r.$imageEl.parent(`.${i.containerClass}`)),!r.$imageEl||0===r.$imageEl.length)return;let a,o,l,c,d,u,p,f,h,m,g,v,y,b,w,E,T,x;r.$slideEl.addClass(`${i.zoomedSlideClass}`),void 0===s.touchesStart.x&&e?(a="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,o="touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(a=s.touchesStart.x,o=s.touchesStart.y),n.scale=r.$imageWrapEl.attr("data-swiper-zoom")||i.maxRatio,n.currentScale=r.$imageWrapEl.attr("data-swiper-zoom")||i.maxRatio,e?(T=r.$slideEl[0].offsetWidth,x=r.$slideEl[0].offsetHeight,d=(l=r.$slideEl.offset().left)+T/2-a,u=(c=r.$slideEl.offset().top)+x/2-o,h=r.$imageEl[0].offsetWidth,m=r.$imageEl[0].offsetHeight,g=h*n.scale,v=m*n.scale,w=-(y=Math.min(T/2-g/2,0)),E=-(b=Math.min(x/2-v/2,0)),p=d*n.scale,f=u*n.scale,p<y&&(p=y),p>w&&(p=w),f<b&&(f=b),f>E&&(f=E)):(p=0,f=0),r.$imageWrapEl.transition(300).transform(`translate3d(${p}px, ${f}px,0)`),r.$imageEl.transition(300).transform(`translate3d(0,0,0) scale(${n.scale})`)},out(){const e=this,t=e.zoom,n=e.params.zoom,{gesture:i}=t;i.$slideEl||(i.$slideEl=e.clickedSlide?pt(e.clickedSlide):e.slides.eq(e.activeIndex),i.$imageEl=i.$slideEl.find("img, svg, canvas"),i.$imageWrapEl=i.$imageEl.parent(`.${n.containerClass}`)),i.$imageEl&&0!==i.$imageEl.length&&(t.scale=1,t.currentScale=1,i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),i.$slideEl.removeClass(`${n.zoomedSlideClass}`),i.$slideEl=void 0)},enable(){const e=this,t=e.zoom;if(t.enabled)return;t.enabled=!0;const n=!("touchstart"!==e.touchEvents.start||!gt.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1};gt.gestures?(e.$wrapperEl.on("gesturestart",".swiper-slide",t.onGestureStart,n),e.$wrapperEl.on("gesturechange",".swiper-slide",t.onGestureChange,n),e.$wrapperEl.on("gestureend",".swiper-slide",t.onGestureEnd,n)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.on(e.touchEvents.start,".swiper-slide",t.onGestureStart,n),e.$wrapperEl.on(e.touchEvents.move,".swiper-slide",t.onGestureChange,n),e.$wrapperEl.on(e.touchEvents.end,".swiper-slide",t.onGestureEnd,n)),e.$wrapperEl.on(e.touchEvents.move,`.${e.params.zoom.containerClass}`,t.onTouchMove)},disable(){const e=this,t=e.zoom;if(!t.enabled)return;e.zoom.enabled=!1;const n=!("touchstart"!==e.touchEvents.start||!gt.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1};gt.gestures?(e.$wrapperEl.off("gesturestart",".swiper-slide",t.onGestureStart,n),e.$wrapperEl.off("gesturechange",".swiper-slide",t.onGestureChange,n),e.$wrapperEl.off("gestureend",".swiper-slide",t.onGestureEnd,n)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.off(e.touchEvents.start,".swiper-slide",t.onGestureStart,n),e.$wrapperEl.off(e.touchEvents.move,".swiper-slide",t.onGestureChange,n),e.$wrapperEl.off(e.touchEvents.end,".swiper-slide",t.onGestureEnd,n)),e.$wrapperEl.off(e.touchEvents.move,`.${e.params.zoom.containerClass}`,t.onTouchMove)}};const Kt={loadInSlide(e,t=!0){const n=this,i=n.params.lazy;if(void 0===e)return;if(0===n.slides.length)return;const r=n.virtual&&n.params.virtual.enabled?n.$wrapperEl.children(`.${n.params.slideClass}[data-swiper-slide-index="${e}"]`):n.slides.eq(e);let s=r.find(`.${i.elementClass}:not(.${i.loadedClass}):not(.${i.loadingClass})`);!r.hasClass(i.elementClass)||r.hasClass(i.loadedClass)||r.hasClass(i.loadingClass)||(s=s.add(r[0])),0!==s.length&&s.each((e,s)=>{const a=pt(s);a.addClass(i.loadingClass);const o=a.attr("data-background"),l=a.attr("data-src"),c=a.attr("data-srcset"),d=a.attr("data-sizes");n.loadImage(a[0],l||o,c,d,!1,()=>{if(void 0!==n&&null!==n&&n&&(!n||n.params)&&!n.destroyed){if(o?(a.css("background-image",`url("${o}")`),a.removeAttr("data-background")):(c&&(a.attr("srcset",c),a.removeAttr("data-srcset")),d&&(a.attr("sizes",d),a.removeAttr("data-sizes")),l&&(a.attr("src",l),a.removeAttr("data-src"))),a.addClass(i.loadedClass).removeClass(i.loadingClass),r.find(`.${i.preloaderClass}`).remove(),n.params.loop&&t){const e=r.attr("data-swiper-slide-index");if(r.hasClass(n.params.slideDuplicateClass)){const t=n.$wrapperEl.children(`[data-swiper-slide-index="${e}"]:not(.${n.params.slideDuplicateClass})`);n.lazy.loadInSlide(t.index(),!1)}else{const t=n.$wrapperEl.children(`.${n.params.slideDuplicateClass}[data-swiper-slide-index="${e}"]`);n.lazy.loadInSlide(t.index(),!1)}}n.emit("lazyImageReady",r[0],a[0])}}),n.emit("lazyImageLoad",r[0],a[0])})},load(){const e=this,{$wrapperEl:t,params:n,slides:i,activeIndex:r}=e,s=e.virtual&&n.virtual.enabled,a=n.lazy;let o=n.slidesPerView;function l(e){if(s){if(t.children(`.${n.slideClass}[data-swiper-slide-index="${e}"]`).length)return!0}else if(i[e])return!0;return!1}function c(e){return s?pt(e).attr("data-swiper-slide-index"):pt(e).index()}if("auto"===o&&(o=0),e.lazy.initialImageLoaded||(e.lazy.initialImageLoaded=!0),e.params.watchSlidesVisibility)t.children(`.${n.slideVisibleClass}`).each((t,n)=>{const i=s?pt(n).attr("data-swiper-slide-index"):pt(n).index();e.lazy.loadInSlide(i)});else if(o>1)for(let t=r;t<r+o;t+=1)l(t)&&e.lazy.loadInSlide(t);else e.lazy.loadInSlide(r);if(a.loadPrevNext)if(o>1||a.loadPrevNextAmount&&a.loadPrevNextAmount>1){const t=a.loadPrevNextAmount,n=o,s=Math.min(r+n+Math.max(t,n),i.length),c=Math.max(r-Math.max(n,t),0);for(let t=r+o;t<s;t+=1)l(t)&&e.lazy.loadInSlide(t);for(let t=c;t<r;t+=1)l(t)&&e.lazy.loadInSlide(t)}else{const i=t.children(`.${n.slideNextClass}`);i.length>0&&e.lazy.loadInSlide(c(i));const r=t.children(`.${n.slidePrevClass}`);r.length>0&&e.lazy.loadInSlide(c(r))}}};const Qt={LinearSpline:function(e,t){const n=function(){let e,t,n;return(i,r)=>{for(t=-1,e=i.length;e-t>1;)i[n=e+t>>1]<=r?t=n:e=n;return e}}();let i,r;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(r=n(this.x,e),i=r-1,(e-this.x[i])*(this.y[r]-this.y[i])/(this.x[r]-this.x[i])+this.y[i]):0},this},getInterpolateFunction(e){const t=this;t.controller.spline||(t.controller.spline=t.params.loop?new Qt.LinearSpline(t.slidesGrid,e.slidesGrid):new Qt.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate(e,t){const n=this,i=n.controller.control;let r,s;function a(e){const t=n.rtlTranslate?-n.translate:n.translate;"slide"===n.params.controller.by&&(n.controller.getInterpolateFunction(e),s=-n.controller.spline.interpolate(-t)),s&&"container"!==n.params.controller.by||(r=(e.maxTranslate()-e.minTranslate())/(n.maxTranslate()-n.minTranslate()),s=(t-n.minTranslate())*r+e.minTranslate()),n.params.controller.inverse&&(s=e.maxTranslate()-s),e.updateProgress(s),e.setTranslate(s,n),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(i))for(let e=0;e<i.length;e+=1)i[e]!==t&&i[e]instanceof Mt&&a(i[e]);else i instanceof Mt&&t!==i&&a(i)},setTransition(e,t){const n=this,i=n.controller.control;let r;function s(t){t.setTransition(e,n),0!==e&&(t.transitionStart(),t.$wrapperEl.transitionEnd(()=>{i&&(t.params.loop&&"slide"===n.params.controller.by&&t.loopFix(),t.transitionEnd())}))}if(Array.isArray(i))for(r=0;r<i.length;r+=1)i[r]!==t&&i[r]instanceof Mt&&s(i[r]);else i instanceof Mt&&t!==i&&s(i)}};const Jt={makeElFocusable:e=>(e.attr("tabIndex","0"),e),addElRole:(e,t)=>(e.attr("role",t),e),addElLabel:(e,t)=>(e.attr("aria-label",t),e),disableEl:e=>(e.attr("aria-disabled",!0),e),enableEl:e=>(e.attr("aria-disabled",!1),e),onEnterKey(e){const t=this,n=t.params.a11y;if(13!==e.keyCode)return;const i=pt(e.target);t.navigation&&t.navigation.$nextEl&&i.is(t.navigation.$nextEl)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?t.a11y.notify(n.lastSlideMessage):t.a11y.notify(n.nextSlideMessage)),t.navigation&&t.navigation.$prevEl&&i.is(t.navigation.$prevEl)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?t.a11y.notify(n.firstSlideMessage):t.a11y.notify(n.prevSlideMessage)),t.pagination&&i.is(`.${t.params.pagination.bulletClass}`)&&i[0].click()},notify(e){const t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation(){const e=this;if(e.params.loop)return;const{$nextEl:t,$prevEl:n}=e.navigation;n&&n.length>0&&(e.isBeginning?e.a11y.disableEl(n):e.a11y.enableEl(n)),t&&t.length>0&&(e.isEnd?e.a11y.disableEl(t):e.a11y.enableEl(t))},updatePagination(){const e=this,t=e.params.a11y;e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.bullets.each((n,i)=>{const r=pt(i);e.a11y.makeElFocusable(r),e.a11y.addElRole(r,"button"),e.a11y.addElLabel(r,t.paginationBulletMessage.replace(/{{index}}/,r.index()+1))})},init(){const e=this;e.$el.append(e.a11y.liveRegion);const t=e.params.a11y;let n,i;e.navigation&&e.navigation.$nextEl&&(n=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(i=e.navigation.$prevEl),n&&(e.a11y.makeElFocusable(n),e.a11y.addElRole(n,"button"),e.a11y.addElLabel(n,t.nextSlideMessage),n.on("keydown",e.a11y.onEnterKey)),i&&(e.a11y.makeElFocusable(i),e.a11y.addElRole(i,"button"),e.a11y.addElLabel(i,t.prevSlideMessage),i.on("keydown",e.a11y.onEnterKey)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on("keydown",`.${e.params.pagination.bulletClass}`,e.a11y.onEnterKey)},destroy(){const e=this;let t,n;e.a11y.liveRegion&&e.a11y.liveRegion.length>0&&e.a11y.liveRegion.remove(),e.navigation&&e.navigation.$nextEl&&(t=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(n=e.navigation.$prevEl),t&&t.off("keydown",e.a11y.onEnterKey),n&&n.off("keydown",e.a11y.onEnterKey),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.off("keydown",`.${e.params.pagination.bulletClass}`,e.a11y.onEnterKey)}};const Zt={init(){const e=this;if(!e.params.history)return;if(!dt.history||!dt.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);const t=e.history;t.initialized=!0,t.paths=Zt.getPathValues(),(t.paths.key||t.paths.value)&&(t.scrollToSlide(0,t.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||dt.addEventListener("popstate",e.history.setHistoryPopState))},destroy(){const e=this;e.params.history.replaceState||dt.removeEventListener("popstate",e.history.setHistoryPopState)},setHistoryPopState(){this.history.paths=Zt.getPathValues(),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues(){const e=dt.location.pathname.slice(1).split("/").filter(e=>""!==e),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory(e,t){if(!this.history.initialized||!this.params.history.enabled)return;const n=this.slides.eq(t);let i=Zt.slugify(n.attr("data-history"));dt.location.pathname.includes(e)||(i=`${e}/${i}`);const r=dt.history.state;r&&r.value===i||(this.params.history.replaceState?dt.history.replaceState({value:i},null,i):dt.history.pushState({value:i},null,i))},slugify:e=>e.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),scrollToSlide(e,t,n){const i=this;if(t)for(let r=0,s=i.slides.length;r<s;r+=1){const s=i.slides.eq(r);if(Zt.slugify(s.attr("data-history"))===t&&!s.hasClass(i.params.slideDuplicateClass)){const t=s.index();i.slideTo(t,e,n)}}else i.slideTo(0,e,n)}};const en={onHashCange(){const e=this,t=ct.location.hash.replace("#","");t!==e.slides.eq(e.activeIndex).attr("data-hash")&&e.slideTo(e.$wrapperEl.children(`.${e.params.slideClass}[data-hash="${t}"]`).index())},setHash(){const e=this;if(e.hashNavigation.initialized&&e.params.hashNavigation.enabled)if(e.params.hashNavigation.replaceState&&dt.history&&dt.history.replaceState)dt.history.replaceState(null,null,`#${e.slides.eq(e.activeIndex).attr("data-hash")}`||"");else{const t=e.slides.eq(e.activeIndex),n=t.attr("data-hash")||t.attr("data-history");ct.location.hash=n||""}},init(){const e=this;if(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)return;e.hashNavigation.initialized=!0;const t=ct.location.hash.replace("#","");if(t){const n=0;for(let i=0,r=e.slides.length;i<r;i+=1){const r=e.slides.eq(i);if((r.attr("data-hash")||r.attr("data-history"))===t&&!r.hasClass(e.params.slideDuplicateClass)){const t=r.index();e.slideTo(t,n,e.params.runCallbacksOnInit,!0)}}}e.params.hashNavigation.watchState&&pt(dt).on("hashchange",e.hashNavigation.onHashCange)},destroy(){const e=this;e.params.hashNavigation.watchState&&pt(dt).off("hashchange",e.hashNavigation.onHashCange)}};const tn={run(){const e=this,t=e.slides.eq(e.activeIndex);let n=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(n=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),e.autoplay.timeout=mt.nextTick(()=>{e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay"))},n)},start(){return void 0===this.autoplay.timeout&&(!this.autoplay.running&&(this.autoplay.running=!0,this.emit("autoplayStart"),this.autoplay.run(),!0))},stop(){const e=this;return!!e.autoplay.running&&(void 0!==e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit("autoplayStop"),!0))},pause(e){const t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?t.$wrapperEl.transitionEnd(()=>{t&&!t.destroyed&&(t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}):(t.autoplay.paused=!1,t.autoplay.run())))}};const nn={setTranslate(){const e=this,{slides:t}=e;for(let n=0;n<t.length;n+=1){const t=e.slides.eq(n);let i=-t[0].swiperSlideOffset;e.params.virtualTranslate||(i-=e.translate);let r=0;e.isHorizontal()||(r=i,i=0);const s=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(t[0].progress),0):1+Math.min(Math.max(t[0].progress,-1),0);t.css({opacity:s}).transform(`translate3d(${i}px, ${r}px, 0px)`)}},setTransition(e){const t=this,{slides:n,$wrapperEl:i}=t;if(n.transition(e),t.params.virtualTranslate&&0!==e){let e=!1;n.transitionEnd(()=>{if(e)return;if(!t||t.destroyed)return;e=!0,t.animating=!1;const n=["webkitTransitionEnd","transitionend"];for(let e=0;e<n.length;e+=1)i.trigger(n[e])})}}};const rn={setTranslate(){const{$el:e,$wrapperEl:t,slides:n,width:i,height:r,rtlTranslate:s,size:a}=this,o=this.params.cubeEffect,l=this.isHorizontal(),c=this.virtual&&this.params.virtual.enabled;let d,u=0;o.shadow&&(l?(0===(d=t.find(".swiper-cube-shadow")).length&&(d=pt('<div class="swiper-cube-shadow"></div>'),t.append(d)),d.css({height:`${i}px`})):0===(d=e.find(".swiper-cube-shadow")).length&&(d=pt('<div class="swiper-cube-shadow"></div>'),e.append(d)));for(let e=0;e<n.length;e+=1){const t=n.eq(e);let i=e;c&&(i=parseInt(t.attr("data-swiper-slide-index"),10));let r=90*i,d=Math.floor(r/360);s&&(r=-r,d=Math.floor(-r/360));const p=Math.max(Math.min(t[0].progress,1),-1);let f=0,h=0,m=0;i%4==0?(f=4*-d*a,m=0):(i-1)%4==0?(f=0,m=4*-d*a):(i-2)%4==0?(f=a+4*d*a,m=a):(i-3)%4==0&&(f=-a,m=3*a+4*a*d),s&&(f=-f),l||(h=f,f=0);const g=`rotateX(${l?0:-r}deg) rotateY(${l?r:0}deg) translate3d(${f}px, ${h}px, ${m}px)`;if(p<=1&&p>-1&&(u=90*i+90*p,s&&(u=90*-i-90*p)),t.transform(g),o.slideShadows){let e=l?t.find(".swiper-slide-shadow-left"):t.find(".swiper-slide-shadow-top"),n=l?t.find(".swiper-slide-shadow-right"):t.find(".swiper-slide-shadow-bottom");0===e.length&&(e=pt(`<div class="swiper-slide-shadow-${l?"left":"top"}"></div>`),t.append(e)),0===n.length&&(n=pt(`<div class="swiper-slide-shadow-${l?"right":"bottom"}"></div>`),t.append(n)),e.length&&(e[0].style.opacity=Math.max(-p,0)),n.length&&(n[0].style.opacity=Math.max(p,0))}}if(t.css({"-webkit-transform-origin":`50% 50% -${a/2}px`,"-moz-transform-origin":`50% 50% -${a/2}px`,"-ms-transform-origin":`50% 50% -${a/2}px`,"transform-origin":`50% 50% -${a/2}px`}),o.shadow)if(l)d.transform(`translate3d(0px, ${i/2+o.shadowOffset}px, ${-i/2}px) rotateX(90deg) rotateZ(0deg) scale(${o.shadowScale})`);else{const e=Math.abs(u)-90*Math.floor(Math.abs(u)/90),t=1.5-(Math.sin(2*e*Math.PI/360)/2+Math.cos(2*e*Math.PI/360)/2),n=o.shadowScale,i=o.shadowScale/t,s=o.shadowOffset;d.transform(`scale3d(${n}, 1, ${i}) translate3d(0px, ${r/2+s}px, ${-r/2/i}px) rotateX(-90deg)`)}const p=Ot.isSafari||Ot.isUiWebView?-a/2:0;t.transform(`translate3d(0px,0,${p}px) rotateX(${this.isHorizontal()?0:u}deg) rotateY(${this.isHorizontal()?-u:0}deg)`)},setTransition(e){const{$el:t,slides:n}=this;n.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}};const sn={setTranslate(){const e=this,{slides:t,rtlTranslate:n}=e;for(let i=0;i<t.length;i+=1){const r=t.eq(i);let s=r[0].progress;e.params.flipEffect.limitRotation&&(s=Math.max(Math.min(r[0].progress,1),-1));let a=-180*s,o=0,l=-r[0].swiperSlideOffset,c=0;if(e.isHorizontal()?n&&(a=-a):(c=l,l=0,o=-a,a=0),r[0].style.zIndex=-Math.abs(Math.round(s))+t.length,e.params.flipEffect.slideShadows){let t=e.isHorizontal()?r.find(".swiper-slide-shadow-left"):r.find(".swiper-slide-shadow-top"),n=e.isHorizontal()?r.find(".swiper-slide-shadow-right"):r.find(".swiper-slide-shadow-bottom");0===t.length&&(t=pt(`<div class="swiper-slide-shadow-${e.isHorizontal()?"left":"top"}"></div>`),r.append(t)),0===n.length&&(n=pt(`<div class="swiper-slide-shadow-${e.isHorizontal()?"right":"bottom"}"></div>`),r.append(n)),t.length&&(t[0].style.opacity=Math.max(-s,0)),n.length&&(n[0].style.opacity=Math.max(s,0))}r.transform(`translate3d(${l}px, ${c}px, 0px) rotateX(${o}deg) rotateY(${a}deg)`)}},setTransition(e){const t=this,{slides:n,activeIndex:i,$wrapperEl:r}=t;if(n.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),t.params.virtualTranslate&&0!==e){let e=!1;n.eq(i).transitionEnd(function(){if(e)return;if(!t||t.destroyed)return;e=!0,t.animating=!1;const n=["webkitTransitionEnd","transitionend"];for(let e=0;e<n.length;e+=1)r.trigger(n[e])})}}};const an={setTranslate(){const{width:e,height:t,slides:n,$wrapperEl:i,slidesSizesGrid:r}=this,s=this.params.coverflowEffect,a=this.isHorizontal(),o=this.translate,l=a?e/2-o:t/2-o,c=a?s.rotate:-s.rotate,d=s.depth;for(let e=0,t=n.length;e<t;e+=1){const t=n.eq(e),i=r[e],o=(l-t[0].swiperSlideOffset-i/2)/i*s.modifier;let u=a?c*o:0,p=a?0:c*o,f=-d*Math.abs(o),h=a?0:s.stretch*o,m=a?s.stretch*o:0;Math.abs(m)<.001&&(m=0),Math.abs(h)<.001&&(h=0),Math.abs(f)<.001&&(f=0),Math.abs(u)<.001&&(u=0),Math.abs(p)<.001&&(p=0);const g=`translate3d(${m}px,${h}px,${f}px)  rotateX(${p}deg) rotateY(${u}deg)`;if(t.transform(g),t[0].style.zIndex=1-Math.abs(Math.round(o)),s.slideShadows){let e=a?t.find(".swiper-slide-shadow-left"):t.find(".swiper-slide-shadow-top"),n=a?t.find(".swiper-slide-shadow-right"):t.find(".swiper-slide-shadow-bottom");0===e.length&&(e=pt(`<div class="swiper-slide-shadow-${a?"left":"top"}"></div>`),t.append(e)),0===n.length&&(n=pt(`<div class="swiper-slide-shadow-${a?"right":"bottom"}"></div>`),t.append(n)),e.length&&(e[0].style.opacity=o>0?o:0),n.length&&(n[0].style.opacity=-o>0?-o:0)}}if(gt.pointerEvents||gt.prefixedPointerEvents){i[0].style.perspectiveOrigin=`${l}px 50%`}},setTransition(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}};const on=[Lt,$t,Pt,Ht,jt,Wt,Ft,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create(){mt.extend(this,{mousewheel:{enabled:!1,enable:Vt.enable.bind(this),disable:Vt.disable.bind(this),handle:Vt.handle.bind(this),handleMouseEnter:Vt.handleMouseEnter.bind(this),handleMouseLeave:Vt.handleMouseLeave.bind(this),lastScrollTime:mt.now()}})},on:{init(){this.params.mousewheel.enabled&&this.mousewheel.enable()},destroy(){this.mousewheel.enabled&&this.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create(){mt.extend(this,{navigation:{init:Gt.init.bind(this),update:Gt.update.bind(this),destroy:Gt.destroy.bind(this)}})},on:{init(){this.navigation.init(),this.navigation.update()},toEdge(){this.navigation.update()},fromEdge(){this.navigation.update()},destroy(){this.navigation.destroy()},click(e){const t=this,{$nextEl:n,$prevEl:i}=t.navigation;!t.params.navigation.hideOnClick||pt(e.target).is(i)||pt(e.target).is(n)||(n&&n.toggleClass(t.params.navigation.hiddenClass),i&&i.toggleClass(t.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create(){mt.extend(this,{pagination:{init:qt.init.bind(this),render:qt.render.bind(this),update:qt.update.bind(this),destroy:qt.destroy.bind(this),dynamicBulletIndex:0}})},on:{init(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange(){const e=this;e.params.loop?e.pagination.update():void 0===e.snapIndex&&e.pagination.update()},snapIndexChange(){const e=this;e.params.loop||e.pagination.update()},slidesLengthChange(){const e=this;e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange(){const e=this;e.params.loop||(e.pagination.render(),e.pagination.update())},destroy(){this.pagination.destroy()},click(e){const t=this;t.params.pagination.el&&t.params.pagination.hideOnClick&&t.pagination.$el.length>0&&!pt(e.target).hasClass(t.params.pagination.bulletClass)&&t.pagination.$el.toggleClass(t.params.pagination.hiddenClass)}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create(){mt.extend(this,{scrollbar:{init:Xt.init.bind(this),destroy:Xt.destroy.bind(this),updateSize:Xt.updateSize.bind(this),setTranslate:Xt.setTranslate.bind(this),setTransition:Xt.setTransition.bind(this),enableDraggable:Xt.enableDraggable.bind(this),disableDraggable:Xt.disableDraggable.bind(this),setDragPosition:Xt.setDragPosition.bind(this),onDragStart:Xt.onDragStart.bind(this),onDragMove:Xt.onDragMove.bind(this),onDragEnd:Xt.onDragEnd.bind(this),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init(){this.scrollbar.init(),this.scrollbar.updateSize(),this.scrollbar.setTranslate()},update(){this.scrollbar.updateSize()},resize(){this.scrollbar.updateSize()},observerUpdate(){this.scrollbar.updateSize()},setTranslate(){this.scrollbar.setTranslate()},setTransition(e){this.scrollbar.setTransition(e)},destroy(){this.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create(){mt.extend(this,{parallax:{setTransform:Yt.setTransform.bind(this),setTranslate:Yt.setTranslate.bind(this),setTransition:Yt.setTransition.bind(this)}})},on:{beforeInit(){this.params.parallax.enabled&&(this.params.watchSlidesProgress=!0)},init(){this.params.parallax&&this.parallax.setTranslate()},setTranslate(){this.params.parallax&&this.parallax.setTranslate()},setTransition(e){this.params.parallax&&this.parallax.setTransition(e)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create(){const e=this,t={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(n=>{t[n]=Ut[n].bind(e)}),mt.extend(e,{zoom:t})},on:{init(){const e=this;e.params.zoom.enabled&&e.zoom.enable()},destroy(){this.zoom.disable()},touchStart(e){this.zoom.enabled&&this.zoom.onTouchStart(e)},touchEnd(e){this.zoom.enabled&&this.zoom.onTouchEnd(e)},doubleTap(e){const t=this;t.params.zoom.enabled&&t.zoom.enabled&&t.params.zoom.toggle&&t.zoom.toggle(e)},transitionEnd(){const e=this;e.zoom.enabled&&e.params.zoom.enabled&&e.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create(){mt.extend(this,{lazy:{initialImageLoaded:!1,load:Kt.load.bind(this),loadInSlide:Kt.loadInSlide.bind(this)}})},on:{beforeInit(){const e=this;e.params.lazy.enabled&&e.params.preloadImages&&(e.params.preloadImages=!1)},init(){const e=this;e.params.lazy.enabled&&!e.params.loop&&0===e.params.initialSlide&&e.lazy.load()},scroll(){const e=this;e.params.freeMode&&!e.params.freeModeSticky&&e.lazy.load()},resize(){const e=this;e.params.lazy.enabled&&e.lazy.load()},scrollbarDragMove(){const e=this;e.params.lazy.enabled&&e.lazy.load()},transitionStart(){const e=this;e.params.lazy.enabled&&(e.params.lazy.loadOnTransitionStart||!e.params.lazy.loadOnTransitionStart&&!e.lazy.initialImageLoaded)&&e.lazy.load()},transitionEnd(){const e=this;e.params.lazy.enabled&&!e.params.lazy.loadOnTransitionStart&&e.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create(){mt.extend(this,{controller:{control:this.params.controller.control,getInterpolateFunction:Qt.getInterpolateFunction.bind(this),setTranslate:Qt.setTranslate.bind(this),setTransition:Qt.setTransition.bind(this)}})},on:{update(){const e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},resize(){const e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},observerUpdate(){const e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},setTranslate(e,t){this.controller.control&&this.controller.setTranslate(e,t)},setTransition(e,t){this.controller.control&&this.controller.setTransition(e,t)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create(){const e=this;mt.extend(e,{a11y:{liveRegion:pt(`<span class="${e.params.a11y.notificationClass}" aria-live="assertive" aria-atomic="true"></span>`)}}),Object.keys(Jt).forEach(t=>{e.a11y[t]=Jt[t].bind(e)})},on:{init(){this.params.a11y.enabled&&(this.a11y.init(),this.a11y.updateNavigation())},toEdge(){this.params.a11y.enabled&&this.a11y.updateNavigation()},fromEdge(){this.params.a11y.enabled&&this.a11y.updateNavigation()},paginationUpdate(){this.params.a11y.enabled&&this.a11y.updatePagination()},destroy(){this.params.a11y.enabled&&this.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create(){mt.extend(this,{history:{init:Zt.init.bind(this),setHistory:Zt.setHistory.bind(this),setHistoryPopState:Zt.setHistoryPopState.bind(this),scrollToSlide:Zt.scrollToSlide.bind(this),destroy:Zt.destroy.bind(this)}})},on:{init(){const e=this;e.params.history.enabled&&e.history.init()},destroy(){const e=this;e.params.history.enabled&&e.history.destroy()},transitionEnd(){const e=this;e.history.initialized&&e.history.setHistory(e.params.history.key,e.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create(){mt.extend(this,{hashNavigation:{initialized:!1,init:en.init.bind(this),destroy:en.destroy.bind(this),setHash:en.setHash.bind(this),onHashCange:en.onHashCange.bind(this)}})},on:{init(){const e=this;e.params.hashNavigation.enabled&&e.hashNavigation.init()},destroy(){const e=this;e.params.hashNavigation.enabled&&e.hashNavigation.destroy()},transitionEnd(){const e=this;e.hashNavigation.initialized&&e.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create(){mt.extend(this,{autoplay:{running:!1,paused:!1,run:tn.run.bind(this),start:tn.start.bind(this),stop:tn.stop.bind(this),pause:tn.pause.bind(this)}})},on:{init(){const e=this;e.params.autoplay.enabled&&e.autoplay.start()},beforeTransitionStart(e,t){const n=this;n.autoplay.running&&(t||!n.params.autoplay.disableOnInteraction?n.autoplay.pause(e):n.autoplay.stop())},sliderFirstMove(){const e=this;e.autoplay.running&&(e.params.autoplay.disableOnInteraction?e.autoplay.stop():e.autoplay.pause())},destroy(){const e=this;e.autoplay.running&&e.autoplay.stop()}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create(){mt.extend(this,{fadeEffect:{setTranslate:nn.setTranslate.bind(this),setTransition:nn.setTransition.bind(this)}})},on:{beforeInit(){if("fade"!==this.params.effect)return;this.classNames.push(`${this.params.containerModifierClass}fade`);const e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};mt.extend(this.params,e),mt.extend(this.originalParams,e)},setTranslate(){"fade"===this.params.effect&&this.fadeEffect.setTranslate()},setTransition(e){"fade"===this.params.effect&&this.fadeEffect.setTransition(e)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create(){mt.extend(this,{cubeEffect:{setTranslate:rn.setTranslate.bind(this),setTransition:rn.setTransition.bind(this)}})},on:{beforeInit(){if("cube"!==this.params.effect)return;this.classNames.push(`${this.params.containerModifierClass}cube`),this.classNames.push(`${this.params.containerModifierClass}3d`);const e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};mt.extend(this.params,e),mt.extend(this.originalParams,e)},setTranslate(){"cube"===this.params.effect&&this.cubeEffect.setTranslate()},setTransition(e){"cube"===this.params.effect&&this.cubeEffect.setTransition(e)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create(){mt.extend(this,{flipEffect:{setTranslate:sn.setTranslate.bind(this),setTransition:sn.setTransition.bind(this)}})},on:{beforeInit(){if("flip"!==this.params.effect)return;this.classNames.push(`${this.params.containerModifierClass}flip`),this.classNames.push(`${this.params.containerModifierClass}3d`);const e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};mt.extend(this.params,e),mt.extend(this.originalParams,e)},setTranslate(){"flip"===this.params.effect&&this.flipEffect.setTranslate()},setTransition(e){"flip"===this.params.effect&&this.flipEffect.setTransition(e)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0}},create(){mt.extend(this,{coverflowEffect:{setTranslate:an.setTranslate.bind(this),setTransition:an.setTransition.bind(this)}})},on:{beforeInit(){"coverflow"===this.params.effect&&(this.classNames.push(`${this.params.containerModifierClass}coverflow`),this.classNames.push(`${this.params.containerModifierClass}3d`),this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},setTranslate(){"coverflow"===this.params.effect&&this.coverflowEffect.setTranslate()},setTransition(e){"coverflow"===this.params.effect&&this.coverflowEffect.setTransition(e)}}}];void 0===Mt.use&&(Mt.use=Mt.Class.use,Mt.installModule=Mt.Class.installModule),Mt.use(on);var ln=n(0),cn=n.n(ln);const dn=window.location.hostname,un=window.location.href;function pn(){$("#slide-dropzone").dropzone({url:"/api/upload",maxFilesize:50,uploadMultiple:!1,addRemoveLinks:!0,dictResponseError:"Server not Configured",acceptedFiles:".pdf",headers:{"X-CSRF-Token":$('input[name="csrf_token"]').val()},init(){console.log("initializing...");const e=(new Date).getTime();this.options.addRemoveLinks=!0,this.options.dictRemoveFile="Delete",this.on("error",e=>{console.log("dropzone upload err ",e)}),this.on("addedfile",e=>{console.log("new file added ",e)}),this.on("sending",t=>{t.fileMeta={size:t.size,date:e},$(".meter").show()}),this.on("totaluploadprogress",e=>{console.log("progress ",e),$(".roller").width(`${e}%`)}),this.on("queuecomplete",e=>{}),this.on("success",(e,t)=>{cn()(t)}),this.on("removedfile",e=>{console.log(e)})},accept:(e,t)=>t()})}switch(un){case`http://${dn}:3000/slide-upload`:console.log("--------case dz--------"),console.log(un),console.log(dn),pn();break;default:console.log("--------default dz--------"),console.log(un),console.log(dn),pn()}const fn=window.location.hostname,hn=window.location.href,{pdf:mn}=window;switch(hn){case`http://${fn}:3000/`:console.log("--------case pdf--------"),console.log(hn),console.log(fn),function(){console.log("pdf loading data...");const e=window["pdfjs-dist/build/pdf"];console.log("pdfjsLib"),console.log(e),e.GlobalWorkerOptions.workerSrc="//mozilla.github.io/pdf.js/build/pdf.worker.js";const t=.8,n=document.getElementById("the-canvas"),i=n.getContext("2d");let r=null,s=1,a=!1,o=null;function l(e){a=!0,r.getPage(e).then(e=>{const r=e.getViewport(t);n.height=r.height,n.width=r.width;const s={canvasContext:i,viewport:r};e.render(s).promise.then(()=>{a=!1,null!==o&&(l(o),o=null)})}),document.getElementById("page_num").textContent=e}function c(e){a?o=e:l(e)}document.getElementById("prev").addEventListener("click",function(){s<=1||c(--s)}),document.getElementById("next").addEventListener("click",function(){s>=r.numPages||c(++s)}),e.getDocument("//cdn.mozilla.net/pdfjs/tracemonkey.pdf").then(e=>{r=e,document.getElementById("page_count").textContent=r.numPages,l(s)})}();break;case`http://${fn}:3000/edit-presentation`:console.log("--------case pdf--------"),console.log(hn),console.log(fn),function(e){console.log("pdf loading data..."),console.log(e);const t=window["pdfjs-dist/build/pdf"];console.log("pdfjsLib"),console.log(t),t.GlobalWorkerOptions.workerSrc="//mozilla.github.io/pdf.js/build/pdf.worker.js";const n=.8,i=document.getElementById("the-canvas"),r=i.getContext("2d");let s=null,a=1,o=!1,l=null;function c(e){o=!0,s.getPage(e).then(e=>{const t=e.getViewport(n);i.height=t.height,i.width=t.width;const s={canvasContext:r,viewport:t};e.render(s).promise.then(()=>{o=!1,null!==l&&(c(l),l=null)})}),document.getElementById("page_num").textContent=e}function d(e){o?l=e:c(e)}document.getElementById("prev").addEventListener("click",function(){a<=1||d(--a)}),document.getElementById("next").addEventListener("click",function(){a>=s.numPages||d(++a)}),t.getDocument("//cdn.mozilla.net/pdfjs/tracemonkey.pdf").then(e=>{s=e,document.getElementById("page_count").textContent=s.numPages,c(a)})}(mn);break;default:console.log("--------default pdf--------"),console.log(hn),console.log(fn)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,